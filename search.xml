<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JSP数据交互(一)</title>
    <url>/2021/08/09/JSP%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92-%E4%B8%80/</url>
    <content><![CDATA[<h1 id="什么是JSP内置对象"><a href="#什么是JSP内置对象" class="headerlink" title="什么是JSP内置对象"></a>什么是JSP内置对象</h1><p>JSP内置对象是 Web 容器创建的一组对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">        int[ ] value = &#123; <span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span> &#125;;</span><br><span class="line">        <span class="keyword">for</span>  (int i : value) &#123;</span><br><span class="line">                out.println(i);</span><br><span class="line">        &#125; </span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>



<p>没有进行声明和创建，但却可以使用out对象</p>
<h1 id="常用的JSP内置对象"><a href="#常用的JSP内置对象" class="headerlink" title="常用的JSP内置对象"></a>常用的JSP内置对象</h1><ol>
<li>out</li>
<li>request</li>
<li>session</li>
<li>application</li>
</ol>
<span id="more"></span>

<h1 id="JSP内置对象request"><a href="#JSP内置对象request" class="headerlink" title="JSP内置对象request"></a>JSP内置对象request</h1><p>request对象主要用于处理客户端请求</p>
<p><img src="/2021/08/09/JSP%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92-%E4%B8%80/image-20210811152755101.png" alt="image-20210811152755101"></p>
<h4 id="request对象常用方法"><a href="#request对象常用方法" class="headerlink" title="request对象常用方法"></a>request对象常用方法</h4><table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>String  getParameter(String name)</td>
<td>根据表单组件名称获取提交数据</td>
</tr>
<tr>
<td>String[  ] getParameterValues(String name)</td>
<td>获取表单组件对应多个值时的请求数据</td>
</tr>
<tr>
<td>void  setCharacterEncoding(String charset)</td>
<td>指定每个请求的编码</td>
</tr>
<tr>
<td>RequestDispatcher getRequestDispatcher(String path)</td>
<td>返回一个RequestDispatcher对象，该对象的forward( )方法用于转发请求</td>
</tr>
</tbody></table>
<h3 id="解决乱码问题"><a href="#解决乱码问题" class="headerlink" title="解决乱码问题"></a>解决乱码问题</h3><h4 id="提交方式-POST方式"><a href="#提交方式-POST方式" class="headerlink" title="提交方式:POST方式"></a>提交方式:POST方式</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;%   <span class="comment">// 以POST方式提交数据时</span></span><br><span class="line">        <span class="comment">// 设置读取请求信息的字符编码为UTF-8</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);	</span><br><span class="line">        <span class="comment">// 读取用户名和密码</span></span><br><span class="line">        <span class="built_in">String</span> name = request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="built_in">String</span> pwd = request.getParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h4 id="提交方式-GET方式1"><a href="#提交方式-GET方式1" class="headerlink" title="提交方式:GET方式1"></a>提交方式:GET方式1</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;%   <span class="comment">// 以GET方式提交数据时</span></span><br><span class="line">        <span class="comment">// 读取用户名和密码</span></span><br><span class="line">        <span class="built_in">String</span> name = request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">// 对请求数据进行字符编码</span></span><br><span class="line">        name = <span class="keyword">new</span> <span class="built_in">String</span>(name.getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h4 id="提交方式-GET方式2"><a href="#提交方式-GET方式2" class="headerlink" title="提交方式:GET方式2"></a>提交方式:GET方式2</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">在Tomcat目录结构\conf\server.xml中设置字符集</span><br><span class="line">&lt;Connector  port=<span class="string">&quot;8080&quot;</span>  protocol=<span class="string">&quot;HTTP/1.1&quot;</span></span><br><span class="line">connectionTimeout=<span class="string">&quot;20000&quot;</span></span><br><span class="line">redirectPort=<span class="string">&quot;8443&quot;</span>  URIEncoding=<span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<h1 id="JSP内置对象response"><a href="#JSP内置对象response" class="headerlink" title="JSP内置对象response"></a>JSP内置对象response</h1><p><strong>response对象用于响应客户请求并向客户端输出信息</strong> </p>
<p><img src="/2021/08/09/JSP%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92-%E4%B8%80/image-20210811153122215.png" alt="image-20210811153122215"></p>
<h2 id="页面重定向"><a href="#页面重定向" class="headerlink" title="页面重定向"></a>页面重定向</h2><ul>
<li>void sendRedirect(String location)</li>
<li>客户端将重新发送请求到指定的URL</li>
</ul>
<p>实现登录验证，并在验证成功后跳转至欢迎页面</p>
<p><img src="/2021/08/09/JSP%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92-%E4%B8%80/image-20210811153215604.png" alt="image-20210811153215604"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="built_in">String</span> name = request.getParameter(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line"><span class="built_in">String</span> pwd = request.getParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;sa&quot;</span>.equals(name) &amp;&amp; <span class="string">&quot;sa&quot;</span>.equals(pwd))       	</span><br><span class="line">    response.sendRedirect(<span class="string">&quot;welcome.jsp&quot;</span>);<span class="comment">//跳转至欢迎页面</span></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h4 id="页面实现跳转了，请求的信息是不会转移"><a href="#页面实现跳转了，请求的信息是不会转移" class="headerlink" title="页面实现跳转了，请求的信息是不会转移"></a>页面实现跳转了，请求的信息是不会转移</h4><h3 id="使用转发取代重定向实现页面跳转"><a href="#使用转发取代重定向实现页面跳转" class="headerlink" title="使用转发取代重定向实现页面跳转"></a>使用转发取代重定向实现页面跳转</h3><p>如何才能实现页面跳转后，请求信息不丢失呢？</p>
<h2 id="请求的转发"><a href="#请求的转发" class="headerlink" title="请求的转发"></a>请求的转发</h2><h4 id="转发的作用"><a href="#转发的作用" class="headerlink" title="转发的作用"></a>转发的作用</h4><p>在服务器端，将请求发送给服务器上的其他资源，以共同完成一次请求的处理</p>
<p><strong>转发的实现</strong></p>
<p><strong>RequestDispatcher对象的forward()方法</strong></p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">RequestDispatcher rd = request.getRequestDispatcher(<span class="string">&quot;welcome.jsp&quot;</span>);</span><br><span class="line">rd.forward(request, response);</span><br><span class="line">%&gt;<span class="comment">//在多个页面交互过程中请求中的数据可以共享</span></span><br></pre></td></tr></table></figure>

<h2 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h2><ul>
<li>转发是在服务器端发挥作用，将同一请求在服务器资源之间进行传递</li>
<li>客户端浏览器的地址栏不会显示转向后的地址</li>
</ul>
<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><ul>
<li>重定向是在客户端发挥作用，通过发送一个新的请求实现页面转向</li>
<li>在地址栏中可以显示转向后的地址</li>
</ul>
<h1 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h1><p><strong>一个会话就是在一段时间内，一个客户端与Web服务器的一连串相关的交互过程</strong></p>
<p><img src="/2021/08/09/JSP%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92-%E4%B8%80/image-20210811153646306.png" alt="image-20210811153646306"></p>
<h1 id="JSP内置对象session"><a href="#JSP内置对象session" class="headerlink" title="JSP内置对象session"></a>JSP内置对象session</h1><h4 id="session对象常用方法："><a href="#session对象常用方法：" class="headerlink" title="session对象常用方法："></a>session对象常用方法：</h4><table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>String getId()</td>
<td>获取sessionid</td>
</tr>
<tr>
<td>void setMaxInactiveInterval(int interval)</td>
<td>设定session的非活动时间</td>
</tr>
<tr>
<td>int getMaxInactiveInterval()</td>
<td>获取session的有效非活动时间(以秒为单位)</td>
</tr>
<tr>
<td>void invalidate()</td>
<td>设置session对象失效</td>
</tr>
<tr>
<td>void setAttribute(String key, Object value)</td>
<td>以key/value的形式保存对象值</td>
</tr>
<tr>
<td>Object getAttribute(String key)</td>
<td>通过key获取对象值</td>
</tr>
<tr>
<td>void removeAttribute(String key)</td>
<td>从session中删除指定名称(key)所对应的对象</td>
</tr>
</tbody></table>
<h4 id="session与窗口的关系"><a href="#session与窗口的关系" class="headerlink" title="session与窗口的关系"></a>session与窗口的关系</h4><ul>
<li>每个session对象都与一个浏览器窗口对应 ，重新开启一个浏览器窗口，可以重新创建一个session对象（不同版本浏览器可能有所差别）</li>
<li>通过超链接打开的新窗口，新窗口的session与其父窗口的session相同</li>
</ul>
<h3 id="使用session实现访问控制"><a href="#使用session实现访问控制" class="headerlink" title="使用session实现访问控制"></a>使用session实现访问控制</h3><ul>
<li><p>在新闻发布系统中，增加访问控制功能</p>
<ul>
<li>提供用户登录功能</li>
<li>管理员有权对新闻实现增、删、改的操作</li>
</ul>
<ol>
<li>session中无法提取到用户信息</li>
<li>登录处理页面<br>1、获得登录信息<br>2、查询数据库，判断该用户是否注册<br>3、如果该用户已注册，在session中保存该用户的登录信息<br>4、如果用户是管理员就跳转到管理员界面；否则跳转到新闻发布系统的首页面</li>
<li>管理员界面<br>1、从session中提取该用户信息<br>2、如果用户信息存在，显示管理员界面内容<br>3、如果用户信息不存在，跳转到登录页面</li>
</ol>
</li>
<li><h4 id="在控制页面获取用户请求的登录信息进行验证"><a href="#在控制页面获取用户请求的登录信息进行验证" class="headerlink" title="在控制页面获取用户请求的登录信息进行验证"></a><strong>在控制页面获取用户请求的登录信息进行验证</strong></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(name) &amp;&amp; <span class="string">&quot;admin&quot;</span>.equals(pwd)) &#123;  <span class="comment">// 如果是已注册用户</span></span><br><span class="line">session.setAttribute(<span class="string">&quot;login&quot;</span>, name);<span class="comment">//在session中存放用户登录信息</span></span><br><span class="line"> <span class="comment">// 设置session过期时间</span></span><br><span class="line">session.setMaxInactiveInterval(<span class="number">10</span>*<span class="number">60</span>);</span><br><span class="line">request.getRequestDispatcher(<span class="string">&quot;admin.jsp&quot;</span>).forward(request, response);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">response.sendRedirect(<span class="string">&quot;index.jsp&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></li>
<li><h4 id="在新闻发布系统新闻发布页面增加登录验证"><a href="#在新闻发布系统新闻发布页面增加登录验证" class="headerlink" title="在新闻发布系统新闻发布页面增加登录验证"></a><strong>在新闻发布系统新闻发布页面增加登录验证</strong></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"><span class="built_in">String</span> login = (<span class="built_in">String</span>) session.getAttribute(<span class="string">&quot;login&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (login == <span class="literal">null</span>) &#123;<span class="comment">//如果session中不存在用户的登录信息，转入登录页面</span></span><br><span class="line">	response.sendRedirect(<span class="string">&quot;index.jsp&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125; %&gt;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="session对象的失效"><a href="#session对象的失效" class="headerlink" title="session对象的失效"></a>session对象的失效</h2><ul>
<li><p>手动设置失效：invalidate()</p>
</li>
<li><p>超时失效</p>
<ul>
<li><p>通过setMaxInactiveInterval( )方法，单位是秒</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">session.setAttribute(<span class="string">&quot;login&quot;</span>,<span class="string">&quot;admin&quot;</span>); </span><br><span class="line">session.setMaxInactiveInterval(<span class="number">600</span>); </span><br><span class="line">response.sendRedirect(<span class="string">&quot;admin.jsp&quot;</span>); </span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>通过设置项目的web.xml或Tomcat目录下的/conf/web.xml文件，单位是分钟</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;session-config&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>10<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span></span><br><span class="line">&lt;/session-config&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="include指令"><a href="#include指令" class="headerlink" title="include指令"></a>include指令</h1><p>除了首页面，其它页面中同样需要加入登录验证，有没有办法避免冗余代码的出现？</p>
<p><strong>可以将一些共性的内容写入一个单独的文件中，然后通过include指令引用该文件</strong></p>
<ul>
<li><p>创建登录验证文件 loginControl.jsp</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"><span class="built_in">String</span> login = (<span class="built_in">String</span>) session.getAttribute(<span class="string">&quot;login&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (login == <span class="literal">null</span>) &#123;</span><br><span class="line">　　response.sendRedirect(<span class="string">&quot;index.jsp&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125; %&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>在后台首页面中使用include指令引用登录验证文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;%@  include file=<span class="string">&quot;loginControl.jsp&quot;</span> %&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="/2021/08/09/JSP%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92-%E4%B8%80/image-20210811154315974.png" alt="image-20210811154315974"></p>
<h1 id="老郑的课堂笔记"><a href="#老郑的课堂笔记" class="headerlink" title="老郑的课堂笔记"></a>老郑的课堂笔记</h1><p><strong>登录页-&gt;业务处理页面(不需要展示任何内容)-&gt;(登录成功)首页</strong><br>                                                             <strong>-&gt;(登录失败)登录页</strong></p>
<h3 id="页面间跳转"><a href="#页面间跳转" class="headerlink" title="页面间跳转"></a><strong>页面间跳转</strong></h3><h4 id="转发-1"><a href="#转发-1" class="headerlink" title="转发"></a><strong>转发</strong></h4><p>​        <strong>request.getRequestDispatcher(“新地址”).forward(request, response);</strong><br>​        <strong>网页url地址显示的是原地址</strong><br>​        <strong>保留了原请求里的数据</strong><br>​        <strong>在服务器端把老请求转给了新地址</strong><br>​        <strong>发生在服务器端</strong></p>
<h4 id="重定向-1"><a href="#重定向-1" class="headerlink" title="重定向"></a><strong>重定向</strong></h4><p>​        <strong>response.sendRedirect(“新地址”);</strong><br>​        <strong>网页url地址显示的是最终的地址</strong><br>​        <strong>让客户端再次发送一个新请求去新地址</strong><br>​        <strong>发生在客户端</strong></p>
<h2 id="session会话"><a href="#session会话" class="headerlink" title="session会话"></a><strong>session会话</strong></h2><p>​    <strong>浏览器第一次访问服务器，服务器生成一个sessionid，自己存，然后给浏览器带回去</strong><br>​    <strong>浏览器第N次访问，会带着sessionid去服务器</strong><br>​    <strong>假如关闭浏览器，或者会话过期，浏览器带去的sessionid和服务器存的不一致，那就不是同一个会话</strong></p>
<p><strong>&lt;%@include file=”文件地址” %&gt;</strong><br>    <strong>不但可以使用jsp文件，还可以使用html、txt等</strong></p>
<p><strong>使用表单提交数据，几乎都是post</strong><br><strong>使用a标签提交数据，一定是get</strong><br>    <strong>地址?名1=值1&amp;名2=值2</strong></p>
]]></content>
      <categories>
        <category>使用JSP／Servlet技术开发新闻发布系统</category>
      </categories>
  </entry>
  <entry>
    <title>JSP数据交互（二）</title>
    <url>/2021/08/23/JSP%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="本章目标"><a href="#本章目标" class="headerlink" title="本章目标:"></a>本章目标:</h1><ol>
<li>掌握application的原理及应用</li>
<li>熟练应用JSP对象的作用域</li>
<li>掌握cookie的原理及应用               </li>
<li>熟练应用JDBC访问数据库</li>
<li>掌握在Java Web开发中使用JavaBean</li>
</ol>
<span id="more"></span>

<h1 id="JSP内置对象application"><a href="#JSP内置对象application" class="headerlink" title="JSP内置对象application"></a>JSP内置对象application</h1><ol>
<li><h4 id="统计网站访问次数"><a href="#统计网站访问次数" class="headerlink" title="统计网站访问次数"></a>统计网站访问次数</h4><p><img src="/2021/08/23/JSP%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92%EF%BC%88%E4%BA%8C%EF%BC%89/image-20210823095857678.png" alt="image-20210823095857678"></p>
</li>
<li><h4 id="application实现用户之间的数据共享"><a href="#application实现用户之间的数据共享" class="headerlink" title="application实现用户之间的数据共享"></a>application实现用户之间的数据共享</h4><p>application对象的常用方法</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void  setAttribute(String key,       Object value)</td>
<td>以key/value的形式保存对象值</td>
</tr>
<tr>
<td>Object  getAttribute(String key)</td>
<td>通过key获取对象值</td>
</tr>
<tr>
<td>String  getRealPath(String path)</td>
<td>返回相对路径的真实路径</td>
</tr>
</tbody></table>
</li>
<li><h4 id="统计网站访问次数的实现"><a href="#统计网站访问次数的实现" class="headerlink" title="统计网站访问次数的实现"></a>统计网站访问次数的实现</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"> &lt;%<span class="comment">//统计页</span></span><br><span class="line">	Integer count = (Integer) application.getAttribute(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (count != <span class="keyword">null</span>) &#123;</span><br><span class="line">		count = <span class="number">1</span> + count;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		count = <span class="number">1</span>;	 	</span><br><span class="line">	&#125;</span><br><span class="line">	application.setAttribute(<span class="string">&quot;count&quot;</span>, count);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%<span class="comment">//显示页</span></span><br><span class="line">	Integer i = (Integer) application.getAttribute(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">	out.println(<span class="string">&quot;您好，您是第 &quot;</span> + i + <span class="string">&quot; 位访问本网站的用户&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></li>
<li><h4 id="JSP常用内置对象"><a href="#JSP常用内置对象" class="headerlink" title="JSP常用内置对象"></a>JSP常用内置对象</h4><table>
<thead>
<tr>
<th>内置对象名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>out</td>
<td>用于向客户端输出数据</td>
</tr>
<tr>
<td>request</td>
<td>主要用于处理客户端请求的数据信息</td>
</tr>
<tr>
<td>response</td>
<td>用于响应客户端请求并向客户端输出信息</td>
</tr>
<tr>
<td>session</td>
<td>用于记录会话状态的相关信息</td>
</tr>
<tr>
<td>application</td>
<td>类似于系统的全局变量，用于实现Web应用中的资源共享</td>
</tr>
</tbody></table>
</li>
</ol>
<h1 id="对象的作用域"><a href="#对象的作用域" class="headerlink" title="对象的作用域"></a>对象的作用域</h1><ol>
<li><h4 id="作用域的分类"><a href="#作用域的分类" class="headerlink" title="作用域的分类"></a>作用域的分类</h4><p><img src="/2021/08/23/JSP%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92%EF%BC%88%E4%BA%8C%EF%BC%89/image-20210823100156510.png" alt="image-20210823100156510"></p>
<p><img src="/2021/08/23/JSP%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92%EF%BC%88%E4%BA%8C%EF%BC%89/image-20210823100232847.png" alt="image-20210823100232847"></p>
</li>
<li><h4 id="page作用域"><a href="#page作用域" class="headerlink" title="page作用域"></a>page作用域</h4><ol>
<li><p>page作用域指本JSP页面的范围</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">pageContext.setAttribute(键,值)</span><br><span class="line">&lt;%<span class="comment">//testOne.jsp</span></span><br><span class="line">    String name = <span class="string">&quot;page&quot;</span>;</span><br><span class="line">    pageContext.setAttribute(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;strong&gt; </span><br><span class="line">    testOne:&lt;%=pageContext.getAttribute(<span class="string">&quot;name&quot;</span>) %&gt;</span><br><span class="line">&lt;/strong&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    pageContext.include(<span class="string">&quot;testTwo.jsp&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;strong&gt; <span class="comment">//testTwo.jsp</span></span><br><span class="line">    testTwo:&lt;%=pageContext.getAttribute(<span class="string">&quot;name&quot;</span>) %&gt;</span><br><span class="line">&lt;/strong&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/2021/08/23/JSP%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92%EF%BC%88%E4%BA%8C%EF%BC%89/image-20210823100449705.png" alt="image-20210823100449705"></p>
</li>
</ol>
</li>
<li><h4 id="request作用域"><a href="#request作用域" class="headerlink" title="request作用域"></a>request作用域</h4><ol>
<li>request作用域内的对象则是与客户端的请求绑定在一起</li>
</ol>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="comment">//testOne.jsp</span></span><br><span class="line">	String name = <span class="string">&quot;request&quot;</span>;</span><br><span class="line">	request.setAttribute(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">	request.getRequestDispatcher(<span class="string">&quot;testTwo.jsp&quot;</span>).</span><br><span class="line">		forward(request, response);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;!--testTwo.jsp--&gt;</span><br><span class="line">&lt;strong&gt; </span><br><span class="line">	testTwo:&lt;%=request.getAttribute(<span class="string">&quot;name&quot;</span>) %&gt;</span><br><span class="line">&lt;/strong&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2021/08/23/JSP%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92%EF%BC%88%E4%BA%8C%EF%BC%89/image-20210823100434498.png" alt="image-20210823100434498"></p>
</li>
<li><h4 id="session作用域"><a href="#session作用域" class="headerlink" title="session作用域"></a>session作用域</h4><ol>
<li><p>session作用域：一次会话</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="comment">//testOne.jsp</span></span><br><span class="line">    String req = <span class="string">&quot;request&quot;</span>;</span><br><span class="line">    String ses = <span class="string">&quot;session&quot;</span>;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;reqName &quot;</span>,req);</span><br><span class="line">    session.setAttribute(<span class="string">&quot;sessionName &quot;</span>,ses);</span><br><span class="line">    response.sendRedirect(<span class="string">&quot;testTwo.jsp&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"><span class="comment">//testTwo.jsp</span></span><br><span class="line">&lt;strong&gt;</span><br><span class="line">    request:&lt;%= request.getAttribute(<span class="string">&quot;reqName&quot;</span>) %&gt;&lt;br/&gt;</span><br><span class="line">    session:&lt;%=session.getAttribute(<span class="string">&quot;sessionName&quot;</span>) %&gt;</span><br><span class="line">&lt;/strong&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/08/23/JSP%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92%EF%BC%88%E4%BA%8C%EF%BC%89/image-20210823100726693.png" alt="image-20210823100726693"></p>
</li>
</ol>
</li>
<li><h4 id="application作用域"><a href="#application作用域" class="headerlink" title="application作用域"></a>application作用域</h4><ol>
<li><p>application作用域：面对整个Web应用程序</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="comment">//testOne.jsp</span></span><br><span class="line">    String app = <span class="string">&quot;application&quot;</span>;</span><br><span class="line">    String ses = <span class="string">&quot;session&quot;</span>;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;sesName&quot;</span>,ses);</span><br><span class="line">    application.setAttribute(<span class="string">&quot;appName&quot;</span>,app);</span><br><span class="line">    response.sendRedirect(<span class="string">&quot;testTwo.jsp&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;<span class="comment">//testTwo.jsp</span></span><br><span class="line">    session:&lt;%=session.getAttribute(<span class="string">&quot;sesName&quot;</span>) %&gt;&lt;br/&gt;</span><br><span class="line">    application:&lt;%=application.getAttribute(<span class="string">&quot;appName&quot;</span>) %&gt;</span><br><span class="line">&lt;/strong&gt; </span><br></pre></td></tr></table></figure>

<p><img src="/2021/08/23/JSP%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92%EF%BC%88%E4%BA%8C%EF%BC%89/image-20210823100943520.png" alt="image-20210823100943520"></p>
</li>
</ol>
</li>
<li><h4 id="对象的作用域-1"><a href="#对象的作用域-1" class="headerlink" title="对象的作用域"></a>对象的作用域</h4><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>page作用域</td>
<td>在一个页面范围内有效，通过pageContext对象访问</td>
</tr>
<tr>
<td>request作用域</td>
<td>在一个服务器请求范围内有效</td>
</tr>
<tr>
<td>session作用域</td>
<td>在一次会话范围内容有效</td>
</tr>
<tr>
<td>application作用域</td>
<td>在一个应用服务器范围内有效</td>
</tr>
</tbody></table>
</li>
</ol>
<h1 id="cookie的简介"><a href="#cookie的简介" class="headerlink" title="cookie的简介"></a>cookie的简介</h1><ol>
<li><p> cookie是Web服务器保存在客户端的一系列文本信息</p>
</li>
<li><p>cookie的作用</p>
<ol>
<li>对特定对象的追踪</li>
<li>实现各种个性化服务</li>
<li>简化登录</li>
</ol>
</li>
<li><p>安全性能</p>
<ol>
<li>容易泄露信息</li>
</ol>
</li>
<li><h3 id="在JSP中使用cookie"><a href="#在JSP中使用cookie" class="headerlink" title="在JSP中使用cookie"></a>在JSP中使用cookie</h3><ol>
<li><h4 id="创建cookie对象"><a href="#创建cookie对象" class="headerlink" title="创建cookie对象"></a>创建cookie对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie newCookie = <span class="keyword">new</span> Cookie(String key, String value);</span><br></pre></td></tr></table></figure></li>
<li><h4 id="写入cookie"><a href="#写入cookie" class="headerlink" title="写入cookie"></a>写入cookie</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.addCookie(newCookie);</span><br></pre></td></tr></table></figure></li>
<li><h4 id="读取cookie"><a href="#读取cookie" class="headerlink" title="读取cookie"></a>读取cookie</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[] cookies = request.getCookies();</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h4 id="cookie对象的常用方法"><a href="#cookie对象的常用方法" class="headerlink" title="cookie对象的常用方法"></a>cookie对象的常用方法</h4><table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void  setMaxAge(int expiry)</td>
<td>设置cookie的有效期，以秒为单位</td>
</tr>
<tr>
<td>void  setValue(String value)</td>
<td>在cookie创建后，对cookie进行赋值</td>
</tr>
<tr>
<td>String  getName()</td>
<td>获取cookie的名称</td>
</tr>
<tr>
<td>String  getValue()</td>
<td>获取cookie的值</td>
</tr>
</tbody></table>
</li>
<li><h4 id="cookie与session的对比"><a href="#cookie与session的对比" class="headerlink" title="cookie与session的对比"></a>cookie与session的对比</h4><p><img src="/2021/08/23/JSP%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92%EF%BC%88%E4%BA%8C%EF%BC%89/image-20210823101347272.png" alt="image-20210823101347272"></p>
</li>
</ol>
<h1 id="使用JDBC访问数据库的步骤"><a href="#使用JDBC访问数据库的步骤" class="headerlink" title="使用JDBC访问数据库的步骤"></a>使用JDBC访问数据库的步骤</h1><p><img src="/2021/08/23/JSP%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92%EF%BC%88%E4%BA%8C%EF%BC%89/image-20210823101449702.png" alt="image-20210823101449702"></p>
<h1 id="为什么需要JavaBean"><a href="#为什么需要JavaBean" class="headerlink" title="为什么需要JavaBean"></a>为什么需要JavaBean</h1><ol>
<li><h4 id="JavaBean的优势"><a href="#JavaBean的优势" class="headerlink" title="JavaBean的优势"></a>JavaBean的优势</h4><ol>
<li>解决代码重复编写，减少代码冗余</li>
<li>功能区分明确</li>
<li>提高了代码的维护性</li>
</ol>
</li>
<li><h4 id="JavaBean及其分类"><a href="#JavaBean及其分类" class="headerlink" title="JavaBean及其分类"></a>JavaBean及其分类</h4><ol>
<li><p>从JavaBean的功能上可以分为</p>
<ol>
<li>封装数据</li>
<li>封装业务</li>
</ol>
<p><img src="/2021/08/23/JSP%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92%EF%BC%88%E4%BA%8C%EF%BC%89/image-20210823101549080.png" alt="image-20210823101549080"></p>
</li>
</ol>
</li>
<li><h3 id="封装数据的JavaBean"><a href="#封装数据的JavaBean" class="headerlink" title="封装数据的JavaBean"></a>封装数据的JavaBean</h3><ol>
<li><p>封装数据的JavaBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123;       </span><br><span class="line">       <span class="keyword">private</span> String cid;	   	<span class="comment">// 用户名</span></span><br><span class="line">       <span class="keyword">private</span> String cnid;  		<span class="comment">// 邮编			///将属性声明为私有属性</span></span><br><span class="line">       <span class="keyword">private</span> String ccontent;	<span class="comment">// 电话</span></span><br><span class="line">       …</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Comment</span> <span class="params">()</span> </span>&#123;    &#125;						<span class="comment">///无参的公有构造方法</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCid</span><span class="params">(String cid)</span> </span>&#123;</span><br><span class="line">                 <span class="keyword">this</span>. cid= cid;					<span class="comment">///公有的设置属性值方法setXxx(  )</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">getCid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cid;							<span class="comment">///公有的获取属性值方法getXxx( )</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;								<span class="comment">///使用工具自动生成getter/setter方法: Alt+Shift+S -&gt; Generate Getters and Setters</span></span><br></pre></td></tr></table></figure></li>
<li><h4 id="JavaBean的应用"><a href="#JavaBean的应用" class="headerlink" title="JavaBean的应用"></a>JavaBean的应用</h4><ol>
<li><p>在JSP页面中导入JavaBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入JavaBean</span></span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.news.bean.*&quot;</span> %&gt;</span><br><span class="line"><span class="comment">//使用JavaBean</span></span><br><span class="line">&lt;%</span><br><span class="line">    Comment c = <span class="keyword">new</span> Comment();</span><br><span class="line">    c.setCid(<span class="number">1014</span>);</span><br><span class="line">    c.getCauthor();</span><br><span class="line">%&gt;												<span class="comment">///代码提示:Alt+/</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="/2021/08/23/JSP%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92%EF%BC%88%E4%BA%8C%EF%BC%89/image-20210823101847508.png" alt="image-20210823101847508"></p>
]]></content>
      <categories>
        <category>使用JSP／Servlet技术开发新闻发布系统</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript基础</title>
    <url>/2021/07/07/JavaScript%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="为什么要学JavaScript"><a href="#为什么要学JavaScript" class="headerlink" title="为什么要学JavaScript?"></a>为什么要学JavaScript?</h1><ol>
<li>表单验证－减轻服务器端压力</li>
<li>页面动态效果</li>
</ol>
<span id="more"></span>

<h1 id="什么是JavaScript"><a href="#什么是JavaScript" class="headerlink" title="什么是JavaScript"></a>什么是JavaScript</h1><ol>
<li><strong>JavaScript</strong>是一种基于对象和事件驱动的、并具有安全性能的<strong>脚本语言</strong></li>
</ol>
<h1 id="JavaScript特点"><a href="#JavaScript特点" class="headerlink" title="JavaScript特点"></a>JavaScript特点</h1><ol>
<li>向HTML页面中添加交互行为</li>
<li>脚本语言，语法和Java类似</li>
<li>解释性语言，边执行边解释</li>
</ol>
<h1 id="JavaScript组成"><a href="#JavaScript组成" class="headerlink" title="JavaScript组成"></a>JavaScript组成</h1><p><img src="/2021/07/07/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%801.png" alt="JavaScript组成"></p>
<h1 id="JavaScript的基本结构"><a href="#JavaScript的基本结构" class="headerlink" title="JavaScript的基本结构"></a>JavaScript的基本结构</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    &lt;!—</span><br><span class="line">          JavaScript 语句;</span><br><span class="line">    —&gt;</span><br><span class="line">&lt;/script &gt;</span><br></pre></td></tr></table></figure>

<script>…</script>可以包含在文档中的任何地方，只要保证这些代码在被使用前已读取并加载到内存即可

<h1 id="网页中引用JavaScript的方式"><a href="#网页中引用JavaScript的方式" class="headerlink" title="网页中引用JavaScript的方式"></a>网页中引用JavaScript的方式</h1><ol>
<li><p>行内：使用  script&gt;标签</p>
</li>
<li><p>外部：外部JS文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;export.js&quot;</span>  type=<span class="string">&quot;text/javascript&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="comment">//记住这是导入js和直接写不一样</span></span><br></pre></td></tr></table></figure></li>
<li><p>内部: 直接在HTML标签中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input name=<span class="string">&quot;btn&quot;</span> type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;弹出消息框&quot;</span>   </span><br><span class="line">   onclick=<span class="string">&quot;javascript:alert(&#x27;欢迎你&#x27;);&quot;</span>/&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="JavaScript核心语法"><a href="#JavaScript核心语法" class="headerlink" title="JavaScript核心语法"></a>JavaScript核心语法</h1><p><img src="/2021/07/07/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E7%A1%802.png" alt="JavaScript核心语法"></p>
<h2 id="核心语法—变量"><a href="#核心语法—变量" class="headerlink" title="核心语法—变量"></a>核心语法—变量</h2><ol>
<li><h3 id="先声明变量再赋值"><a href="#先声明变量再赋值" class="headerlink" title="先声明变量再赋值"></a>先声明变量再赋值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>   width;	<span class="comment">//var －  用于声明变量的关键字</span></span><br><span class="line">width = <span class="number">5</span>;		<span class="comment">//width － 变量名</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="同时声明和赋值变量"><a href="#同时声明和赋值变量" class="headerlink" title="同时声明和赋值变量"></a>同时声明和赋值变量</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> catName= <span class="string">&quot;皮皮&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> x, y, z = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li>
<li><h3 id="不声明直接赋值"><a href="#不声明直接赋值" class="headerlink" title="不声明直接赋值"></a>不声明直接赋值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">width=<span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<p><strong>变量可以不经声明而直接使用，但这种方法很容易出错，也很难查找排错，不推荐使用</strong></p>
</li>
<li><h3 id="核心语法—数据类型"><a href="#核心语法—数据类型" class="headerlink" title="核心语法—数据类型"></a>核心语法—数据类型</h3><ol>
<li><strong>undefined</strong><ul>
<li><strong>var width;</strong>  变量width没有初始值，将被赋予值<strong>undefined</strong></li>
</ul>
</li>
<li><strong>null</strong><ul>
<li>表示一个空值，与<strong>undefined</strong>值相等</li>
</ul>
</li>
<li><strong>number</strong><ul>
<li><strong>var</strong> <strong>iNum</strong>**=23;  //整数</li>
<li>var** <strong>iNum</strong><strong>=23.0;  //浮点数</strong></li>
</ul>
</li>
<li><strong>boolean</strong><ul>
<li><strong>true</strong>和<strong>false</strong></li>
</ul>
</li>
<li><strong>string</strong><ul>
<li><strong>一组被引号（单引号或双引号）括起来的文本</strong></li>
<li><em>var</em>* <strong>string1=”This is a string”;</strong></li>
</ul>
</li>
</ol>
</li>
<li><h3 id="核心语法—-typeof运算符"><a href="#核心语法—-typeof运算符" class="headerlink" title="核心语法— typeof运算符"></a>核心语法— typeof运算符</h3><ul>
<li><strong>typeof</strong>检测变量的返回值</li>
<li><strong>typeof</strong>：运算符返回值如下<ul>
<li><strong>undefined</strong>：变量被声明后，但未被赋值</li>
<li><strong>string</strong>：用单引号或双引号来声明的字符串</li>
<li><strong>boolean</strong>：<strong>true</strong>或<strong>false</strong></li>
<li><strong>number</strong>：整数或浮点数**</li>
<li><strong>object****：</strong>javascript**中的对象、数组和null</li>
</ul>
</li>
</ul>
</li>
<li><h3 id="核心语法—String对象"><a href="#核心语法—String对象" class="headerlink" title="核心语法—String对象"></a>核心语法—String对象</h3><ul>
<li>属性</li>
</ul>
<ol>
<li>字符串对象**.length**</li>
<li><strong>方法</strong></li>
<li>字符串对象.方法名();</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;this is JavaScript&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> strLength=str.length;    <span class="comment">//长度是18</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>charAt(index)</td>
<td>返回在指定位置的字符</td>
</tr>
<tr>
<td>indexOf(str，index)</td>
<td>查找某个指定的字符串在字符串中首次出现的位置</td>
</tr>
<tr>
<td>substring(index1，index2)</td>
<td>返回位于指定索引index1和index2之间的字符串，并且包括索引index1对应的字符，不包括索引index2对应的字符</td>
</tr>
<tr>
<td>split(str)</td>
<td>将字符串分割为字符串数组</td>
</tr>
</tbody></table>
</li>
<li><h3 id="核心语法—数组"><a href="#核心语法—数组" class="headerlink" title="核心语法—数组"></a>核心语法—数组</h3><ol>
<li><p>创建数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  数组名称 = <span class="keyword">new</span> <span class="built_in">Array</span>(size);</span><br><span class="line"><span class="comment">//new 表示数组的关键字</span></span><br><span class="line"><span class="comment">//size表示数组中可存放的元素总数</span></span><br></pre></td></tr></table></figure></li>
<li><p>为数组元素赋值</p>
</li>
<li><p>访问数组</p>
</li>
<li><p>数组的常用属性和方法</p>
<table>
<thead>
<tr>
<th>类别</th>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>属性</td>
<td><strong>length</strong></td>
<td>设置或返回数组中元素的数目</td>
</tr>
<tr>
<td>方法</td>
<td><strong>join( )</strong></td>
<td>把数组的所有元素放入一个字符串，通过一个的分隔符进行分隔</td>
</tr>
<tr>
<td>方法</td>
<td><strong>sort()</strong></td>
<td>对数组排序</td>
</tr>
<tr>
<td>方法</td>
<td><strong>push()</strong></td>
<td>向数组末尾添加一个或更多 元素，并返回新的长度</td>
</tr>
</tbody></table>
</li>
</ol>
</li>
<li><h3 id="核心语法—运算符号-和Java类似"><a href="#核心语法—运算符号-和Java类似" class="headerlink" title="核心语法—运算符号-和Java类似"></a>核心语法—运算符号-和Java类似</h3><table>
<thead>
<tr>
<th>类型</th>
<th>运算符</th>
</tr>
</thead>
<tbody><tr>
<td><strong>算术运算符</strong></td>
<td><strong>+</strong>  <strong>-</strong>  *****  <strong>/</strong>  <strong>%</strong>  <strong>++</strong>  <strong>—</strong></td>
</tr>
<tr>
<td><strong>赋值运算符</strong></td>
<td><strong>=</strong>  <strong>+=</strong>  <strong>-=</strong></td>
</tr>
<tr>
<td><strong>比较运算符</strong></td>
<td><strong>&gt;</strong>  <strong>&lt;**   **&gt;=</strong>   <strong>&lt;=</strong>   <strong>==</strong>  <strong>!=  ===</strong>  <strong>!==</strong></td>
</tr>
<tr>
<td><strong>逻辑运算符</strong></td>
<td><strong>&amp;&amp;</strong>    <strong>||</strong>   <strong>!</strong></td>
</tr>
</tbody></table>
</li>
<li><h3 id="核心语法—逻辑控制语句"><a href="#核心语法—逻辑控制语句" class="headerlink" title="核心语法—逻辑控制语句"></a>核心语法—逻辑控制语句</h3><ol>
<li><p><strong>if</strong>条件语句-和Java一样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//JavaScript代码;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//JavaScript代码;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>switch</strong>多分支语句-和Java一样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式)</span><br><span class="line">&#123;    <span class="keyword">case</span> 常量<span class="number">1</span> : </span><br><span class="line">              JavaScript语句<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> 常量<span class="number">2</span> : </span><br><span class="line"> 	JavaScript语句<span class="number">2</span>;</span><br><span class="line"> 	<span class="keyword">break</span>;</span><br><span class="line">         ...</span><br><span class="line">        <span class="attr">default</span> : </span><br><span class="line">             JavaScript语句<span class="number">3</span>;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p><strong>for、while</strong>循环语句-和Java一样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化;  条件;  增量)</span><br><span class="line"> &#123;</span><br><span class="line">      JavaScript代码; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(条件)</span><br><span class="line"> &#123;</span><br><span class="line">      JavaScript代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>for-in</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fruit=[ <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;peach&quot;</span>,<span class="string">&quot;banana&quot;</span>]; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> fruit)&#123;<span class="comment">//循环的是下标 i是下标</span></span><br><span class="line">       <span class="built_in">document</span>.write(fruit[i]+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h3 id="核心语法—循环中断-和Java一样"><a href="#核心语法—循环中断-和Java一样" class="headerlink" title="核心语法—循环中断-和Java一样"></a>核心语法—循环中断-和Java一样</h3><ol>
<li><p><strong>break</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">	<span class="keyword">if</span>(i==<span class="number">3</span>)&#123;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;这个数字是：&quot;</span>+i+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>continue</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">	<span class="keyword">if</span>(i==<span class="number">3</span>)&#123;</span><br><span class="line">                   <span class="keyword">continue</span>;</span><br><span class="line">       &#125;</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">&quot;这个数字是：&quot;</span>+i+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h3 id="核心语法—注释-和Java一样"><a href="#核心语法—注释-和Java一样" class="headerlink" title="核心语法—注释-和Java一样"></a>核心语法—注释-和Java一样</h3><ol>
<li><p>单行注释以 // 开始，以行末结束</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(<span class="string">&quot;恭喜你！注册会员成功&quot;</span>); <span class="comment">//在页同上弹出注册会员成功的提示框</span></span><br></pre></td></tr></table></figure></li>
<li><p>多行注释以 /* 开始，以 */ 结束，符号 /*…… */ 指示中间的语句是该程序中的注释</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用for循环运行“document.write(&quot;&lt;h3&gt;Hello World&lt;/h3&gt;&quot;);”5次</span></span><br><span class="line"><span class="comment">使用document.write在页面上输出“Hello World” </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h3 id="核心语法—常用的输入-输出"><a href="#核心语法—常用的输入-输出" class="headerlink" title="核心语法—常用的输入/输出"></a>核心语法—常用的输入/输出</h3><ol>
<li><p><strong>alert()</strong></p>
<ul>
<li>alert()方法是显示一条弹出提示消息和确认按钮的警告框。</li>
<li>需要注意的是 ：alert()是一个阻塞的函数，如果我们不点确认按钮，后面的内容就不会加载出来。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(<span class="string">&quot;想要提示的文本内容&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p><strong>confirm()</strong></p>
<ul>
<li><strong>confirm()方法是显示一个含有指定消息和确认和取消按钮的确认框。</strong></li>
<li><strong>如果点击”确定”返回true，否则返回false。</strong></li>
</ul>
<p>不接收返回值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">confirm(<span class="string">&quot;这样写可以直接显示,不接收返回值。&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>接收返回值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x; </span><br><span class="line"><span class="keyword">var</span> r=confirm(<span class="string">&quot;请按下按钮!&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (r==<span class="literal">true</span>)&#123;</span><br><span class="line">	x=<span class="string">&quot;你按下的是\&quot;确定\&quot;按钮。&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	x=<span class="string">&quot;你按下的是\&quot;取消\&quot;按钮。&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.write(x)</span><br></pre></td></tr></table></figure></li>
<li><p><strong>prompt ()</strong></p>
<ul>
<li><strong>prompt()方法是显示提示用户进行输入的对话框。</strong></li>
<li><strong>这个方法返回的是用户输入的字符串。</strong></li>
</ul>
<p>不显示默认文本：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">prompt(<span class="string">&quot;开心吗?&quot;</span>); <span class="comment">// 这个显示内容也可以不写，但就没有交互的意义了。</span></span><br></pre></td></tr></table></figure>

<p>显示默认文本：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x; </span><br><span class="line"><span class="keyword">var</span> name=prompt(<span class="string">&quot;请输入你的名字&quot;</span>,<span class="string">&quot;Keafmd&quot;</span>); </span><br><span class="line"><span class="keyword">if</span> (name!=<span class="literal">null</span> &amp;&amp; person!=<span class="string">&quot;&quot;</span>)&#123; </span><br><span class="line"> x=<span class="string">&quot;你好! &quot;</span> + name + <span class="string">&quot;。&quot;</span>;</span><br><span class="line"> <span class="built_in">document</span>.write(x)</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h3 id="核心语法—语法约定-和Java一样"><a href="#核心语法—语法约定-和Java一样" class="headerlink" title="核心语法—语法约定-和Java一样"></a>核心语法—语法约定-和Java一样</h3><ol>
<li><strong>代码区分大小写</strong></li>
<li><strong>变量、对象和函数的名称</strong></li>
<li><strong>分号</strong></li>
</ol>
</li>
</ol>
<h1 id="常用系统函数"><a href="#常用系统函数" class="headerlink" title="常用系统函数"></a><strong>常用系统函数</strong></h1><ol>
<li><h3 id="parseInt-“字符串”"><a href="#parseInt-“字符串”" class="headerlink" title="parseInt (“字符串”)"></a>parseInt (“字符串”)</h3><ul>
<li><p>将字符串转换为整型数字 </p>
<p>如: parseInt (“86”)将字符串“86“转换为整型值86</p>
</li>
<li><p>parseInt()函数首先查看位置0处的字符,判断它是否为一个有效数字,如果不是则返回NaN,不在继续执行其他操作.但如果该字符是有效数字,则该函数讲查看位置1处的字符,进行同样的测试,这一过程将持续到发现非有效数字的字符为止,此时parseInt()将该字符之前的字符串转换成数字例如:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1=<span class="built_in">parseInt</span>(<span class="string">&quot;78.89&quot;</span>);			<span class="comment">//返回值为78</span></span><br><span class="line"><span class="keyword">var</span> num2=<span class="built_in">parseInt</span>(<span class="string">&quot;4567color&quot;</span>);		<span class="comment">//返回值为4567</span></span><br><span class="line"><span class="keyword">var</span> num3=<span class="built_in">parseInt</span>(<span class="string">&quot;this36&quot;</span>);		<span class="comment">//返回值为NaN</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h3 id="parseFloat-“字符串”"><a href="#parseFloat-“字符串”" class="headerlink" title="parseFloat(“字符串”)"></a>parseFloat(“字符串”)</h3><ul>
<li><p>将字符串转换为浮点型数字<br>如: parseFloat(“34.45”)将字符串“34.45“转换为浮点值34.45]</p>
</li>
<li><p>parseFloat()函数和parseInt ()函数的处理方式相似,从位置为0开始查看每个字符,直到找到第一个非有效数字为止,然后把该字符之前的字符串转换成浮点数.</p>
</li>
<li><p>对于这个函数来说,第一个出现的小数点是有效字符,如果有两个小数点,那么第二个小数点被看做无效.例如:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1=<span class="built_in">parseFloat</span>(<span class="string">&quot;4567color&quot;</span>);		<span class="comment">//返回值为4567</span></span><br><span class="line"><span class="keyword">var</span> num2=<span class="built_in">parseFloat</span>(<span class="string">&quot;45.58&quot;</span>);			<span class="comment">//返回值为45.58</span></span><br><span class="line"><span class="keyword">var</span> num3=<span class="built_in">parseFloat</span>(<span class="string">&quot;45.58.25&quot;</span>);		<span class="comment">//返回值为45.58</span></span><br><span class="line"><span class="keyword">var</span> num4=<span class="built_in">parseFloat</span>(<span class="string">&quot;color4567&quot;</span>);		<span class="comment">//返回值为NaN</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h3 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN()"></a>isNaN()</h3><p>用于检查其参数是否是非数字 如果是非数字值,返回true 如果是非数值,返回flase 例如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> flag1=<span class="built_in">isNaN</span>(<span class="string">&quot;12.5&quot;</span>);		<span class="comment">//返回值false</span></span><br><span class="line"><span class="keyword">var</span> flag2=<span class="built_in">isNaN</span>(<span class="string">&quot;12.5s&quot;</span>);		<span class="comment">//返回值true</span></span><br><span class="line"><span class="keyword">var</span> flag3=<span class="built_in">isNaN</span>(<span class="string">&quot;45.8&quot;</span>);		<span class="comment">//返回值false</span></span><br></pre></td></tr></table></figure>

<p>isNaN()函数通常用于监测parseFloat()和parseInt ()的结果,以判断它们表示的是否合法的数字.也可以用isNaN()函数来检测算数是否错误,如用0作为除数的情况.</p>
</li>
</ol>
<h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><p>同java一样,JavaScript需要先定义函数,然后才能调用函数.</p>
<ol>
<li><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>在JavaScript中,自定义函数由关键字<strong>function</strong>,函数名,一组参数及置于括号中的待执行的JavaScript语句组成,语法格式如下.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">参数<span class="number">1</span>,参数<span class="number">2</span>,参数<span class="number">3</span>, … </span>)</span>&#123;</span><br><span class="line">     <span class="comment">//JavaScript语句</span></span><br><span class="line">     [<span class="keyword">return</span> 返回值]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>function是定义函数的关键字,必须有</p>
</li>
<li><p>参数1,参数2,等是函数的参数.因为JavaScript本身是弱类型,所以他的参数也没有类型检查和类型限定.函数中的参数是可选的,根据函数是否可带参数,可分为不带参数的无参函数和有参函数.例如,有参函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//JavaScript 语句;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>“{“和”}”定义了函数的开始和结束</p>
</li>
<li><p>return语句来规定函数返回的值.</p>
</li>
</ul>
</li>
<li><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><p>要执行一个函数,必须先调用这个函数,当调用函数时,必须制定函数名及其后面的参数(如果有参数).函数的调用一般和元素的事件结合使用.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">事件名=<span class="string">&quot;函数名()&quot;</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h2><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>onload</td>
<td>一个页面或一幅图像完成加载</td>
</tr>
<tr>
<td>onlick</td>
<td>鼠标单击某个对象</td>
</tr>
<tr>
<td>onmouseover</td>
<td>鼠标指导移到某元素上</td>
</tr>
<tr>
<td>onkeydown</td>
<td>某个键盘按键被按下</td>
</tr>
<tr>
<td>onchange</td>
<td>域的内容被改变</td>
</tr>
</tbody></table>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/2021/07/07/JavaScript%E5%9F%BA%E7%A1%80/image-20210711093243759.png" alt="JavaScript基础总结"></p>
]]></content>
      <categories>
        <category>使用jQuery快速高效制作网页交互特效</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript对象及初始面向对象</title>
    <url>/2021/07/18/JavaScript%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%88%9D%E5%A7%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>在JavaScript中，所有的事物都是对象，如字符串，数值，数组，函数，所以本章在讲解之间先回顾一下，学习过的JavaScript数据类型。</p>
<span id="more"></span>

<h1 id="回顾JavaScript数据类型"><a href="#回顾JavaScript数据类型" class="headerlink" title="回顾JavaScript数据类型"></a>回顾JavaScript数据类型</h1><p>JavaScript中提供了常用的基本数据类型，这些数据类型如下：</p>
<ul>
<li><p>number(数值类型)</p>
</li>
<li><p>string(字符串类型)</p>
</li>
<li><p>boolean(布尔类型)</p>
</li>
<li><p>null(空类型)</p>
</li>
<li><p>undefined(未定义类型)</p>
</li>
<li><p>object 一种复杂的数据类型，该类型实例化对象是一组数据和功能的集合。</p>
<p>要区分一下<strong>null</strong>、<strong>undefined</strong>和<strong>object</strong>这几个类型</p>
<ul>
<li>null表示无值，默认的空值null；使用typeof运算符判断数据类型返回时会不会返回null这个类型。</li>
</ul>
</li>
</ul>
<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><ol>
<li><h2 id="对象是什么"><a href="#对象是什么" class="headerlink" title="对象是什么"></a>对象是什么</h2><ol>
<li>对象是包含相关属性和方法的集合体</li>
<li>什么是面向对象<ol>
<li>面向对象仅仅是一个概念或者编程思想</li>
<li>通过一种叫做原型的方式来实现面向对象编程</li>
</ol>
</li>
</ol>
</li>
<li><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><ol>
<li><h3 id="在JavaScript中，对象分为两种"><a href="#在JavaScript中，对象分为两种" class="headerlink" title="在JavaScript中，对象分为两种"></a>在JavaScript中，对象分为两种</h3><ol>
<li><h4 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h4><ol>
<li><p>与java中创建对象一样，创建自定义对象的最简单的方式就是使用当前操作符new创建一个object的实例，然后用过 “ . ” 为其添加属性和方法，创建对象的语法如下所示。</p>
</li>
<li><p><strong>语法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 对象名称=<span class="keyword">new</span> <span class="built_in">Object</span>( );</span><br><span class="line">通过  . 添加属性和方法</span><br></pre></td></tr></table></figure>

<p><strong>实例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> flower=<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    flower.name=<span class="string">&quot;长春花&quot;</span>;</span><br><span class="line">    flower.genera=<span class="string">&quot;夹竹桃科 长春花属&quot;</span>;</span><br><span class="line">    flower.area=<span class="string">&quot;非洲、亚热带、热带以及中国大陆的华东、西南、中南等地&quot;</span>;</span><br><span class="line">    flower.uses=<span class="string">&quot;观赏或用药等&quot;</span>;</span><br><span class="line">    flower.showName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    alert(<span class="built_in">this</span>.name);    &#125;</span><br><span class="line"> flower.showName();</span><br></pre></td></tr></table></figure></li>
<li><p><strong>使用字面量赋值方式创建对象</strong></p>
<p>示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> flower=&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;长春花&quot;</span>,</span><br><span class="line">        <span class="attr">genera</span>:<span class="string">&quot;夹竹桃科 长春花属&quot;</span>,</span><br><span class="line">        <span class="attr">area</span>:<span class="string">&quot;非洲、亚热带、热带以及中国大陆的华东、西南、中南等地&quot;</span>,</span><br><span class="line">        <span class="attr">uses</span>:<span class="string">&quot;观赏或用药等&quot;</span>,</span><br><span class="line">        <span class="attr">showName</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="built_in">this</span>.name); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> flower.showName();</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h4 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h4><ol>
<li><strong>JavaScript的内置对象是一种特殊的数据，常见的内置对象如下所示。</strong><ul>
<li><strong>String（字符串）对象</strong></li>
<li><strong>Date（日期）对象</strong></li>
<li><strong>Array（数组）对象</strong></li>
<li><strong>Boolean（逻辑）对象</strong></li>
<li><strong>Math（算数）对象</strong></li>
<li><strong>RegExp对象</strong></li>
</ul>
</li>
<li>其中String，Date，Array，Boolean和Math对象，我们在前面的章节已经学习过，下面简单的回顾一下。<ol>
<li>字符串是JavaScript中的一种基本的数据类型，String对象的length属性声明了该字符串中的字符数，String类定义了大量的操作字符串的方法，一般分为查找子字符串，截取和拼接字符串，匹配正则表达式，改变字符串样式等，如已学习的indexOf（）方法，replace（）方法。</li>
<li>Date对象是用于处理日期和时间，Date对象会自动吧当前日期和时间保存与其初始值，Date对象的大部分方法由如下鸡肋组成。<ol>
<li>get x x x：获取年，月，日，时，分，秒，等。</li>
<li>set x x x：设置年，月，日，时，分，秒，等。</li>
</ol>
</li>
<li>数组对象的作用是使用单独的变量名来存储一系列的值，数组的常用来那个属性是lengt，代表了这个数组元素的个数，数组常用的方法有排序，添加和删除元素，拼接另一个数组，转成字符串，如sort（），concat（），join（）方法等。</li>
<li>Boolean对象用于将非逻辑值转换为逻辑值（true或者false），在JavaScript中布尔值是一种基本的数据类型，Boolean对象是一个将布尔值打包成布尔对象。Boolean对象主要用于提供将布尔值转换成字符串类的toString（）方法。当调用toString（）方法将布尔值转换成字符串时，JavaScript会将这个布尔值转换成一个临时的Boolean对象，然后调用这个对象的toString（）方法。</li>
<li>Math对象的作用是执行常见的算书任务。Math对象并不像Date和String那样的对象，因此没有构造函数Math（），像Math.round（）这样的函数只能是函数，不能作为某个对象的方法使用。Math对象中最常见的方法有向上（向下）取整，四舍五入取整，随机数，返回两个数字中大数或小数，如round（），max（），min（）方法等。</li>
<li>RegExp对象对我们来说比较陌生，RegExp是正则表达式的缩写，当需要检索某个文本是可以使用一种模式来描述要检索的内容，RegExp就是这种模式。简单的模式可以是一个单独的字符，复杂的模式包括更多的字符，并可用于解析，格式检查，替换等。</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><h2 id="构造函数和原型对象"><a href="#构造函数和原型对象" class="headerlink" title="构造函数和原型对象"></a>构造函数和原型对象</h2><ol>
<li><p>如何解决使用同一个接口不需要创建很多对象，减少产生大量的重复代码？</p>
<ol>
<li><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ol>
<li>构造函数可以用来创建特殊类型的对象，像Object和Array这样的原生构造函数，在运行时会自动出现在执行环境中，此外也可以创建自定义的构造函数，</li>
<li>所谓的构造函数，就是一个普通函数，但是内部使用了this变量，对构造函数使用new操作符，就能生成实例，并且this变量会绑定在实例对象上，从而定义自定义对象类型的属性和方法。</li>
<li>构造函数始终都应该以一个大写字母开头</li>
<li>使用构造函数创建新实例，必须使用new操作符，以这种方式调用构造函数实际上会经历以下四个步骤。<ol>
<li>创建一个新对象</li>
<li>将构造函数的作用域赋值给新对象（this就执行了这个新对象）。</li>
<li>执行构造函数中的代码。</li>
<li>返回新对象</li>
</ol>
</li>
</ol>
</li>
<li><h3 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h3><ol>
<li><p>每个函数都有一个prototype属性，这个属性是一个指针，指向一个对象。而这个对象的用途包含可以由特定类型的所有实例共享的属性和方法。</p>
</li>
<li><p>prototype就是通过调用构造函数而创建的那个对象实例的原型对象，使用原型对象的好处就是可以让所有对象实例共享它所有的属性和方法，也就是说不必再构造函数中定义对象实例的信息，可以将这些信息直接添加到原型对象中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Flower</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    Flower.prototype.name=<span class="string">&quot;曼陀罗花&quot;</span>;</span><br><span class="line">    Flower.prototype.genera=<span class="string">&quot;茄科 曼陀罗属&quot;</span>;</span><br><span class="line">    Flower.prototype.area=<span class="string">&quot;印度、中国北部&quot;</span>;</span><br><span class="line">    Flower.prototype.uses=<span class="string">&quot;观赏或药用&quot;</span>;</span><br><span class="line">    Flower.prototype.showName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> flower1=<span class="keyword">new</span> Flower();</span><br><span class="line">    flower1.showName();</span><br><span class="line">    <span class="keyword">var</span> flower2=<span class="keyword">new</span> Flower();</span><br><span class="line">    flower2.showName();</span><br><span class="line">    alert(flower1.showName==flower2.showName);</span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/18/JavaScript%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%88%9D%E5%A7%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20210718111954605.png" alt="image-20210718111954605"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">对象._ _proto_ _指向原型对象</span><br><span class="line">原型对象用<span class="title">constructor</span>属性指向构造函数</span><br><span class="line">类用<span class="title">prototype</span>执行原型对象</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h2 id="constructor属性"><a href="#constructor属性" class="headerlink" title="constructor属性"></a>constructor属性</h2><ol>
<li>constructor属性指向Flower<ol>
<li>原型对象用constructor属性指向构造函数</li>
</ol>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(flower1.constructor==Flower);</span><br><span class="line">alert(flower2.constructor==Flower);</span><br><span class="line">alert(flower3.constructor==Flower);</span><br></pre></td></tr></table></figure></li>
<li><h2 id="instanceof操作符"><a href="#instanceof操作符" class="headerlink" title="instanceof操作符"></a>instanceof操作符</h2><ol>
<li><p>使用instanceof操作符检测对象类型、</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(flower1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);</span><br><span class="line">alert(flower1 <span class="keyword">instanceof</span> Flower);</span><br><span class="line">alert(flower2 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);</span><br><span class="line">alert(flower2 <span class="keyword">instanceof</span> Flower);</span><br><span class="line">alert(flower3 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);</span><br><span class="line">alert(flower3 <span class="keyword">instanceof</span> Flower);</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
</ol>
<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><ol>
<li><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><ol>
<li><p>在JavaScript中，每个构造函数都拥有一个原型对象，原型对象都包含一个指向构造函数的纸张，实例都包含一个执行构造对象的内部指针。</p>
</li>
<li><p>一个原型对象是另一个原型对象的实例<br>相关的原型对象层层递进，就构成了实例与原型的链条，就是原型链</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Humans</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.foot=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Humans.prototype.getFoot=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.foot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Man</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.head=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Man.prototype=<span class="keyword">new</span> Humans();          <span class="comment">//继承了Humans</span></span><br><span class="line">    Man.prototype.getHead=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> man1=<span class="keyword">new</span> Man();</span><br><span class="line">    alert(man1.getFoot());                          <span class="comment">//2</span></span><br><span class="line">    alert(man1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);          <span class="comment">//true     </span></span><br><span class="line">    alert(man1 <span class="keyword">instanceof</span> Humans);        <span class="comment">//true</span></span><br><span class="line">    alert(man1 <span class="keyword">instanceof</span> Man);          <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li>
<li><p>构造函数和原型之间的关系</p>
<p><img src="/2021/07/18/JavaScript%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%88%9D%E5%A7%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20210718112801650.png" alt="image-20210718112801650"></p>
</li>
<li><p>实际上就是重写圆形对象，赋值于一个新类型的实例，也就是说，原来存于新实例中的所有属性和方法，现在也存在与新的原型对象中了</p>
</li>
<li><p>在上面的代码中，没有使用 Man默认提供的原型，而是给它换了一个新原型，这个新原型就Humans的实例。于是、新原型不仅具有作为一个Humans 的实例所拥有的全部属性和方法，而且内部还有一个指针,指向了Humans的原型。</p>
<ol>
<li>最终，man1指向了Man的原型，Man的原型又指向Humans的型。getFoot( )方法仍然还Humans.prototype 中，但是foot则位于Man. prototype 中,这是因为foot是一个实例属性,而getFootl则是一个原型方法，既然Man.prototype现在是 Humans 的实例,那么 foot当然就位于该实例中了</li>
<li>通过实现原型链，本质上实现了前面讲解的原型搜索机制,大家应该还记得,当访问一个实属性时，首先会在实例中搜索该属性．如果没有找到该属性．则会继续搜索实例的原型。在通过原型链实现继承的情况下,搜索过程就是沿着原型链继续向上,以示例6为例.调用man1 . getFoot会经历如下三个步骤。<ol>
<li>搜索实例</li>
<li>搜索Man.prototype</li>
<li>搜索Humans.prototype</li>
</ol>
</li>
<li>最后一步才会找到该方法，在找不到属性或方法的情况下，搜索过程总要一环一环地前行到原型链的末端才会停下来。</li>
<li>上面示例展示的原型链还少一环,大家知道，所有的引用类型默认都继承了Object，而这个继承也是通过原型链实现的。所有函数都默认原型都是Object 的实例，因此默认原型都会包含一个内部指针，指向Object.prototype，这也正是所有自定义类型都会继承toString( ). valueOf()等默认方法的根本原因，所以上面示例展示的原型链中还应该包括另外一个继承层次,此示例的完整原型链如图4.8所示。</li>
<li><img src="/2021/07/18/JavaScript%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%88%9D%E5%A7%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20210718113518713.png" alt="image-20210718113518713"></li>
</ol>
</li>
</ol>
</li>
<li><h2 id="对象继承"><a href="#对象继承" class="headerlink" title="对象继承"></a>对象继承</h2><ol>
<li><p>原型链虽然很强大，可以用它米实现继承，但是也存在两个问题。最重要的是来自包含引用类型值的原型，由于包含引用类型值的原型属性会被所有实例共享，在通过原型来实现继承时，原型实际上会变成另一个类型的实例，因此，原先的实例属性也就变成了现在的原型属性了.</p>
</li>
<li><p>创建子类型的实例时，不能向父类型的构造函数中传递参数</p>
</li>
<li><h3 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h3><ol>
<li><p>借用构造函数这种技术的基本思想很简单，就是在子类型构造函数的内部调用父类型构造函数,在子类型构造函数的内部通过 apply()或call()方法调用父类型的构造函数，也可以在将来新创建的对象上执行构造函数,下面先看一下 apply()和call()的语法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">apply([thisOjb[,argArray]])</span><br></pre></td></tr></table></figure>

<p>应用某一对象的一个方法，用另一个对象替换当前对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">call([thisObj[,arg1[,arg2[,  [,argN]]]]])</span><br></pre></td></tr></table></figure>

<p>调用一个对象的一个方法，以另一个对象替换当前对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//示例</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Humans</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Man</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Humans.call(<span class="built_in">this</span>,<span class="string">&quot;mary&quot;</span>);   <span class="comment">//继承了Humans,同时还传递了参数</span></span><br><span class="line">        <span class="built_in">this</span>.age=<span class="number">38</span>;              <span class="comment">//实例属性</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> man1=<span class="keyword">new</span> Man();</span><br><span class="line">    alert(man1.name);       <span class="comment">//输出mary</span></span><br><span class="line">    alert(man1.age);        <span class="comment">//输出38</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><ol>
<li><p>组合继承：有时也叫做伪经典继承</p>
<ol>
<li>将原型链和借用构造函数的技术组合到一块，发挥二者之长的一种继承模式</li>
<li>使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承</li>
</ol>
</li>
<li><p>示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Humans</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.clothing=[<span class="string">&quot;trousers&quot;</span>,<span class="string">&quot;dress&quot;</span>,<span class="string">&quot;jacket&quot;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    Humans.prototype.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Man</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">        Humans.call(<span class="built_in">this</span>,name);    <span class="comment">//继承属性</span></span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    Man.prototype=<span class="keyword">new</span> Humans();    <span class="comment">//继承方法</span></span><br><span class="line">    Man.prototype.sayAge=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.age);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> man1=<span class="keyword">new</span> Man(<span class="string">&quot;mary&quot;</span>,<span class="number">38</span>);</span><br><span class="line">    man1.clothing.push(<span class="string">&quot;coat&quot;</span>);</span><br><span class="line">    alert(man1.clothing);     <span class="comment">//输出&quot;trousers,dress,jacket,coat&quot;</span></span><br><span class="line">    man1.sayName();            <span class="comment">//输出mary</span></span><br><span class="line">    man1.sayAge();            <span class="comment">//输出38</span></span><br><span class="line">    <span class="keyword">var</span> man2=<span class="keyword">new</span> Man(<span class="string">&quot;tom&quot;</span>,<span class="number">26</span>);</span><br><span class="line">    alert(man2.clothing);    <span class="comment">//输出&quot;trousers,dress,jacket&quot;</span></span><br><span class="line">    man2.sayName();            <span class="comment">//输出tom</span></span><br><span class="line">    man2.sayAge();            <span class="comment">//输出26</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>组合继承避免了原型链和借用构造函数的缺陷，融合了他们的优点，成为JavaScript中最成员的继承模式，</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="/2021/07/18/JavaScript%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%88%9D%E5%A7%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20210718114438758.png" alt="image-20210718114438758"></p>
]]></content>
      <categories>
        <category>使用jQuery快速高效制作网页交互特效</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript操作BOM对象</title>
    <url>/2021/07/11/JavaScript%E6%93%8D%E4%BD%9CBOM%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="BOM模型"><a href="#BOM模型" class="headerlink" title="BOM模型"></a>BOM模型</h1><ol>
<li><p>BOM：浏览器对象模型（Browser Object Model）</p>
</li>
<li><p>BOM提供了独立于内容的、可以与浏览器窗口进行互动的对象结构</p>
<span id="more"></span></li>
</ol>
<p><img src="/2021/07/11/JavaScript%E6%93%8D%E4%BD%9CBOM%E5%AF%B9%E8%B1%A1/image-20210711112651203.png" alt="image-20210711112651203"></p>
<ol start="3">
<li>BOM可实现功能<ol>
<li>弹出新的浏览器窗口</li>
<li>移动、关闭浏览器窗口以及调整窗口的大小</li>
<li>页面的前进、后退</li>
</ol>
</li>
</ol>
<h1 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h1><ol>
<li><h2 id="常用的属性"><a href="#常用的属性" class="headerlink" title="常用的属性"></a>常用的属性</h2><table>
<thead>
<tr>
<th>属性名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>history</strong></td>
<td>有关客户访问过的URL的信息</td>
</tr>
<tr>
<td><strong>location</strong></td>
<td>有关当前 URL 的信息</td>
</tr>
</tbody></table>
<p>​    语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.属性名= <span class="string">&quot;属性值&quot;</span> </span><br></pre></td></tr></table></figure>

<p>​    示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.location=<span class="string">&quot;http://www.bdqn.cn&quot;</span> ;      <span class="comment">//表示跳转到北大青鸟首页</span></span><br></pre></td></tr></table></figure></li>
<li><h2 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h2><table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>prompt( )</strong></td>
<td>显示可提示用户输入的对话框</td>
</tr>
<tr>
<td><strong>alert( )</strong></td>
<td>显示带有一个提示信息和一个确定按钮的警示框</td>
</tr>
<tr>
<td><strong>confirm( )</strong></td>
<td>显示一个带有提示信息、确定和取消按钮的对话框</td>
</tr>
<tr>
<td><strong>close( )</strong></td>
<td>关闭浏览器窗口</td>
</tr>
<tr>
<td><strong>open( )</strong></td>
<td>打开一个新的浏览器窗口，加载给定 URL 所指定的文档</td>
</tr>
<tr>
<td><strong>setTimeout( )</strong></td>
<td>在指定的毫秒数后调用函数或计算表达式</td>
</tr>
<tr>
<td><strong>setInterval()</strong></td>
<td>按照指定的周期（以毫秒计）来调用函数或表达式</td>
</tr>
</tbody></table>
<ol>
<li><h3 id="confirm-方法"><a href="#confirm-方法" class="headerlink" title="confirm()方法"></a>confirm()方法</h3><ol>
<li>confirm()：将弹出一个确认对话框</li>
<li>confirm()与alert ()、 prompt()区别<ol>
<li>alert( )：一个参数，仅显示警告对话框的消息，无返回值，不能对脚本产生任何改变</li>
<li>prompt( )：两个参数，输入对话框，用来提示用户输入一些信息，单击“取消”按钮则返回null，击“确定”按钮则返回用户输入的值，常用于收集用户关于特定问题而反馈的信息</li>
<li>confirm( )：一个参数，确认对话框，显示提示对话框的消息、“确定”按钮和“取消”按钮，单击“定”按钮返回true，单击“取消”按钮返回false，因此与if-else语句搭配使用</li>
</ol>
</li>
</ol>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//示例</span></span><br><span class="line">confirm(<span class="string">&quot;对话框中显示的纯文本&quot;</span>)</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">   <span class="keyword">var</span> flag=confirm(<span class="string">&quot;确认要删除此条信息吗？&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="literal">true</span>)</span><br><span class="line">	      alert(<span class="string">&quot;删除成功！&quot;</span>);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">	       alert(<span class="string">&quot;你取消了删除&quot;</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><h3 id="open-方法"><a href="#open-方法" class="headerlink" title="open()方法"></a>open()方法</h3><ol>
<li><p>窗口特征</p>
<table>
<thead>
<tr>
<th>属性名称</th>
<th>说   明</th>
</tr>
</thead>
<tbody><tr>
<td>height、width</td>
<td>窗口文档显示区的高度、宽度。以像素计</td>
</tr>
<tr>
<td>left、top</td>
<td>窗口的x坐标、y坐标。以像素计</td>
</tr>
<tr>
<td>toolbar=yes |no |1 |0</td>
<td>是否显示浏览器的工具栏。黙认是yes</td>
</tr>
<tr>
<td>scrollbars=yes |no |1 |0</td>
<td>是否显示滚动条。黙认是yes</td>
</tr>
<tr>
<td>location=yes |no |1 |0</td>
<td>是否显示地址地段。黙认是yes</td>
</tr>
<tr>
<td>status=yes |no |1 |0</td>
<td>是否添加状态栏。黙认是yes</td>
</tr>
<tr>
<td>menubar=yes |no |1 |0</td>
<td>是否显示菜单栏。黙认是yes</td>
</tr>
<tr>
<td>resizable=yes |no |1 |0</td>
<td>窗口是否可调节尺寸。黙认是yes</td>
</tr>
<tr>
<td>titlebar=yes |no |1 |0</td>
<td>是否显示标题栏。黙认是yes</td>
</tr>
<tr>
<td>fullscreen=yes |no |1 |0</td>
<td>是否使用全屏模式显示浏览器。黙认是no。<br>处于全屏模式的窗口必须同时处于剧院模式</td>
</tr>
</tbody></table>
<p>语法:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.open(<span class="string">&quot;弹出窗口的url&quot;</span>,<span class="string">&quot;窗口名称&quot;</span>,<span class="string">&quot;窗口特征”)</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
<li><h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><ol>
<li><p>常用方法</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>back()</td>
<td>加载 history 对象列表中的前一个URL</td>
</tr>
<tr>
<td>forward()</td>
<td>加载 history 对象列表中的下一个URL</td>
</tr>
<tr>
<td>go()</td>
<td>加载 history 对象列表中的某个具体URL</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">history.back()		<span class="comment">/*等价于*/</span>		history.go(-<span class="number">1</span>)	<span class="comment">//浏览器中的后退</span></span><br><span class="line">history.forward()	<span class="comment">/*等价于*/</span>		history.go(<span class="number">1</span>)	<span class="comment">//浏览器中的后退</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><ol>
<li><h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>host</td>
<td>设置或返回主机名和当前URL的端口号</td>
</tr>
<tr>
<td>hostname</td>
<td>设置或返回当前URL的主机名</td>
</tr>
<tr>
<td>href</td>
<td>设置或返回完整的URL</td>
</tr>
</tbody></table>
</li>
<li><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><table>
<thead>
<tr>
<th>常用方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>reload()</td>
<td>重新加载当前文档</td>
</tr>
<tr>
<td>replace()</td>
<td>用新的文档替换当前文档</td>
</tr>
</tbody></table>
</li>
</ol>
</li>
<li><h2 id="location和history对象的应用"><a href="#location和history对象的应用" class="headerlink" title="location和history对象的应用"></a>location和history对象的应用</h2><ol>
<li><p>主页面使用href实现跳转和刷新本页</p>
</li>
<li><p>示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;javascript:location.href=&#x27;flower.html&#x27;&quot;</span>&gt;查看鲜花详情&lt;/a&gt;  </span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:location.reload()&quot;</span>&gt;</span>刷新本页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:history.back()&quot;</span>&gt;</span>返回主页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h1 id="Document对象"><a href="#Document对象" class="headerlink" title="Document对象"></a>Document对象</h1><ol>
<li><h3 id="常用属性-1"><a href="#常用属性-1" class="headerlink" title="常用属性"></a>常用属性</h3><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>referrer</strong></td>
<td>返回载入当前文档的URL</td>
</tr>
<tr>
<td><strong>URL</strong></td>
<td>返回当前文档的URL</td>
</tr>
</tbody></table>
<p>语法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.referrer</span><br><span class="line"><span class="built_in">document</span>.URL</span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/11/JavaScript%E6%93%8D%E4%BD%9CBOM%E5%AF%B9%E8%B1%A1/image-20210711114644954.png" alt="image-20210711114644954"></p>
</li>
<li><h3 id="Document对象应用"><a href="#Document对象应用" class="headerlink" title="Document对象应用"></a>Document对象应用</h3><ol>
<li><p>判断页面是否是链接进入</p>
</li>
<li><p>自动跳转到登录页面</p>
</li>
<li><p>示例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> preUrl=<span class="built_in">document</span>.referrer;  <span class="comment">//载入本页面文档的地址</span></span><br><span class="line"><span class="keyword">if</span>(preUrl==<span class="string">&quot;&quot;</span>)&#123;	</span><br><span class="line">      <span class="built_in">document</span>.write(<span class="string">&quot;&lt;h2&gt;您不是从领奖页面进入，5秒后将自动 </span></span><br><span class="line"><span class="string">                         跳转到登录页面&lt;/h2&gt;&quot;</span>);</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="string">&quot;javascript:location.href=&#x27;login.html&#x27;&quot;</span>,<span class="number">5000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h3 id="Document对象的常用方法"><a href="#Document对象的常用方法" class="headerlink" title="Document对象的常用方法"></a>Document对象的常用方法</h3><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>应用</th>
</tr>
</thead>
<tbody><tr>
<td>getElementById()</td>
<td>返回对拥有指定id的第一个对象的引用</td>
<td><strong>对象的id唯一</strong></td>
</tr>
<tr>
<td>getElementsByName()</td>
<td>返回带有指定名称的对象的数组</td>
<td>相同name属性</td>
</tr>
<tr>
<td>getElementsByTagName()</td>
<td>返回带有指定标签名的对象的数组</td>
<td><strong>相同的元素</strong></td>
</tr>
<tr>
<td>write()</td>
<td>向文档写文本、HTML表达式或JavaScript代码</td>
<td></td>
</tr>
</tbody></table>
<ol>
<li><p>动态改变层、标签中的内容</p>
</li>
<li><p>访问相同name的元素</p>
</li>
<li><p>访问相同标签的元素</p>
</li>
<li><p>示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;book&quot;</span>).innerHTML=<span class="string">&quot;现象级全球畅销书&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aInput=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;input&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> sStr=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aInput.length;i++)&#123;</span><br><span class="line">       sStr+=aInput[i].value+<span class="string">&quot;&amp;nbsp;&amp;nbsp;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;replace&quot;</span>).innerHTML=sStr;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h1 id="JavaScript内置对象"><a href="#JavaScript内置对象" class="headerlink" title="JavaScript内置对象"></a>JavaScript内置对象</h1><ol>
<li>Array：用于在单独的变量名中存储一系列的值</li>
<li>String：用于支持对字符串的处理</li>
<li>Math：用于执行常用的数学任务，它包含了若干个数字常量和函数</li>
<li>Date：用于操作日期和时间</li>
</ol>
<ol>
<li><h2 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h2></li>
</ol>
<p>使用Date对象获得时、分、秒</p>
<ol start="2">
<li><h2 id="Date对象的方法"><a href="#Date对象的方法" class="headerlink" title="Date对象的方法"></a>Date对象的方法</h2></li>
</ol>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>getDate()</strong></td>
<td>返回 Date 对象的一个月中的每一天，其值介于1～31之间</td>
</tr>
<tr>
<td><strong>getDay()</strong></td>
<td>返回 Date 对象的星期中的每一天，其值介于0～6之间</td>
</tr>
<tr>
<td><strong>getHours()</strong></td>
<td>返回 Date 对象的小时数，其值介于0～23之间</td>
</tr>
<tr>
<td><strong>getMinutes()</strong></td>
<td>返回 Date 对象的分钟数，其值介于0～59之间</td>
</tr>
<tr>
<td><strong>getSeconds()</strong></td>
<td>返回 Date 对象的秒数，其值介于0～59之间</td>
</tr>
<tr>
<td><strong>getMonth()</strong></td>
<td>返回 Date 对象的月份，其值介于0～11之间</td>
</tr>
<tr>
<td><strong>getFullYear()</strong></td>
<td>返回 Date 对象的年份，其值为4位数</td>
</tr>
<tr>
<td><strong>getTime()</strong></td>
<td>返回自某一时刻（1970年1月1日）以来的毫秒数</td>
</tr>
</tbody></table>
<ol start="3">
<li><h2 id="制作时钟特效"><a href="#制作时钟特效" class="headerlink" title="制作时钟特效"></a>制作时钟特效</h2></li>
</ol>
<p>使用Date对象的方法显示当前时间的小时、分钟和秒</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disptime</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();  </span><br><span class="line"><span class="keyword">var</span> hh = today.getHours(); </span><br><span class="line"><span class="keyword">var</span> mm = today.getMinutes();</span><br><span class="line"><span class="keyword">var</span> ss = today.getSeconds();</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;myclock&quot;</span>).innerHTML=<span class="string">&quot;现在是:&quot;</span>+hh +<span class="string">&quot;:&quot;</span>+mm+<span class="string">&quot;: &quot;</span>+ss;</span><br><span class="line">&#125;</span><br><span class="line">disptime();</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myclock&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2></li>
</ol>
<p>常用方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>ceil()</td>
<td>对数进行上舍入</td>
<td>Math.ceil(25.5);返回26  Math.ceil(-25.5);返回-25</td>
</tr>
<tr>
<td>floor()</td>
<td>对数进行下舍入</td>
<td>Math.floor(25.5);返回25  Math.floor(-25.5);返回-26</td>
</tr>
<tr>
<td>round()</td>
<td>把数四舍五入为最接近的数</td>
<td>Math.round(25.5);返回26  Math.round(-25.5);返回-26</td>
</tr>
<tr>
<td>random()</td>
<td>返回0~1之间的随机数</td>
<td>Math.random();例如：0.6273608814137365</td>
</tr>
</tbody></table>
<p>如何实现返回的整数范围为2~99？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> iNum=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">98</span>+<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>随机选择颜色</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> color=<span class="built_in">Array</span>(<span class="string">&quot;红色&quot;</span>,<span class="string">&quot;黄色&quot;</span>,<span class="string">&quot;蓝色&quot;</span>,<span class="string">&quot;绿色&quot;</span>,<span class="string">&quot;橙色&quot;</span>,<span class="string">&quot;青色&quot;</span>,<span class="string">&quot;紫色&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> num=<span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random()*<span class="number">7</span>)-<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;color&quot;</span>).innerHTML=color[num];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol start="5">
<li><h2 id="定时函数"><a href="#定时函数" class="headerlink" title="定时函数"></a>定时函数</h2></li>
<li><h3 id="setTimeout-和clearTimeout"><a href="#setTimeout-和clearTimeout" class="headerlink" title="**setTimeout()**和clearTimeout()"></a>**setTimeout()**和clearTimeout()</h3></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>()</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="string">&quot;调用的函数&quot;</span>,等待的毫秒数)</span><br></pre></td></tr></table></figure>

<p>示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  myTime＝<span class="built_in">setTimeout</span>(<span class="string">&quot;disptime() &quot;</span>, <span class="number">1000</span> );</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;s&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;显示提示消息&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;timer()&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t=<span class="built_in">setTimeout</span>(<span class="string">&quot;alert(&#x27;3 seconds&#x27;)&quot;</span>,<span class="number">3000</span>);</span><br><span class="line">    <span class="comment">//1秒(1000毫秒)之后执行函数disptime()一次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="clearTimeout-解除定时函数"><a href="#clearTimeout-解除定时函数" class="headerlink" title="**clearTimeout()**解除定时函数"></a>**clearTimeout()**解除定时函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">clearTimeout</span>(setTimeOut()返回的ID值)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span>  myTime＝<span class="built_in">setTimeout</span>(<span class="string">&quot;disptime() &quot;</span>, <span class="number">1000</span> );</span><br><span class="line"><span class="built_in">clearTimeout</span>(myTime)；</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><h3 id="setInterval-和clearInterval"><a href="#setInterval-和clearInterval" class="headerlink" title="setInterval()和clearInterval ()"></a><strong>setInterval()<strong>和</strong>clearInterval ()</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>()</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="string">&quot;调用的函数&quot;</span>,间隔的毫秒数)</span><br></pre></td></tr></table></figure>

<p>示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  myTime＝<span class="built_in">setInterval</span>(<span class="string">&quot;disptime() &quot;</span>, <span class="number">1000</span> );</span><br></pre></td></tr></table></figure>

<p>如果要多次调用，使用setInterval()或者让disptime()自身再次调用setTimeout()</p>
<h3 id="clearInterval-解除定时函数"><a href="#clearInterval-解除定时函数" class="headerlink" title="clearInterval ()解除定时函数"></a>clearInterval ()解除定时函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">clearInterval</span>(<span class="built_in">setInterval</span>()返回的ID值)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span>  myTime＝<span class="built_in">setInterval</span>(<span class="string">&quot;disptime() &quot;</span>, <span class="number">1000</span> );</span><br><span class="line"><span class="built_in">clearInterval</span>(myTime)；</span><br></pre></td></tr></table></figure>

<h3 id="制作12进制的时钟特效"><a href="#制作12进制的时钟特效" class="headerlink" title="制作12进制的时钟特效"></a>制作12进制的时钟特效</h3><p>代码:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;time&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">showTime</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> timefinly = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> year = timefinly.getFullYear(); <span class="comment">//年</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> month = timefinly.getMonth() + <span class="number">1</span>; <span class="comment">//月</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> day = timefinly.getDate(); <span class="comment">//日</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> hour = timefinly.getHours(); <span class="comment">//时</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> APM = <span class="string">&quot;AM&quot;</span>;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">if</span> (hour &gt; <span class="number">12</span>) &#123;</span></span><br><span class="line"><span class="javascript">			APM = <span class="string">&quot;PM&quot;</span>;</span></span><br><span class="line"><span class="javascript">		&#125;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> min = timefinly.getMinutes(); <span class="comment">//分</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> sec = timefinly.getSeconds(); <span class="comment">//秒</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> weekNum = timefinly.getDay(); <span class="comment">//周</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">if</span> (weekNum == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">			weekNum = <span class="number">7</span>;</span></span><br><span class="line"><span class="javascript">		&#125;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> week=<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">switch</span> (weekNum) &#123;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">case</span> <span class="number">1</span>:</span></span><br><span class="line"><span class="javascript">			week=<span class="string">&quot;一&quot;</span>;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">case</span> <span class="number">2</span>:</span></span><br><span class="line"><span class="javascript">			week=<span class="string">&quot;二&quot;</span>;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">case</span> <span class="number">3</span>:</span></span><br><span class="line"><span class="javascript">			week=<span class="string">&quot;三&quot;</span>;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">case</span> <span class="number">4</span>:</span></span><br><span class="line"><span class="javascript">			week=<span class="string">&quot;四&quot;</span>;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">case</span> <span class="number">5</span>:</span></span><br><span class="line"><span class="javascript">			week=<span class="string">&quot;五&quot;</span>;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">case</span> <span class="number">6</span>:</span></span><br><span class="line"><span class="javascript">			week=<span class="string">&quot;六&quot;</span>;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">case</span> <span class="number">7</span>:</span></span><br><span class="line"><span class="javascript">			week=<span class="string">&quot;日&quot;</span>;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">		&#125;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> content = year + <span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月&quot;</span> + day + <span class="string">&quot;日     &quot;</span> + hour + <span class="string">&quot;:&quot;</span> + min + <span class="string">&quot;:&quot;</span> + sec + <span class="string">&quot;     &quot;</span> + APM +</span></span><br><span class="line"><span class="javascript">			<span class="string">&quot;    星期&quot;</span> + week</span></span><br><span class="line"><span class="javascript">		<span class="built_in">document</span>.getElementById(<span class="string">&quot;time&quot;</span>).innerText = content;</span></span><br><span class="line"><span class="javascript">	&#125;</span></span><br><span class="line"><span class="javascript">	showTime();</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> atime = <span class="built_in">setInterval</span>(<span class="string">&quot;showTime()&quot;</span>, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">	<span class="comment">//clearInterval(atime);</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="/2021/07/11/JavaScript%E6%93%8D%E4%BD%9CBOM%E5%AF%B9%E8%B1%A1/image-20210714100816234.png" alt="image-20210714100816234"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>使用jQuery快速高效制作网页交互特效</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript操作DOM对象</title>
    <url>/2021/07/16/JavaScript%E6%93%8D%E4%BD%9CDOM%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>DOM是Document Object Model的缩写，即文档对象模型,是基于文档编程的一套API接口。</p>
<p>使用JavaScript操作DOM分为三个方面：DOM Core (核心) ，HTML-DOM和CSS-DOM。通过这些标准开发人员可以让网页真正动起来，动态得增加，修好，删除数据，使用户与计算机的交互更加便捷，交互也更加丰富，那么下面，大家就一起学习JavaScript操作DOM吧。</p>
<span id="more"></span>

<p><img src="/2021/07/16/JavaScript%E6%93%8D%E4%BD%9CDOM%E5%AF%B9%E8%B1%A1/image-20210716105304043.png" alt="image-20210716105304043"></p>
<ol>
<li><h1 id="节点和节点的关系"><a href="#节点和节点的关系" class="headerlink" title="节点和节点的关系"></a>节点和节点的关系</h1></li>
</ol>
<p><img src="/2021/07/16/JavaScript%E6%93%8D%E4%BD%9CDOM%E5%AF%B9%E8%B1%A1/image-20210716105352860.png" alt="image-20210716105352860"></p>
<p>HTML中的每个标签和元素都是一个节点,在DOM中是这样规定的.</p>
<ul>
<li>整个文档是一个文档节点</li>
<li>每个HTML标签是一个元素节点</li>
<li>包含在HTML元素中的文本是文本节点</li>
<li>每个HTML属性是一个属性节点</li>
<li>注释属于注释节点</li>
</ul>
<p>一个HTML文档是由各个不同的节点组成的.</p>
<p>使用父（parent）、子（child）和同胞（sibling）等术语来描述这些节点的层次关系，父节点拥有子节点，同级的子节点被称为同胞或兄弟节点，他们的关系如下</p>
<ul>
<li>在父节点树种，顶部节点被称为根（root），如&lt;HTML&gt;节点。</li>
<li>每个节点都有父节点，除了根（他没有父节点），如&lt;head&gt;和&lt;body&gt;的父节点都是&lt;HTML&gt;、文本节点“DOM应用”的父节点是&lt;p&gt;节点。</li>
<li>一个节点可以拥有任意数量的子节点，如&lt;body&gt;节点的子节点有&lt;img&gt;、&lt;h1&gt;和&lt;p&gt;。</li>
<li>同胞节点可以拥有任意数量的子节点，如&lt;img&gt;、&lt;h1&gt;和&lt;p&gt;就是兄弟节点，他们的父节点均为&lt;body&gt;节点。</li>
</ul>
<p>由于HTML文档中的标签，元素都是一个节点，并且各个节点之间都存在关系，因此JavaScript可以通过访问或改变节点的方式来改变页面的内容使用JavaScript操作JavaScript操作节点主要是访问节点，在文章中创建和增加节点，删除节点，替换节点，移机操作节点属性和样式等，</p>
<ol start="2">
<li><h1 id="访问节点"><a href="#访问节点" class="headerlink" title="访问节点"></a>访问节点</h1><ol>
<li><p>使用getElement系列方法访问指定节点</p>
<ol>
<li>getElementById（）：返回按id属性查找的第一个对象的引用</li>
<li>getElementsByName（）：返回按带有指定名称name查找的对象的借还，由于一个文档中可能会有多个同名节点（如复选框、单选按钮），因此返回的是元素数组。</li>
<li>getElementsByTagName（）：返回带有指定标签名，TagName查找的是对象的集合，由于一个文档中可能会有多个同类型的标签节点（如图片组，文本输入框，因此返回的元素数组。）</li>
</ol>
</li>
<li><h2 id="节点属性"><a href="#节点属性" class="headerlink" title="节点属性"></a>节点属性</h2><table>
<thead>
<tr>
<th>属性名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>parentNode</td>
<td>返回节点的父节点</td>
</tr>
<tr>
<td>childNodes</td>
<td>返回子节点集合，childNodes[i]</td>
</tr>
<tr>
<td>firstChild</td>
<td>返回节点的第一个子节点，最普遍的用法是访问该元素的文本节点</td>
</tr>
<tr>
<td>lastChild</td>
<td>返回节点的最后一个子节点</td>
</tr>
<tr>
<td>nextSibling</td>
<td>下一个节点</td>
</tr>
<tr>
<td>previousSibling</td>
<td>上一个节点</td>
</tr>
</tbody></table>
</li>
<li><h2 id="element属性"><a href="#element属性" class="headerlink" title="element属性"></a>element属性</h2><table>
<thead>
<tr>
<th>属性名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>firstElementChild</td>
<td>返回节点的第一个子节点，最普遍的用法是访问该元素的文本节点</td>
</tr>
<tr>
<td>lastElementChild</td>
<td>返回节点的最后一个子节点</td>
</tr>
<tr>
<td>nextElementSibling</td>
<td>下一个节点</td>
</tr>
<tr>
<td>previousElementSibling</td>
<td>上一个节点</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">oNext = oParent.nextElementSibling || oParent.nextSibling   </span><br><span class="line">oPre = oParent.previousElementSibling || oParent.previousSibling  </span><br><span class="line">oFirst = oParent. firstElementChild  ||  oParent.firstChild   </span><br><span class="line">oLast = oParent.lastElementChild || oParent.lastChild </span><br><span class="line"></span><br><span class="line">如果||前面有值，那变量就等于前面的，如果没有就等于后面的。</span><br></pre></td></tr></table></figure>

<p>非IE下由于会吧标签之间的空格，换行当成文本节点，因此为了准确的找到相应的元素，使用firstElementChild  lastElementChild  nextElementSibling  previousElementSibling  </p>
</li>
</ol>
</li>
<li><h1 id="节点信息"><a href="#节点信息" class="headerlink" title="节点信息"></a>节点信息</h1><p>节点是DOM层次结构中的任何类型对象的通用名称，每个节点都拥有包含着关于节点的某些信息的属性，</p>
<ul>
<li>nodeName（节点名称）</li>
<li>nodeValue（节点值）</li>
<li>nodeType（节点类型）</li>
</ul>
<ol>
<li><p>nodeName属性包含某个节点的名称，元素节点的nodeName是标签名吃，属性节点的nodeName是属性名称，文本节点的nodeName永远是#text，文档节点的nodeName永远是#document。</p>
</li>
<li><p>nodeValue节点值，对于文本节点，nodeValue属性包含文本；对于属性节点，nodeValue属性包含属性值；nodeValue属性对于文档节点和元素节点是不可用的。</p>
</li>
<li><p>nodeType属性可返回节点的类型，是一个只读属性，如返回的元素节点，文本节点，注释节点等。</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>节点类型</th>
<th>NodeType值</th>
</tr>
</thead>
<tbody><tr>
<td>元素element</td>
<td>1</td>
</tr>
<tr>
<td>属性attr</td>
<td>2</td>
</tr>
<tr>
<td>文本text</td>
<td>3</td>
</tr>
<tr>
<td>注释comments</td>
<td>8</td>
</tr>
<tr>
<td>文档document</td>
<td>9</td>
</tr>
</tbody></table>
</li>
<li><h1 id="操作节点"><a href="#操作节点" class="headerlink" title="操作节点"></a>操作节点</h1><ol>
<li><h2 id="操作节点的属性"><a href="#操作节点的属性" class="headerlink" title="操作节点的属性"></a>操作节点的属性</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getAttribute(<span class="string">&quot;属性名&quot;</span>);			<span class="comment">//用来获取属性的值</span></span><br><span class="line">setAttribute(<span class="string">&quot;属性名&quot;</span>,<span class="string">&quot;属性值&quot;</span>);	  <span class="comment">//用来设置属性的值</span></span><br></pre></td></tr></table></figure></li>
<li><h2 id="创建和插入节点"><a href="#创建和插入节点" class="headerlink" title="创建和插入节点"></a>创建和插入节点</h2><p>使用JavaScript操作DOM有很多方法可以创建或增加一个新节点</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>createElement( tagName)</td>
<td>创建一个标签名为tagName的新元素节点</td>
</tr>
<tr>
<td>A.appendChild(  B)</td>
<td>把B节点追加至A节点的末尾</td>
</tr>
<tr>
<td>insertBefore(  A,B )</td>
<td>把A节点插入到B节点之前</td>
</tr>
<tr>
<td>cloneNode(deep)</td>
<td>复制某个指定的节点</td>
</tr>
</tbody></table>
<ul>
<li>insertBefore(  A,B )  中有两个参数。A是必选想，表示新插入的节点；B是可选项，表示新节点被插入B节点的前面。</li>
<li>cloneNode(deep)  中的参数deep为布尔值，若deep值为true，则复制改节点，及该节点的所有子节点，若deep值为false，则只复制该节点和其属性。</li>
</ul>
</li>
<li><h2 id="删除和替换节点"><a href="#删除和替换节点" class="headerlink" title="删除和替换节点"></a>删除和替换节点</h2><p>使用Core HTML删除和替换节点的方法：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>removeChild( node)</td>
<td>删除指定的节点</td>
</tr>
<tr>
<td>replaceChild( newNode, oldNode）</td>
<td>用其他的节点替换指定的节点</td>
</tr>
</tbody></table>
<p>方法  replaceChild( newNode, oldNode）中的两个参数，newNode是替换的新节点，oldNode是要替换的节点。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> delNode=<span class="built_in">document</span>.getElementById(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">delNode.parentNode.removeChild(delNode);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oldNode=<span class="built_in">document</span>.getElementById(<span class="string">&quot;second&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> newNode=<span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">newNode.setAttribute(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;images/f03.jpg&quot;</span>);</span><br><span class="line">oldNode.parentNode.replaceChild(newNode,oldNode);</span><br></pre></td></tr></table></figure></li>
<li><h2 id="操作节点样式"><a href="#操作节点样式" class="headerlink" title="操作节点样式"></a>操作节点样式</h2><p>在JavaScript中，有两种方式可以动态的改变样式的属性，一种是使用样式的style属性，另一种是使用样式的className属性。</p>
<ol>
<li><h3 id="style属性"><a href="#style属性" class="headerlink" title="style属性"></a>style属性</h3><p>在HTML DOM中，style是一个对象，代表一个单独的样式声明，可通过应用样式的文档或元素访问style对象，使用style属性改变样式的语法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">HTML元素.style.样式属性＝<span class="string">&quot;值&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实例</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;titles&quot;</span>).style.color=<span class="string">&quot;#ff0000&quot;</span>; </span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;titles&quot;</span>).style.fontSize=<span class="string">&quot;25px &quot;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>style常用的属性</strong></p>
<table>
<thead>
<tr>
<th>类别</th>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>background（背景）</td>
<td>backgroundColor</td>
<td>设置元素的背景颜色</td>
</tr>
<tr>
<td>background（背景）</td>
<td>backgroundImage</td>
<td>设置元素的背景图像</td>
</tr>
<tr>
<td>background（背景）</td>
<td>backgroundRepeat</td>
<td>设置是否及如何重复背景图像</td>
</tr>
<tr>
<td>text（文本）</td>
<td>fontSize</td>
<td>设置元素的字体大小</td>
</tr>
<tr>
<td>text（文本）</td>
<td>fontWeight</td>
<td>设置字体的粗细</td>
</tr>
<tr>
<td>text（文本）</td>
<td>textAlign</td>
<td>排列文本</td>
</tr>
<tr>
<td>text（文本）</td>
<td>textDecoration</td>
<td>设置文本的修饰</td>
</tr>
<tr>
<td>text（文本）</td>
<td>font</td>
<td>设置同一字体的属性</td>
</tr>
<tr>
<td>text（文本）</td>
<td>color</td>
<td>设置文本的颜色</td>
</tr>
<tr>
<td>padding（边距）</td>
<td>padding</td>
<td>设置元素的填充</td>
</tr>
<tr>
<td>padding（边距）</td>
<td>paddingTop<br>paddingBottom<br>paddingLeft<br>paddingRight</td>
<td>设置元素的上、下、左、右填充</td>
</tr>
<tr>
<td>border（边框）</td>
<td>border</td>
<td>设置四个边框的属性</td>
</tr>
<tr>
<td>border（边框）</td>
<td>borderTop<br>borderBottom<br>borderLeft<br>borderLeft<br>borderRight</td>
<td>设置上、下、左、右边框的属性</td>
</tr>
</tbody></table>
<p><strong>事件</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>onclick</td>
<td>当用户单击某个对象时调用事件</td>
</tr>
<tr>
<td>onmouseover</td>
<td>鼠标移到某元素之上</td>
</tr>
<tr>
<td>onmouseout</td>
<td>鼠标从某元素移开</td>
</tr>
<tr>
<td>onmousedown</td>
<td>鼠标按钮被按下</td>
</tr>
</tbody></table>
</li>
<li><h3 id="className属性"><a href="#className属性" class="headerlink" title="className属性"></a>className属性</h3><p>在HTML DOM中，className属性可以设置或返回元素的class样式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">HTML元素.className=<span class="string">&quot;样式名称&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">over</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">document</span>.getElementById(<span class="string">&quot;cart&quot;</span>).className=<span class="string">&quot;cartOver&quot;</span>;</span><br><span class="line">     <span class="built_in">document</span>.getElementById(<span class="string">&quot;cartList&quot;</span>).className=<span class="string">&quot;cartListOver&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">out</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">document</span>.getElementById(<span class="string">&quot;cart&quot;</span>).className=<span class="string">&quot;cartOut&quot;</span>;</span><br><span class="line">     <span class="built_in">document</span>.getElementById(<span class="string">&quot;cartList&quot;</span>).className=<span class="string">&quot;cartListOut&quot;</span>;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
</ol>
<p>​        </p>
<ol start="5">
<li><h2 id="获取元素的样式"><a href="#获取元素的样式" class="headerlink" title="获取元素的样式"></a>获取元素的样式</h2><ol>
<li><p>在JavaScript中可以使用style属性获取样式的属性值，语法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">HTML元素.style.样式属性;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例</span></span><br><span class="line">alert(<span class="built_in">document</span>.getElementById(<span class="string">&quot;cartList&quot;</span>).display);</span><br></pre></td></tr></table></figure></li>
<li><p>使用上面的只能获取内联样式的属性值，无法获取内部样式表或外部样式表的属性值。所以说不用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">HTML元素. currentStyle.样式属性;	currentStyle是只读的</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例 兼容IE</span></span><br><span class="line">alert(<span class="built_in">document</span>.getElementById(<span class="string">&quot;cartList&quot;</span>).currentStyle.display);</span><br></pre></td></tr></table></figure>

<p><strong>非IE的！！！！！！！！！！！！！！！！！！！</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.defaultView.getComputedStyle(元素,<span class="literal">null</span>).属性;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例</span></span><br><span class="line"><span class="keyword">var</span> cartList=<span class="built_in">document</span>.getElementById(<span class="string">&quot;cartList&quot;</span>);</span><br><span class="line">alert(<span class="built_in">document</span>.defaultView.getComputedStyle(cartList,<span class="literal">null</span>).display);</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h1 id="获取元素位置"><a href="#获取元素位置" class="headerlink" title="获取元素位置"></a>获取元素位置</h1><ol>
<li><p>使用currentStyle或getComputerStyle（）可以获得元素的属性值，即可以获取元素在页面上的位置，固定效果如何实现？</p>
</li>
<li><h2 id="元素属性一样"><a href="#元素属性一样" class="headerlink" title="元素属性一样"></a>元素属性一样</h2><p>一些属性可以获取滚动状态下的元素的一些属性。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>offsetLeft</td>
<td>返回当前元素左边界到它上级元素的左边界的距离，只读属性</td>
</tr>
<tr>
<td>offsetTop</td>
<td>返回当前元素上边界到它上级元素的上边界的距离，只读属性</td>
</tr>
<tr>
<td>offsetHeight</td>
<td>返回元素的高度</td>
</tr>
<tr>
<td>offsetWidth</td>
<td>返回元素的宽度</td>
</tr>
<tr>
<td>offsetParent</td>
<td>返回元素的偏移容器，即对最近的动态定位的包含元素的引用</td>
</tr>
<tr>
<td>scrollTop</td>
<td>返回匹配元素的滚动条的垂直位置</td>
</tr>
<tr>
<td>scrollLeft</td>
<td>返回匹配元素的滚动条的水平位置</td>
</tr>
<tr>
<td>clientWidth</td>
<td>返回元素的可见宽度</td>
</tr>
<tr>
<td>clientHeight</td>
<td>返回元素的可见高度</td>
</tr>
</tbody></table>
<p>获取滚动条滚动的距离，这就需要使用scrollTop，scrollLeft这两个属性，获得数值单位是像素（PX），对于不滚动的元素，这两个元素值总是0。这两个属性获取滚动条在窗口中滚动的距离。语法如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//标准浏览器</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line"><span class="built_in">document</span>.documentElement.scrollLeft;</span><br><span class="line">或者</span><br><span class="line"><span class="comment">//Chrome</span></span><br><span class="line"><span class="built_in">document</span>.body.scrollTop;</span><br><span class="line"><span class="built_in">document</span>.body.scrollLeft;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sTop=<span class="built_in">document</span>.documentElement.scrollTop||<span class="built_in">document</span>.body.scrollTop;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1></li>
</ol>
<p><img src="/2021/07/16/JavaScript%E6%93%8D%E4%BD%9CDOM%E5%AF%B9%E8%B1%A1/JavaScript%E6%93%8D%E4%BD%9CDOM%E5%AF%B9%E8%B1%A1%5Cimage-20210716155346308.png" alt="image-20210716155346308"></p>
]]></content>
      <categories>
        <category>使用jQuery快速高效制作网页交互特效</category>
      </categories>
  </entry>
  <entry>
    <title>Windows系统使用技巧</title>
    <url>/2021/07/07/Windows%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>虽然用了好久的电脑，但是对很多系统的常用技巧都不熟悉，也不曾总结，这一次借看书的机会总结一下。 </p>
<span id="more"></span>

<h1 id="开启超级管理员账户Administrotor"><a href="#开启超级管理员账户Administrotor" class="headerlink" title="开启超级管理员账户Administrotor"></a><strong>开启超级管理员账户Administrotor</strong></h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user administrator /active:yes</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user administrator /active:no </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>教程类</category>
      </categories>
  </entry>
  <entry>
    <title>hexo语法合集</title>
    <url>/2021/06/30/hexo%E8%AF%AD%E6%B3%95%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<h2 id="写在前头："><a href="#写在前头：" class="headerlink" title="写在前头："></a>写在前头：</h2><p><a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html"><a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html">使用hexo+github搭建免费个人博客详细教程</a></a></p>
<span id="more"></span>

<h2 id="新建分类"><a href="#新建分类" class="headerlink" title="新建分类"></a>新建分类</h2><p>修改主题的配置文件themes/next/_config.yml，生效分类和标签：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">home</span>: <span class="string">/ || home</span></span><br><span class="line"><span class="comment">  #about: /about/ || user</span></span><br><span class="line">  <span class="attr">tags</span>: <span class="string">/tags/ || tags</span></span><br><span class="line">  <span class="attr">categories</span>: <span class="string">/categories/ || th</span></span><br><span class="line">  <span class="attr">archives</span>: <span class="string">/archives/ || archive</span></span><br><span class="line"><span class="comment">  #schedule: /schedule/ || calendar</span></span><br><span class="line"><span class="comment">  # sitemap: /sitemap.xml || sitemap</span></span><br><span class="line"><span class="comment">  #commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>

<p>新创建的hexo博客没有分类和标签，点击分类或标签会提示”Cannot GET /categories/“和”Cannot GET /tags/”。</p>
<ol>
<li><p>分类：</p>
<p>进入hexo博客所在的根目录，输入如下命令：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page categories</span><br></pre></td></tr></table></figure>

<p>成功后提示：</p>
</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">INFO  Created: HEXO_ROOT\source\categories\index.md</span><br></pre></td></tr></table></figure>

<p>index.md的内容如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: <span class="number">2019</span><span class="number">-07</span><span class="number">-14</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">10</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>这个index.md可以认为是存放分类的一个文档，只是type不同。修改为如下内容：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: <span class="number">2019</span><span class="number">-07</span><span class="number">-14</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">10</span></span><br><span class="line">type: <span class="string">&quot;categories&quot;</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>找到source/_posts路径下的markdown文章，并修改其categories属性。以hexo自带的hexo-world.md为例，文件头修改为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: <span class="number">2019</span><span class="number">-06</span><span class="number">-28</span> <span class="number">22</span>:<span class="number">36</span>:<span class="number">00</span></span><br><span class="line">categories: hexo</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此时，点击菜单栏中的“分类”，即可看到新建的“hexo”分类。</p>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>标签创建与分类类似，在控制台中输入如下命令：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page tags</span><br><span class="line">INFO  Created: HEXO_ROOT\source\tags\index.md</span><br></pre></td></tr></table></figure>

<p>tags/index.md内容与分类类似，修改为如下内容：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: <span class="number">2019</span><span class="number">-07</span><span class="number">-14</span> <span class="number">18</span>:<span class="number">19</span>:<span class="number">31</span></span><br><span class="line">type: <span class="string">&quot;tags&quot;</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>同样在hello-world.md增加标签内容：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: <span class="number">2019</span><span class="number">-06</span><span class="number">-28</span> <span class="number">22</span>:<span class="number">36</span>:<span class="number">00</span></span><br><span class="line">categories: hexo</span><br><span class="line">tags:</span><br><span class="line">  - hexo</span><br><span class="line">  - others</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h2 id="Hexo-NexT主题添加点击爱心效果"><a href="#Hexo-NexT主题添加点击爱心效果" class="headerlink" title="Hexo NexT主题添加点击爱心效果"></a>Hexo NexT主题添加点击爱心效果</h2><ol>
<li><p>创建js文件</p>
<p>在<code>/themes/next/source/js/src</code>下新建文件<code>clicklove.js</code>，接着把该代码拷贝粘贴到<code>clicklove.js</code>文件中。<br>代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">&quot;left:&quot;</span>+d[e].x+<span class="string">&quot;px;top:&quot;</span>+d[e].y+<span class="string">&quot;px;opacity:&quot;</span>+d[e].alpha+<span class="string">&quot;;transform:scale(&quot;</span>+d[e].scale+<span class="string">&quot;,&quot;</span>+d[e].scale+<span class="string">&quot;) rotate(45deg);background:&quot;</span>+d[e].color+<span class="string">&quot;;z-index:99999&quot;</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">&quot;function&quot;</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">&quot;div&quot;</span>);a.className=<span class="string">&quot;heart&quot;</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX-<span class="number">5</span>,<span class="attr">y</span>:e.clientY-<span class="number">5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">&quot;style&quot;</span>);a.type=<span class="string">&quot;text/css&quot;</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">&quot;rgb(&quot;</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">&quot;,&quot;</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">&quot;,&quot;</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">&quot;)&quot;</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="built_in">setTimeout</span>(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>修改_layout.swig</p>
</li>
</ol>
<p>在<code>\themes\next\layout\_layout.swig</code>文件末尾添加：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/src/clicklove.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h2><ol>
<li><p>新建</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">&quot;my blog&quot;</span></span><br></pre></td></tr></table></figure>

<p>新建的文件在 hexo/source/_posts/my-blog.md</p>
</li>
<li><p>生成静态页面</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件</p>
</li>
<li><p>开启本地服务</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></li>
<li><p>部署</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>部署到git上的时候，需要用这个命令，下一篇中，我们会使用到这个命令</p>
</li>
<li><p>清除 public</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<p>当 source 文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。</p>
</li>
</ol>
<h2 id="添加阅读全文按钮"><a href="#添加阅读全文按钮" class="headerlink" title="添加阅读全文按钮"></a>添加阅读全文按钮</h2><!--more-->

]]></content>
      <categories>
        <category>教程类</category>
      </categories>
  </entry>
  <entry>
    <title>jQuery中的事件与动画</title>
    <url>/2021/07/23/jQuery%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E4%B8%8E%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<h1 id="网页中的事件"><a href="#网页中的事件" class="headerlink" title="网页中的事件"></a>网页中的事件</h1><p>和WinForm一样，在网页中的交互也是需要事件来实现的，例如tab切换效果，可以通过鼠标单击事件来实现</p>
<span id="more"></span>

<h1 id="jQuery中的事件"><a href="#jQuery中的事件" class="headerlink" title="jQuery中的事件"></a>jQuery中的事件</h1><p>​    jQuery事件是对JavaScript事件的封装，常用事件分类</p>
<ul>
<li><h2 id="基础事件"><a href="#基础事件" class="headerlink" title="基础事件"></a>基础事件</h2><ul>
<li><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><ul>
<li><p>鼠标事件是当用户在文档上移动或单击鼠标时而产生的事件</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
<th>执行时机</th>
</tr>
</thead>
<tbody><tr>
<td>click( )</td>
<td>触发或将函数绑定到指定元素的click事件</td>
<td>单击鼠标时</td>
</tr>
<tr>
<td>mouseover( )</td>
<td>触发或将函数绑定到指定元素的mouseover事件</td>
<td>鼠标指针移过时</td>
</tr>
<tr>
<td>mouseout( )</td>
<td>触发或将函数绑定到指定元素的mouseout事件</td>
<td>鼠标指针移出时</td>
</tr>
<tr>
<td>mouseenter( )</td>
<td>触发或将函数绑定到指定元素的mouseenter事件</td>
<td>鼠标指针进入时</td>
</tr>
<tr>
<td>mouseleave( )</td>
<td>触发或将函数绑定到指定元素的mouseleave事件</td>
<td>鼠标指针离开时</td>
</tr>
</tbody></table>
</li>
<li><p>鼠标事件方法的区别</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>相同点</th>
<th>不同点</th>
</tr>
</thead>
<tbody><tr>
<td>mouseover( )</td>
<td>鼠标进入被选元素时会触发</td>
<td>鼠标在其被选元素的子元素上来回进入时：  触发mouseover( )  不触发mouseenter</td>
</tr>
<tr>
<td>mouseenter( )</td>
<td></td>
<td></td>
</tr>
<tr>
<td>mouseout( )</td>
<td>鼠标离开被选元素时会触发</td>
<td>鼠标在其被选元素的子元素上来回离开时：  触发mouseout  不触发mouseleave</td>
</tr>
<tr>
<td>mouseleave( )</td>
<td></td>
<td></td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><ul>
<li><p>用户每次按下或者释放键盘上的键时都会产生事件，常用键盘事件</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
<th>执行时机</th>
</tr>
</thead>
<tbody><tr>
<td>keydown( )</td>
<td>触发或将函数绑定到指定元素的keydown事件</td>
<td>按下键盘时</td>
</tr>
<tr>
<td>keyup( )</td>
<td>触发或将函数绑定到指定元素的keyup事件</td>
<td>释放按键时</td>
</tr>
<tr>
<td>keypress( )</td>
<td>触发或将函数绑定到指定元素的keypress事件</td>
<td>产生可打印的字符时</td>
</tr>
</tbody></table>
</li>
<li><p>以键盘事件为例，实现按键时特效</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> $(<span class="string">&quot;[type=password]&quot;</span>).<span class="comment">//(function () &#123;  //keyup当释放键盘时</span></span><br><span class="line">	$(<span class="string">&quot;#events&quot;</span>).append(<span class="string">&quot;keyup&quot;</span>);</span><br><span class="line">      &#125;).keydown(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;	<span class="comment">//keydown当按下键盘时</span></span><br><span class="line">	$(<span class="string">&quot;#events&quot;</span>).append(<span class="string">&quot;keydown&quot;</span>);</span><br><span class="line">      &#125;).keypress(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//keypress向密码框输入字符时</span></span><br><span class="line">	$(<span class="string">&quot;#events&quot;</span>).append(<span class="string">&quot;keypress&quot;</span>);</span><br><span class="line">     &#125;);</span><br><span class="line">$(<span class="built_in">document</span>).keydown(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">	 <span class="keyword">if</span> (event.keyCode == <span class="string">&quot;13&quot;</span>) &#123;<span class="comment">//event.keyCode按回车键时</span></span><br><span class="line">		alert(<span class="string">&quot;确认要提交么？&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h3 id="window事件"><a href="#window事件" class="headerlink" title="window事件"></a>window事件</h3><ul>
<li><p>~~~js<br> $(selector).resize( );</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    - 调整窗口大小时，完成页面特效</span><br><span class="line"></span><br><span class="line">  - ### 表单事件</span><br><span class="line"></span><br><span class="line">- ## 复合事件</span><br><span class="line"></span><br><span class="line">  - ### 鼠标光标悬停</span><br><span class="line"></span><br><span class="line">  - ### 鼠标连续点击</span><br><span class="line"></span><br><span class="line">- ## 绑定事件与移除事件</span><br><span class="line"></span><br><span class="line">  - ### 绑定事件</span><br><span class="line"></span><br><span class="line">    ~~~js</span><br><span class="line">     bind(type,[data],fn);	//type 事件类型，主要包括click、mouseover、mouseout等基础事件，此外，还可以是自定义事件</span><br><span class="line">    		//[date]可选函数</span><br><span class="line">    		//fn 处理函数</span><br></pre></td></tr></table></figure></li>
<li><p>绑定单个事件</p>
<ul>
<li><p>使用绑定实现鼠标移至“我的当当”显示二级菜单</p>
<p><img src="/2021/07/23/jQuery%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E4%B8%8E%E5%8A%A8%E7%94%BB/image-20210723152859749.png" alt="image-20210723152859749"></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	$(<span class="string">&quot;.on&quot;</span>).bind(<span class="string">&quot;mouseover&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		$(<span class="string">&quot;.topDown&quot;</span>).show();</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>同时绑定多个事件</p>
<p>使用绑定多个事件实现“我的当当” 二级菜单的显示和隐藏</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.top-m .on&quot;</span>).bind(&#123;</span><br><span class="line">	<span class="attr">mouseover</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//为mouseover绑定方法</span></span><br><span class="line">		$(<span class="string">&quot;.topDown&quot;</span>).show();</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">mouseout</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//为mouseout绑定方法</span></span><br><span class="line">		$(<span class="string">&quot;.topDown&quot;</span>).hide();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h3 id="移除事件"><a href="#移除事件" class="headerlink" title="移除事件"></a>移除事件</h3><p>移除事件使用unbind()方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">unbind([type],[fn]);<span class="comment">//fn是处理函数</span></span><br><span class="line">	<span class="comment">//事件类型，主要包括：blur、focus、click、mouseout等基础事件，此外，还可以是自定义事件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    当unbind()不带参数时，表示移除所绑定的全部事件</p>
<p><strong>Tab切换页面</strong></p>
<p><img src="/2021/07/23/jQuery%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E4%B8%8E%E5%8A%A8%E7%94%BB/image-20210723153124287.png" alt="image-20210723153124287"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#del&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">&quot;#nav li:first&quot;</span>).unbind(<span class="string">&quot;click&quot;</span>, content1)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h2 id="复合事件"><a href="#复合事件" class="headerlink" title="复合事件"></a>复合事件</h2><ul>
<li><h3 id="hover-方法"><a href="#hover-方法" class="headerlink" title="hover( )方法"></a>hover( )方法</h3><ul>
<li><p>hover()方法相当于mouseover与mouseout事件的组合</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hover(enter,leave);</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例</span></span><br><span class="line">$(<span class="string">&quot;.top-m .on&quot;</span>).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	$(<span class="string">&quot;.topDown&quot;</span>).show();</span><br><span class="line">          &#125;,<span class="comment">//光标移入时触发</span></span><br><span class="line">         <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	 $(<span class="string">&quot;.topDown&quot;</span>).hide();</span><br><span class="line">         &#125;<span class="comment">//光标移出时触发</span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h3 id="toggle-方法"><a href="#toggle-方法" class="headerlink" title="toggle( )方法"></a>toggle( )方法</h3><ul>
<li><p>toggle()方法用于模拟鼠标连续click事件</p>
</li>
<li><p>~~~js<br>toggle(fn1,fn2,…,fnN);</p>
<p>//示例<br>$(“input”).toggle(</p>
<pre><code>    function()&#123;$(&quot;body&quot;).css(&quot;background&quot;,&quot;#ff0000&quot;);&#125;,
     function()&#123;$(&quot;body&quot;).css(&quot;background&quot;,&quot;#00ff00&quot;);&#125;,
      function()&#123;$(&quot;body&quot;).css(&quot;background&quot;,&quot;#0000ff&quot;);&#125;
)
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- toggle()方法不带参数，与show( )和hide( )方法作用一样</span><br><span class="line"></span><br><span class="line">  ~~~js</span><br><span class="line">  toggle( );</span><br></pre></td></tr></table></figure></li>
<li><p>toggleClass( )可以对样式进行切换</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">toggleClass(className);</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例</span></span><br><span class="line">$(<span class="string">&quot;input&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;$(<span class="string">&quot;p&quot;</span>).toggleClass(<span class="string">&quot;red&quot;</span>);&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h3 id="toggle-和toggleClass-总结"><a href="#toggle-和toggleClass-总结" class="headerlink" title="toggle( )和toggleClass( )总结"></a>toggle( )和toggleClass( )总结</h3><ul>
<li><strong>toggle( fn1,fn2…)实现单击事件的切换，无须额外绑定click事件</strong></li>
<li><strong>toggle( )实现事件触发对象在显示和隐藏状态之间切换</strong></li>
<li><strong>toggleClass( )实现事件触发对象在加载某个样式和移除某个样式之间切换</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="jQuery动画效果"><a href="#jQuery动画效果" class="headerlink" title="jQuery动画效果"></a>jQuery动画效果</h1><ul>
<li><h3 id="控制元素显示与隐藏"><a href="#控制元素显示与隐藏" class="headerlink" title="控制元素显示与隐藏"></a>控制元素显示与隐藏</h3><ul>
<li><p>show() 控制元素的显示，hide( )控制元素的隐藏</p>
   <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(selector).show([speed],[callback])</span><br><span class="line">$(selector).hide([speed],[callback])</span><br><span class="line">	<span class="comment">//[speed]可选。表示速度，默认为“0”，可能值：毫秒（如1000）、slow、normal、fast</span></span><br><span class="line">	<span class="comment">//[callback]可选。show函数执行完之后，要执行的函数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h3 id="改变元素的透明度"><a href="#改变元素的透明度" class="headerlink" title="改变元素的透明度"></a>改变元素的透明度</h3><ul>
<li><p>fadeIn()和fadeOut()可以通过改变元素的透明度实现淡入淡出效果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(selector).fadeIn([speed],[callback])</span><br><span class="line">$(selector).fadeOut([speed],[callback])</span><br><span class="line">	<span class="comment">//[speed] 可选。表示速度，默认为“0”，可能值：毫秒（如1000）、slow、normal、fast</span></span><br><span class="line">	<span class="comment">//[callback]  可选。show函数执行完之后，要执行的函数</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h3 id="改变元素高度"><a href="#改变元素高度" class="headerlink" title="改变元素高度"></a>改变元素高度</h3><ul>
<li><p>slideDown() 可以使元素逐步延伸显示</p>
</li>
<li><p>slideUp()则使元素逐步缩短直至隐藏</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(selector).slideUp ([speed],[callback])</span><br><span class="line">$(selector).slideDown ([speed],[callback])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//示例</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       $(<span class="string">&quot;h2&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	   $(<span class="string">&quot;.txt&quot;</span>).slideUp(<span class="string">&quot;slow&quot;</span>);</span><br><span class="line">	   $(<span class="string">&quot;.txt&quot;</span>).slideDown(<span class="string">&quot;slow&quot;</span>);</span><br><span class="line">       &#125;);</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h3 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(selector). animate(&#123;params&#125;,speed,callback)</span><br><span class="line">	<span class="comment">//params  必须，定义形成动画的CSS属性</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/23/jQuery%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E4%B8%8E%E5%8A%A8%E7%94%BB/image-20210723153828540.png" alt="image-20210723153828540"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moveMan</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> stickW = $(<span class="string">&quot;.stick&quot;</span>).width();<span class="comment">//获取倒下棍子的长度</span></span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       $(<span class="string">&quot;.man&quot;</span>).find(<span class="string">&quot;img&quot;</span>).attr(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;images/stick.gif&quot;</span>);</span><br><span class="line">       $(<span class="string">&quot;.man&quot;</span>).find(<span class="string">&quot;img&quot;</span>).animate(&#123;<span class="string">&quot;left&quot;</span>:stickW+<span class="string">&quot;px&quot;</span>&#125;,<span class="number">1000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">var</span> wellL = $(<span class="string">&quot;.well&quot;</span>).eq(<span class="number">1</span>).offset().left;<span class="comment">//柱子距离屏幕左侧的距离</span></span><br><span class="line">        <span class="keyword">var</span> well0 = $(<span class="string">&quot;.well&quot;</span>).eq(<span class="number">0</span>).offset().left;<span class="comment">//柱子距离屏幕左侧的距离</span></span><br><span class="line">        colWidth= $(<span class="string">&quot;.well&quot;</span>).eq(<span class="number">0</span>).width();</span><br><span class="line">        <span class="keyword">var</span> range = wellL-well0-colWidth;<span class="comment">//获取两个柱子之间的距离</span></span><br><span class="line">        <span class="keyword">if</span>( (stickW &lt; range) || (stickW &gt; wellL))&#123; <span class="comment">//判断人物是否落下</span></span><br><span class="line">            $(<span class="string">&quot;.man&quot;</span>).animate(&#123;<span class="string">&quot;bottom&quot;</span>:<span class="string">&quot;0px&quot;</span>&#125;);</span><br><span class="line">           &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;$(<span class="string">&quot;.man&quot;</span>).find(<span class="string">&quot;img&quot;</span>).attr(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;images/stick_stand.png&quot;</span>).css(&#123;<span class="string">&quot;left&quot;</span>:<span class="number">0</span>&#125;).hide();</span><br><span class="line">          $(<span class="string">&quot;.stick&quot;</span>).removeClass(<span class="string">&quot;stickDown&quot;</span>).width(<span class="number">0</span>);<span class="comment">//棍子变为初始</span></span><br><span class="line">           <span class="keyword">var</span> oldL = $(<span class="string">&quot;.well-box&quot;</span>).offset().left;</span><br><span class="line">           $(<span class="string">&quot;.well-box&quot;</span>).animate(&#123;<span class="string">&quot;left&quot;</span>:-wellL+oldL&#125;,<span class="number">500</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//柱子移动</span></span><br><span class="line">           $(<span class="string">&quot;.man&quot;</span>).find(<span class="string">&quot;img&quot;</span>).show();</span><br><span class="line">            stop = <span class="literal">false</span>;<span class="comment">//按钮不可以单击</span></span><br><span class="line">    &#125;); </span><br><span class="line">         &#125; &#125;);</span><br><span class="line">            &#125;,<span class="number">600</span>);&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           </span><br><span class="line">           </span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="/2021/07/23/jQuery%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E4%B8%8E%E5%8A%A8%E7%94%BB/image-20210723153940283.png" alt="image-20210723153940283"></p>
]]></content>
      <categories>
        <category>使用jQuery快速高效制作网页交互特效</category>
      </categories>
  </entry>
  <entry>
    <title>jsp+jdbc增删改查</title>
    <url>/2021/08/23/jsp-jdbc%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
    <content><![CDATA[<p>jsp+jdbc的增删改查</p>
<p>开发工具是MyEclipse</p>
<span id="more"></span>

<h1 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h1><p><img src="/2021/08/23/jsp-jdbc%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/image-20210822213501356.png" alt="image-20210822213501356"></p>
<h1 id="具体代码-从上到下"><a href="#具体代码-从上到下" class="headerlink" title="具体代码 从上到下"></a>具体代码 从上到下</h1><h2 id="dao-impl-表名DaoImpl-java"><a href="#dao-impl-表名DaoImpl-java" class="headerlink" title="dao.impl.表名DaoImpl.java"></a>dao.impl.表名DaoImpl.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> dao.表名Dao;</span><br><span class="line"><span class="keyword">import</span> entity.表名;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 表名<span class="title">DaoImpl</span> <span class="keyword">extends</span> <span class="title">BaseDao</span> <span class="keyword">implements</span> 表名<span class="title">Dao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span><span class="comment">//无条件查询全部</span></span><br><span class="line">	<span class="keyword">public</span> List&lt;表名&gt; getAll() &#123;</span><br><span class="line">		List&lt;表名&gt; list=<span class="keyword">new</span> ArrayList&lt;表名&gt;();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			String sql=<span class="string">&quot;select * from 表名&quot;</span>;<span class="comment">//sql语句</span></span><br><span class="line">			<span class="keyword">super</span>.executeQuery(sql);<span class="comment">//带上sql语句</span></span><br><span class="line">			<span class="keyword">while</span> (rs.next()) &#123;<span class="comment">//吧查询到的结果集拿过来</span></span><br><span class="line">				表名 p=<span class="keyword">new</span> 表名();<span class="comment">//定义集合放进去</span></span><br><span class="line">				p.setpId(rs.getInt(<span class="string">&quot;列名&quot;</span>));</span><br><span class="line">				p.setpName(rs.getString(<span class="string">&quot;列名&quot;</span>));</span><br><span class="line">				p.setPrice(rs.getFloat(<span class="string">&quot;列名&quot;</span>));</span><br><span class="line">				list.add(p);<span class="comment">//吧这一条数据放在集合里</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			<span class="keyword">super</span>.CloseAll();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> list;<span class="comment">//返回出去</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span><span class="comment">//新增</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(表名 p)</span> </span>&#123;</span><br><span class="line">		String sql=<span class="string">&quot;insert into 表名 (列名,列名) value (?,?)&quot;</span>;<span class="comment">//sql语句</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.executeUpdate(sql, p.getpName(),p.getPrice());<span class="comment">//放入sql语句  根据?的数据带上相应的参数  顺序一定要对应</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span><span class="comment">//根据id查询信息  id是主键 所以说只要返回一个对象就行了</span></span><br><span class="line">	<span class="keyword">public</span> 表名 getById(<span class="keyword">int</span> pId) &#123;</span><br><span class="line">		表名 p=<span class="keyword">null</span>;<span class="comment">//首先定义一个对象 如果没有直接返回null   后面好判断是否查得到</span></span><br><span class="line">		<span class="keyword">try</span> &#123;<span class="comment">//try catch finally不能少</span></span><br><span class="line">			String sql=<span class="string">&quot;select * from 表名 where 主键=?&quot;</span>;<span class="comment">//sql语句不能少  条件就是id  主键 这并不是写的id  是数据库里的主键 看好了......</span></span><br><span class="line">			<span class="keyword">super</span>.executeQuery(sql,pId);<span class="comment">//sql  后面得带上id  括号里的参数  一定要带,不然后面报错都不好找在哪报错的!!!!!</span></span><br><span class="line">			<span class="keyword">while</span> (rs.next()) &#123;<span class="comment">//跟查询一样的  有能力就复制,没有能力的自己敲</span></span><br><span class="line">				p=<span class="keyword">new</span> 表名();		<span class="comment">//给上面定义的对象new一下</span></span><br><span class="line">				p.setpId(rs.getInt(<span class="string">&quot;列名&quot;</span>));	<span class="comment">//放入值</span></span><br><span class="line">				p.setpName(rs.getString(<span class="string">&quot;列名&quot;</span>));</span><br><span class="line">				p.setPrice(rs.getFloat(<span class="string">&quot;列名&quot;</span>));</span><br><span class="line">				<span class="comment">//这个地方不跟查一样了  上面没有集合  所以说不用add了</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			<span class="keyword">super</span>.CloseAll();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> p;<span class="comment">//返回集合</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(表名 p)</span> </span>&#123;</span><br><span class="line">		String sql=<span class="string">&quot;update 表名 set 列名=?,列名=? where 主键=?&quot;</span>;<span class="comment">//sql语句</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.executeUpdate(sql,  p.getpName(),p.getPrice(),p.getpId());<span class="comment">//放入sql语句  根据?的数据带上相应的参数  顺序一定要对应</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> pId)</span> </span>&#123;</span><br><span class="line">		String sql=<span class="string">&quot;delete from 表名 where 列名=?&quot;</span>;<span class="comment">//sql语句</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.executeUpdate(sql, pId);<span class="comment">//放入sql语句  根据?的数据带上相应的参数  这里只要写一个id就行</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="dao-BaseDao-jsp"><a href="#dao-BaseDao-jsp" class="headerlink" title="dao.BaseDao.jsp"></a>dao.BaseDao.jsp</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="comment">//这个页面不需要说太多,,能敲出来就行  敲不出来应急  只有一处需要改的</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDao</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String Driver=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String url=<span class="string">&quot;jdbc:mysql://localhost:3306/数据库名&quot;</span>;<span class="comment">//只有这里需要改的!!!!!!</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String user=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String password=<span class="string">&quot;ok&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">protected</span> Connection conn=<span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">protected</span> PreparedStatement pstmt=<span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">protected</span> ResultSet rs=<span class="keyword">null</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Class.forName(Driver);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(conn==<span class="keyword">null</span>||conn.isClosed())&#123;</span><br><span class="line">			conn=DriverManager.getConnection(url, user, password);</span><br><span class="line">		&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CloseAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>(rs!=<span class="keyword">null</span>)&#123;</span><br><span class="line">				rs.close();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(pstmt!=<span class="keyword">null</span>)&#123;</span><br><span class="line">				pstmt.close();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (conn!=<span class="keyword">null</span>) &#123;</span><br><span class="line">				conn.close();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">executeUpdate</span><span class="params">(String sql,Object...o)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			getConnection();</span><br><span class="line">			pstmt=conn.prepareStatement(sql);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; o.length; i++) &#123;</span><br><span class="line">				pstmt.setObject((i+<span class="number">1</span>), o[i]);</span><br><span class="line">			&#125;</span><br><span class="line">			count=pstmt.executeUpdate();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			CloseAll();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> count;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeQuery</span><span class="params">(String sql,Object...o)</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			getConnection();</span><br><span class="line">			pstmt=conn.prepareStatement(sql);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; o.length; i++) &#123;</span><br><span class="line">				pstmt.setObject((i+<span class="number">1</span>), o[i]);</span><br><span class="line">			&#125;</span><br><span class="line">			rs=pstmt.executeQuery();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="dao-表名Dao-java"><a href="#dao-表名Dao-java" class="headerlink" title="dao.表名Dao.java"></a>dao.表名Dao.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> entity.表名;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 表名<span class="title">Dao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	List&lt;表名&gt; getAll();  <span class="comment">//查询</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(表名 p)</span></span>;	<span class="comment">//新增</span></span><br><span class="line"></span><br><span class="line">	表名 getById(<span class="keyword">int</span> 主键);<span class="comment">//根据主键查询数据</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(表名 p)</span></span>;	<span class="comment">//修改</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> 主键)</span></span>;	<span class="comment">//删除</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>entity.表名.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> entity.表名;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 表名<span class="title">Dao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	List&lt;表名&gt; getAll();  <span class="comment">//查询</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(表名 p)</span></span>;	<span class="comment">//新增</span></span><br><span class="line"></span><br><span class="line">	表名 getById(<span class="keyword">int</span> 主键);<span class="comment">//根据主键查询数据</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(表名 p)</span></span>;	<span class="comment">//修改</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> 主键)</span></span>;	<span class="comment">//删除</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="service-impl-表名ServerImpl-java"><a href="#service-impl-表名ServerImpl-java" class="headerlink" title="service.impl.表名ServerImpl.java"></a>service.impl.表名ServerImpl.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> service.表名Server;</span><br><span class="line"><span class="keyword">import</span> dao.impl.表名DaoImpl;</span><br><span class="line"><span class="keyword">import</span> entity.表名;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 表名<span class="title">ServerImpl</span> <span class="keyword">implements</span> 表名<span class="title">Server</span></span>&#123;</span><br><span class="line"><span class="comment">//固定语法  直接照抄</span></span><br><span class="line">	表名DaoImpl dao=<span class="keyword">new</span> 表名DaoImpl();</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> List&lt;表名&gt; getAll() &#123;</span><br><span class="line">		<span class="keyword">return</span> dao.getAll();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(表名 p)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> dao.add(p);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> 表名 getById(<span class="keyword">int</span> pId) &#123;</span><br><span class="line">		<span class="keyword">return</span> dao.getById(pId);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(表名 p)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> dao.update(p);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> pId)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> dao.delete(pId);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="service-表名Server-java"><a href="#service-表名Server-java" class="headerlink" title="service.表名Server.java"></a>service.表名Server.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> entity.表名;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 表名<span class="title">Server</span> </span>&#123;<span class="comment">//直接复制</span></span><br><span class="line">	List&lt;表名&gt; getAll();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(表名 p)</span></span>;</span><br><span class="line"></span><br><span class="line">	表名 getById(<span class="keyword">int</span> pId);</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(表名 p)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> pId)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="jsp页面"><a href="#jsp页面" class="headerlink" title="jsp页面"></a>jsp页面</h1><h2 id="do页面"><a href="#do页面" class="headerlink" title="do页面"></a>do页面</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;service.impl.表名ServerImpl&quot;</span>%&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;entity.表名&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span> pageEncoding=<span class="string">&quot;utf-8&quot;</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">	<span class="comment">//这两行必写</span></span><br><span class="line">	request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">	response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//声明service实现类</span></span><br><span class="line">	表名ServerImpl server=<span class="keyword">new</span> 表名ServerImpl();</span><br><span class="line">	<span class="comment">//接收</span></span><br><span class="line">	String op=request.getParameter(<span class="string">&quot;op&quot;</span>);</span><br><span class="line">	<span class="comment">//对接收过来的值进行判断,要干什么的去干什么</span></span><br><span class="line">	<span class="keyword">if</span>(op==<span class="keyword">null</span>|op.equals(<span class="string">&quot;list&quot;</span>))&#123;</span><br><span class="line">		<span class="comment">//	查询</span></span><br><span class="line">		<span class="comment">//声明集合 接收查询来的数据</span></span><br><span class="line">		List&lt;表名&gt; list=server.getAll();</span><br><span class="line">		<span class="comment">//吧集合存到request里 </span></span><br><span class="line">		request.setAttribute(<span class="string">&quot;list&quot;</span>, list);</span><br><span class="line">		<span class="comment">//转发走  转发的固定语句</span></span><br><span class="line">		request.getRequestDispatcher(<span class="string">&quot;index.jsp&quot;</span>).forward(request, response);</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op.equals(<span class="string">&quot;add&quot;</span>))&#123;</span><br><span class="line">		<span class="comment">//新增</span></span><br><span class="line">		<span class="comment">//接收新增页面的文本框里的内容 有多少接收多少</span></span><br><span class="line">		String pName=request.getParameter(<span class="string">&quot;列名&quot;</span>);</span><br><span class="line">		<span class="comment">//根据数据库里的内容进行强转</span></span><br><span class="line">		<span class="keyword">float</span> price=Float.parseFloat(request.getParameter(<span class="string">&quot;列名&quot;</span>));</span><br><span class="line">		<span class="comment">//声明一个对象</span></span><br><span class="line">		表名 p=<span class="keyword">new</span> 表名();</span><br><span class="line">		<span class="comment">//把除了主键外的列全部存入对象里</span></span><br><span class="line">		p.setpName(pName);</span><br><span class="line">		p.setPrice(price);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//吧取来的值放入对象后 进行新增操作</span></span><br><span class="line">		<span class="keyword">int</span> result=server.add(p);</span><br><span class="line">		<span class="comment">//新增完成之后进行结果判断</span></span><br><span class="line">		<span class="keyword">if</span>(result&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="comment">//打印js语句  这边也是固定语法,直接套模板</span></span><br><span class="line">			<span class="comment">//out.print(&quot;&lt;script&gt;alert(&#x27;要提示的内容 什么什么成功 什么什么失败&#x27;); location.href=&#x27; 之后需要跳转的网页 &#x27;&lt;/script&gt;&quot;);</span></span><br><span class="line">			out.print(<span class="string">&quot;&lt;script&gt;alert(&#x27;新增成功&#x27;); location.href=&#x27;index.jsp&#x27;&lt;/script&gt;&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			out.print(<span class="string">&quot;&lt;script&gt;alert(&#x27;新增失败&#x27;); location.href=&#x27;add.jsp&#x27;&lt;/script&gt;&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op.equals(<span class="string">&quot;toupdate&quot;</span>))&#123;</span><br><span class="line">		<span class="comment">//取到值放入update页面</span></span><br><span class="line">		<span class="comment">//取到传过来的id值</span></span><br><span class="line">		<span class="keyword">int</span> pId=Integer.parseInt(request.getParameter(<span class="string">&quot;列名&quot;</span>));</span><br><span class="line">		<span class="comment">//然后定义对象接收根据id查来的数据</span></span><br><span class="line">		表名 p=server.getById(pId);</span><br><span class="line">		<span class="comment">//放入request里</span></span><br><span class="line">		request.setAttribute(<span class="string">&quot;p&quot;</span>, p);</span><br><span class="line">		<span class="comment">//转发走</span></span><br><span class="line">		request.getRequestDispatcher(<span class="string">&quot;update.jsp&quot;</span>).forward(request, response);</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op.equals(<span class="string">&quot;update&quot;</span>))&#123;</span><br><span class="line">		<span class="comment">//修改页面</span></span><br><span class="line">		<span class="comment">//接收该页面所有的值   数据库里表里的所有列都应该接收</span></span><br><span class="line">		<span class="keyword">int</span> pId=Integer.parseInt(request.getParameter(<span class="string">&quot;列名&quot;</span>));</span><br><span class="line">		<span class="comment">//同时根据不用的列进行强转</span></span><br><span class="line">		String pName=request.getParameter(<span class="string">&quot;列名&quot;</span>);</span><br><span class="line">		<span class="keyword">float</span> price=Float.parseFloat(request.getParameter(<span class="string">&quot;列名&quot;</span>));</span><br><span class="line">		<span class="comment">//以上这3行,就是基本的会考到的强转,</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//定义对象 放入对象 </span></span><br><span class="line">		表名 p=<span class="keyword">new</span> 表名();</span><br><span class="line">		<span class="comment">//放入都是固定语法</span></span><br><span class="line">		p.setpId(pId);</span><br><span class="line">		p.setpName(pName);</span><br><span class="line">		p.setPrice(price);</span><br><span class="line">		<span class="comment">//进行修改操作</span></span><br><span class="line">		<span class="keyword">int</span> result=server.update(p);</span><br><span class="line">		<span class="comment">//对返回的值进行判断</span></span><br><span class="line">		<span class="keyword">if</span>(result&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="comment">//给出提示信息</span></span><br><span class="line">			out.print(<span class="string">&quot;&lt;script&gt;alert(&#x27;修改成功&#x27;); location.href=&#x27;index.jsp&#x27;&lt;/script&gt;&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">//也是固定语法</span></span><br><span class="line">			out.print(<span class="string">&quot;&lt;script&gt;alert(&#x27;修改失败&#x27;); location.href=&#x27;index.jsp&#x27;&lt;/script&gt;&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op.equals(<span class="string">&quot;delete&quot;</span>))&#123;</span><br><span class="line">		<span class="comment">//删除</span></span><br><span class="line">		<span class="comment">//接收传来的id</span></span><br><span class="line">		<span class="keyword">int</span> pId=Integer.parseInt(request.getParameter(<span class="string">&quot;列名&quot;</span>));</span><br><span class="line">		<span class="comment">//进行删除操作</span></span><br><span class="line">		<span class="keyword">int</span> result=server.delete(pId);</span><br><span class="line">		<span class="comment">//判断结果</span></span><br><span class="line">		<span class="keyword">if</span>(result&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="comment">//给出提示</span></span><br><span class="line">			out.print(<span class="string">&quot;&lt;script&gt;alert(&#x27;删除成功&#x27;); location.href=&#x27;index.jsp&#x27;&lt;/script&gt;&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">//固定语法</span></span><br><span class="line">			out.print(<span class="string">&quot;&lt;script&gt;alert(&#x27;删除失败&#x27;); location.href=&#x27;index.jsp&#x27;&lt;/script&gt;&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查询页面</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;entity.表名&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span> pageEncoding=<span class="string">&quot;utf-8&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;title&gt;My JSP <span class="string">&#x27;index.jsp&#x27;</span> starting page&lt;/title&gt;</span><br><span class="line">	&lt;meta http-equiv=<span class="string">&quot;pragma&quot;</span> content=<span class="string">&quot;no-cache&quot;</span>&gt;</span><br><span class="line">	&lt;meta http-equiv=<span class="string">&quot;cache-control&quot;</span> content=<span class="string">&quot;no-cache&quot;</span>&gt;</span><br><span class="line">	&lt;meta http-equiv=<span class="string">&quot;expires&quot;</span> content=<span class="string">&quot;0&quot;</span>&gt;    </span><br><span class="line">	&lt;meta http-equiv=<span class="string">&quot;keywords&quot;</span> content=<span class="string">&quot;keyword1,keyword2,keyword3&quot;</span>&gt;</span><br><span class="line">	&lt;meta http-equiv=<span class="string">&quot;description&quot;</span> content=<span class="string">&quot;This is my page&quot;</span>&gt;</span><br><span class="line">	&lt;!--</span><br><span class="line">	&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> href=<span class="string">&quot;styles.css&quot;</span>&gt;</span><br><span class="line">	--&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;%</span><br><span class="line">  		<span class="comment">//取到request里的集合</span></span><br><span class="line">    	List&lt;表名&gt; list=(List&lt;表名&gt;)request.getAttribute(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">    	<span class="comment">//进行判断 如果为null 也不要往下面走了,,再走就报错了,,直接跳转会do页面</span></span><br><span class="line">      	<span class="keyword">if</span>(list==<span class="keyword">null</span>)&#123;<span class="comment">//跳转回do页面查询值,然后再过来的时候就有值了,就不用走这里了</span></span><br><span class="line">      		request.getRequestDispatcher(<span class="string">&quot;do表名.jsp?op=list&quot;</span>).forward(request, response);</span><br><span class="line">      		<span class="keyword">return</span>;<span class="comment">//这个地方不写就报错 必须写</span></span><br><span class="line">      	&#125;</span><br><span class="line">    %&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  	&lt;h1&gt;&lt;a href=<span class="string">&quot;add.jsp&quot;</span>&gt;新增&lt;/a&gt;&lt;/h1&gt;&lt;!-- 直接跳转到新增页面 --&gt;</span><br><span class="line">  	&lt;table border=<span class="string">&quot;1&quot;</span> width=<span class="string">&quot;300px&quot;</span>&gt;</span><br><span class="line">  		&lt;tr&gt;</span><br><span class="line">  			&lt;td&gt;编号&lt;/td&gt;</span><br><span class="line">  			&lt;td&gt;名称&lt;/td&gt;</span><br><span class="line">  			&lt;td&gt;价钱&lt;/td&gt;</span><br><span class="line">  			&lt;td&gt;操作&lt;/td&gt;</span><br><span class="line">  		&lt;/tr&gt;</span><br><span class="line">  		&lt;%<span class="comment">//固定格式</span></span><br><span class="line">  			<span class="keyword">for</span>(表名 p:list)&#123;</span><br><span class="line">  		%&gt;</span><br><span class="line">  		&lt;tr&gt;&lt;!-- 循环固定格式 --&gt;</span><br><span class="line">			&lt;td&gt;&lt;%=p.getpId() %&gt;&lt;/td&gt;</span><br><span class="line">			&lt;td&gt;&lt;%=p.getpName() %&gt;&lt;/td&gt;</span><br><span class="line">			&lt;td&gt;&lt;%=p.getPrice() %&gt;&lt;/td&gt;</span><br><span class="line">			&lt;td&gt;&lt;!-- 这也是固定格式直接跟写就行了  --&gt;</span><br><span class="line">				&lt;a href=<span class="string">&quot;do表名.jsp?op=toupdate&amp;id=&lt;%=p.getpId() %&gt;&quot;</span>&gt;修改&lt;/a&gt;</span><br><span class="line">				&lt;a href=<span class="string">&quot;#&quot;</span> onclick=<span class="string">&quot;del(&lt;%=p.getpId()%&gt;)&quot;</span>&gt;删除&lt;/a&gt;</span><br><span class="line">			&lt;/td&gt;  			</span><br><span class="line">  		&lt;/tr&gt;</span><br><span class="line">  		&lt;% &#125;%&gt;</span><br><span class="line">  		</span><br><span class="line">  	&lt;/table&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="function">function <span class="title">del</span><span class="params">(id)</span></span>&#123;<span class="comment">//这里也是 固定不变</span></span><br><span class="line">		<span class="keyword">if</span>(confirm(<span class="string">&quot;是否删除?&quot;</span>))&#123;</span><br><span class="line">			location.href=<span class="string">&quot;do表名.jsp?use=delete&amp;id=&quot;</span>+id;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>修改页面</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;entity.表名&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span> pageEncoding=<span class="string">&quot;utf-8&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;title&gt;My JSP <span class="string">&#x27;add.jsp&#x27;</span> starting page&lt;/title&gt;</span><br><span class="line">    </span><br><span class="line">	&lt;meta http-equiv=<span class="string">&quot;pragma&quot;</span> content=<span class="string">&quot;no-cache&quot;</span>&gt;</span><br><span class="line">	&lt;meta http-equiv=<span class="string">&quot;cache-control&quot;</span> content=<span class="string">&quot;no-cache&quot;</span>&gt;</span><br><span class="line">	&lt;meta http-equiv=<span class="string">&quot;expires&quot;</span> content=<span class="string">&quot;0&quot;</span>&gt;    </span><br><span class="line">	&lt;meta http-equiv=<span class="string">&quot;keywords&quot;</span> content=<span class="string">&quot;keyword1,keyword2,keyword3&quot;</span>&gt;</span><br><span class="line">	&lt;meta http-equiv=<span class="string">&quot;description&quot;</span> content=<span class="string">&quot;This is my page&quot;</span>&gt;</span><br><span class="line">	&lt;!--</span><br><span class="line">	&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> href=<span class="string">&quot;styles.css&quot;</span>&gt;</span><br><span class="line">	--&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;%</span><br><span class="line">  <span class="comment">//取到request  用对象接收</span></span><br><span class="line">  	表名 p=(表名)request.getAttribute(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">  %&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  	&lt;!-- 固定语法 --&gt;	</span><br><span class="line">	&lt;form action=<span class="string">&quot;do表名.jsp?op=update&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">		&lt;table&gt;&lt;!-- 这个是放id的也就是主键 value里是值 --&gt;</span><br><span class="line">			&lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;id&quot;</span> value=<span class="string">&quot;&lt;%=p.getpId()%&gt;&quot;</span>&gt;</span><br><span class="line">			&lt;tr&gt;</span><br><span class="line">				&lt;td&gt;名称:&lt;/td&gt;&lt;!-- 跟新增页面写的一样  可以直接复制 --&gt;</span><br><span class="line">				&lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;列名&quot;</span> value=<span class="string">&quot;&lt;%=p.getpName()%&gt;&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">			&lt;/tr&gt;</span><br><span class="line">			&lt;tr&gt;</span><br><span class="line">				&lt;td&gt;价钱:&lt;/td&gt;</span><br><span class="line">				&lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;列名&quot;</span> value=<span class="string">&quot;&lt;%=p.getPrice()%&gt;&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">			&lt;/tr&gt;</span><br><span class="line">			&lt;tr&gt;</span><br><span class="line">				&lt;td colspan=<span class="string">&quot;2&quot;</span>&gt;&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">			&lt;/tr&gt;</span><br><span class="line">			</span><br><span class="line">		&lt;/table&gt;</span><br><span class="line">	&lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>新增页面</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span> pageEncoding=<span class="string">&quot;utf-8&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;title&gt;My JSP <span class="string">&#x27;add.jsp&#x27;</span> starting page&lt;/title&gt;</span><br><span class="line">    </span><br><span class="line">	&lt;meta http-equiv=<span class="string">&quot;pragma&quot;</span> content=<span class="string">&quot;no-cache&quot;</span>&gt;</span><br><span class="line">	&lt;meta http-equiv=<span class="string">&quot;cache-control&quot;</span> content=<span class="string">&quot;no-cache&quot;</span>&gt;</span><br><span class="line">	&lt;meta http-equiv=<span class="string">&quot;expires&quot;</span> content=<span class="string">&quot;0&quot;</span>&gt;    </span><br><span class="line">	&lt;meta http-equiv=<span class="string">&quot;keywords&quot;</span> content=<span class="string">&quot;keyword1,keyword2,keyword3&quot;</span>&gt;</span><br><span class="line">	&lt;meta http-equiv=<span class="string">&quot;description&quot;</span> content=<span class="string">&quot;This is my page&quot;</span>&gt;</span><br><span class="line">	&lt;!--</span><br><span class="line">	&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> href=<span class="string">&quot;styles.css&quot;</span>&gt;</span><br><span class="line">	--&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;body&gt;&lt;!-- 定死的公式  --&gt;</span><br><span class="line">	&lt;form action=<span class="string">&quot;do表名.jsp?op=add&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">		&lt;table&gt;</span><br><span class="line">			&lt;tr&gt;</span><br><span class="line">				&lt;td&gt;名称:&lt;/td&gt;&lt;!-- 这一个网页 除了自增列(id 或者主键),其他全部接收 有多少写多少, name就取列名--&gt;</span><br><span class="line">				&lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;列名&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">			&lt;/tr&gt;</span><br><span class="line">			&lt;tr&gt;</span><br><span class="line">				&lt;td&gt;价钱:&lt;/td&gt;</span><br><span class="line">				&lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;列名&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">			&lt;/tr&gt;</span><br><span class="line">			&lt;tr&gt;&lt;!-- 提交按钮,,固定语法 --&gt;</span><br><span class="line">				&lt;td colspan=<span class="string">&quot;2&quot;</span>&gt;&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;注册&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">			&lt;/tr&gt;</span><br><span class="line">			</span><br><span class="line">		&lt;/table&gt;</span><br><span class="line">	&lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>使用JSP／Servlet技术开发新闻发布系统</category>
      </categories>
  </entry>
  <entry>
    <title>使用jQuery操作DOM</title>
    <url>/2021/07/30/%E4%BD%BF%E7%94%A8jQuery%E6%93%8D%E4%BD%9CDOM/</url>
    <content><![CDATA[<h1 id="DOM操作分类"><a href="#DOM操作分类" class="headerlink" title="DOM操作分类"></a>DOM操作分类</h1><ol>
<li><p>DOM操作分为三类：</p>
<ol>
<li>DOM Core：任何一种支持DOM的编程语言都可以使用它，如getElementById()</li>
<li>HTML-DOM：用于处理HTML文档，如document.forms</li>
<li>CSS-DOM：用于操作CSS，如element.style.color=”green”</li>
</ol>
</li>
<li><p>JavaScript用于对(x)html文档进行操作，它对这三类DOM操作都提供了支持</p>
</li>
<li><p>jQuery对JavaScript中的DOM操作进行了封装</p>
</li>
</ol>
<span id="more"></span>

<h1 id="Query中的DOM操作"><a href="#Query中的DOM操作" class="headerlink" title="Query中的DOM操作"></a>Query中的DOM操作</h1><ol>
<li><h2 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a>样式操作</h2><ol>
<li><h3 id="设置和获取样式值"><a href="#设置和获取样式值" class="headerlink" title="设置和获取样式值"></a>设置和获取样式值</h3></li>
<li><p>使用css()为指定的元素设置样式值或获取样式值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">css(name,value) ;<span class="comment">//设置单个属性</span></span><br><span class="line">或</span><br><span class="line">css(&#123;<span class="attr">name</span>:value, <span class="attr">name</span>:value,<span class="attr">name</span>:value…&#125;) ;<span class="comment">//同时设置多个属性</span></span><br><span class="line"></span><br><span class="line">css(name)<span class="comment">//获取属性值</span></span><br></pre></td></tr></table></figure>

<p>示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">this</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;5px solid #f5f5f5&quot;</span>);</span><br><span class="line">或</span><br><span class="line">$(<span class="built_in">this</span>).css(&#123;<span class="string">&quot;border&quot;</span>:<span class="string">&quot;5px solid #f5f5f5&quot;</span>,<span class="string">&quot;opacity&quot;</span>:<span class="string">&quot;0.5&quot;</span>&#125;);</span><br><span class="line"><span class="comment">//opacity 设置透明度</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="追加和移除样式"><a href="#追加和移除样式" class="headerlink" title="追加和移除样式"></a>追加和移除样式</h3><ol>
<li><h4 id="追加样式"><a href="#追加样式" class="headerlink" title="追加样式"></a>追加样式</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(selector).addClass(<span class="class"><span class="keyword">class</span>)</span>;</span><br><span class="line">或   $(selector).addClass(class1 class2 … classN);</span><br></pre></td></tr></table></figure></li>
<li><p>示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.text&#123; <span class="attr">padding</span>:10px;&#125;</span><br><span class="line">.content &#123;background-color:#FFFF00; &#125;</span><br><span class="line">.border &#123;<span class="attr">border</span>:1px dashed #<span class="number">333</span>; &#125;</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;h2&quot;</span>).mouseover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     $(<span class="string">&quot;p&quot;</span>).addClass(<span class="string">&quot;content border&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/30/%E4%BD%BF%E7%94%A8jQuery%E6%93%8D%E4%BD%9CDOM/image-20210730114644273.png" alt="image-20210730114644273"></p>
</li>
<li><h4 id="移除样式"><a href="#移除样式" class="headerlink" title="移除样式"></a>移除样式</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(selector).removeClass(<span class="string">&quot;class&quot;</span>) ;</span><br><span class="line">或   $(selector).removeClass(<span class="string">&quot;class1 class2 … classN &quot;</span>) ;</span><br></pre></td></tr></table></figure></li>
<li><p>示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;h2&quot;</span>).mouseout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&quot;p&quot;</span>).removeClass(<span class="string">&quot;text content&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/30/%E4%BD%BF%E7%94%A8jQuery%E6%93%8D%E4%BD%9CDOM/image-20210730114910666.png" alt="image-20210730114910666"></p>
</li>
</ol>
</li>
<li><h3 id="切换样式"><a href="#切换样式" class="headerlink" title="切换样式"></a>切换样式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(selector).toggleClass(<span class="class"><span class="keyword">class</span>) </span>;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>模拟了addClass()与removeClass()实现样式切换的过程</p>
</li>
<li><p>示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;h2&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;p&quot;</span>).toggleClass(<span class="string">&quot;content  border&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/30/%E4%BD%BF%E7%94%A8jQuery%E6%93%8D%E4%BD%9CDOM/image-20210730115124065.png" alt="image-20210730115124065"></p>
</li>
</ol>
</li>
<li><h3 id="判断是否含指定的样式"><a href="#判断是否含指定的样式" class="headerlink" title="判断是否含指定的样式"></a>判断是否含指定的样式</h3><ol>
<li><h4 id="hasClass-方法来判断是否包含指定的样式"><a href="#hasClass-方法来判断是否包含指定的样式" class="headerlink" title="hasClass( )方法来判断是否包含指定的样式"></a>hasClass( )方法来判断是否包含指定的样式</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(selector). hasClass(<span class="class"><span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;h2&quot;</span>).mouseover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!$(<span class="string">&quot;p&quot;</span>).hasClass(<span class="string">&quot;content &quot;</span>))&#123;</span><br><span class="line">	$(<span class="string">&quot;p&quot;</span>).addClass(<span class="string">&quot;content &quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;h2&quot;</span>).mouseout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>($(<span class="string">&quot;p&quot;</span>).hasClass(<span class="string">&quot;content &quot;</span>)) &#123;</span><br><span class="line">	$(<span class="string">&quot;p&quot;</span>).removeClass(<span class="string">&quot;content &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
<li><h2 id="内容及Value值操作"><a href="#内容及Value值操作" class="headerlink" title="内容及Value值操作"></a>内容及Value值操作</h2><ol>
<li><h3 id="HTML代码操作"><a href="#HTML代码操作" class="headerlink" title="HTML代码操作"></a>HTML代码操作</h3><ol>
<li><h4 id="html-可以对HTML代码进行操作，类似于JS中的innerHTML"><a href="#html-可以对HTML代码进行操作，类似于JS中的innerHTML" class="headerlink" title="html()可以对HTML代码进行操作，类似于JS中的innerHTML"></a>html()可以对HTML代码进行操作，类似于JS中的innerHTML</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;div.left&quot;</span>).html();<span class="comment">//获取元素中的html代码</span></span><br><span class="line">或</span><br><span class="line"> $(<span class="string">&quot;div.left&quot;</span>).html(<span class="string">&quot;&lt;div class=&#x27;content&#x27;&gt;…&lt;/div&gt;&quot;</span>);<span class="comment">//设置元素中的html代码</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/30/%E4%BD%BF%E7%94%A8jQuery%E6%93%8D%E4%BD%9CDOM/image-20210730115355193.png" alt="image-20210730115355193"></p>
</li>
</ol>
</li>
<li><h3 id="标签内容操作"><a href="#标签内容操作" class="headerlink" title="标签内容操作"></a>标签内容操作</h3><ol>
<li><h4 id="text-可以获取或设置元素的文本内容"><a href="#text-可以获取或设置元素的文本内容" class="headerlink" title="text()可以获取或设置元素的文本内容"></a>text()可以获取或设置元素的文本内容</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;div.left&quot;</span>).text();<span class="comment">//获取元素中的文本内容</span></span><br><span class="line">或</span><br><span class="line"> $(<span class="string">&quot;div.left&quot;</span>).text(<span class="string">&quot;&lt;div class=&#x27;content&#x27;&gt;…&lt;/div&gt;&quot;</span>);<span class="comment">//设置元素中的文本内容</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/30/%E4%BD%BF%E7%94%A8jQuery%E6%93%8D%E4%BD%9CDOM/image-20210730115425191.png" alt="image-20210730115425191"></p>
</li>
</ol>
</li>
<li><h3 id="html-和text-方法的区别"><a href="#html-和text-方法的区别" class="headerlink" title="html( ) 和text( )方法的区别"></a>html( ) 和text( )方法的区别</h3><table>
<thead>
<tr>
<th align="center">语法格式</th>
<th align="center">参数说明</th>
<th align="center">功能描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">html( )</td>
<td align="center">无参数</td>
<td align="center">用于获取第一个匹配元素的HTML内容或文本内容</td>
</tr>
<tr>
<td align="center">html(content)</td>
<td align="center">content为元素的HTML内容</td>
<td align="center">用于设置所有匹配元素的HTML内容或文本内容</td>
</tr>
<tr>
<td align="center">text( )</td>
<td align="center">无参数</td>
<td align="center">用于获取所有匹配元素的文本内容</td>
</tr>
<tr>
<td align="center">text  (content)</td>
<td align="center">content为元素的文本内容</td>
<td align="center">用于设置所有匹配元素的文本内容</td>
</tr>
</tbody></table>
</li>
<li><h3 id="属性值操作"><a href="#属性值操作" class="headerlink" title="属性值操作"></a>属性值操作</h3><ol>
<li><h4 id="val-可以获取或设置元素的value属性值"><a href="#val-可以获取或设置元素的value属性值" class="headerlink" title="val()可以获取或设置元素的value属性值"></a>val()可以获取或设置元素的value属性值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">this</span>).val();<span class="comment">//获取元素的value属性值</span></span><br><span class="line">或     $(<span class="built_in">this</span>).val(value);<span class="comment">//设置元素的value属性值</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/30/%E4%BD%BF%E7%94%A8jQuery%E6%93%8D%E4%BD%9CDOM/image-20210730115555608.png" alt="image-20210730115555608"></p>
</li>
</ol>
</li>
</ol>
</li>
<li><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><ol>
<li><h3 id="查找节点（前面章节已讲）"><a href="#查找节点（前面章节已讲）" class="headerlink" title="查找节点（前面章节已讲）"></a>查找节点（前面章节已讲）</h3></li>
<li><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><ol>
<li><h4 id="工厂函数-用于获取或创建节点"><a href="#工厂函数-用于获取或创建节点" class="headerlink" title="工厂函数$()用于获取或创建节点"></a>工厂函数$()用于获取或创建节点</h4><pre><code>  1. $(selector)：通过选择器获取节点
  2. $(element)：把DOM节点转化成jQuery节点
  3. $(html)：使用HTML字符串创建jQuery节点
</code></pre>
</li>
<li><p>示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $newNode=$(<span class="string">&quot;&lt;li&gt;&lt;/li&gt;&quot;</span>);</span><br><span class="line"> <span class="keyword">var</span> $newNode1=$(<span class="string">&quot;&lt;li&gt;你喜欢哪些冬季运动项目？&lt;/li&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> $newNode2=$(<span class="string">&quot;&lt;li title=&#x27;last&#x27;&gt;北京申办冬奥会是再合适不过了！&lt;/li&gt;&quot;</span>);</span><br><span class="line">				<span class="comment">//创建含文本与属性&lt;li&gt;元素节点</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h3 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h3><ol>
<li><h4 id="元素内部插入子节点"><a href="#元素内部插入子节点" class="headerlink" title="元素内部插入子节点"></a>元素内部插入子节点</h4><table>
<thead>
<tr>
<th align="center">语法</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">append(content)</td>
<td align="center">$(A).append(B)表示将B追加到A中  如：$(“ul”).append($newNode1);</td>
</tr>
<tr>
<td align="center">appendTo(content)</td>
<td align="center">$(A).appendTo(B)表示把A追加到B中  如：$newNode1.appendTo(“ul”);</td>
</tr>
<tr>
<td align="center">prepend(content)</td>
<td align="center">$(A). prepend (B)表示将B前置插入到A中  如：$(“ul”). prepend ($newNode1);</td>
</tr>
<tr>
<td align="center">prependTo(content)</td>
<td align="center">$(A). prependTo (B)表示将A前置插入到B中  如：$newNode1. prependTo (“ul”);</td>
</tr>
</tbody></table>
</li>
<li><h4 id="元素外部插入同辈节点"><a href="#元素外部插入同辈节点" class="headerlink" title="元素外部插入同辈节点"></a>元素外部插入同辈节点</h4><table>
<thead>
<tr>
<th align="center">语法</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">after(content)</td>
<td align="center">$(A).after (B)表示将B插入到A之后  如：$(“ul”).after($newNode1);</td>
</tr>
<tr>
<td align="center">insertAfter(content)</td>
<td align="center">$(A). insertAfter (B)表示将A插入到B之后  如：$newNode1.insertAfter(“ul”);</td>
</tr>
<tr>
<td align="center">before(content)</td>
<td align="center">$(A). before (B)表示将B插入至A之前  如：$(“ul”).before($newNode1);</td>
</tr>
<tr>
<td align="center">insertBefore(content)</td>
<td align="center">$(A). insertBefore (B)表示将A插入到B之前  如：$newNode1.insertBefore(“ul”);</td>
</tr>
</tbody></table>
</li>
</ol>
</li>
<li><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><ol>
<li><h4 id="jQuery提供了三种删除节点的方法"><a href="#jQuery提供了三种删除节点的方法" class="headerlink" title="jQuery提供了三种删除节点的方法"></a>jQuery提供了三种删除节点的方法</h4><pre><code>  1. remove()：删除整个节点    **$(selector).remove([expr]);**
  2. empty()：清空节点内容    **$(selector).empty();**
  3. detach()：删除整个节点，保留元素的绑定事件、附加的数据
</code></pre>
</li>
</ol>
</li>
<li><h3 id="替换节点"><a href="#替换节点" class="headerlink" title="替换节点"></a>替换节点</h3><ol>
<li><h4 id="replaceWith-和replaceAll-用于替换某个节点"><a href="#replaceWith-和replaceAll-用于替换某个节点" class="headerlink" title="replaceWith()和replaceAll()用于替换某个节点"></a>replaceWith()和replaceAll()用于替换某个节点</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $newNode1=$(<span class="string">&quot;&lt;li&gt;你喜欢哪些冬季运动项目？&lt;/li&gt;&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;.gameList li:eq(2)&quot;</span>).replaceWith($newNode1);</span><br><span class="line"><span class="comment">//两者的关系类似于append()和appendTo()</span></span><br><span class="line">$($newNode1).replaceAll(<span class="string">&quot;.gameList li:eq(2)&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h3 id="复制节点"><a href="#复制节点" class="headerlink" title="复制节点"></a>复制节点</h3><ol>
<li><h4 id="clone-用于复制某个节点"><a href="#clone-用于复制某个节点" class="headerlink" title="clone()用于复制某个节点"></a>clone()用于复制某个节点</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(selector).clone([includeEvents]) ;</span><br><span class="line"><span class="comment">//参数ture或flase, true复制事件处理，flase时反之</span></span><br></pre></td></tr></table></figure></li>
<li><p>示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.gameList li:eq(1)&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     $(<span class="built_in">this</span>).clone(<span class="literal">true</span>).appendTo(<span class="string">&quot;.gameList&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">$(<span class="string">&quot;.gameList li:eq(2)&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     $(<span class="built_in">this</span>).clone(<span class="literal">false</span>).appendTo(<span class="string">&quot;.gameList&quot;</span>);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
<li><h2 id="节点属性操作"><a href="#节点属性操作" class="headerlink" title="节点属性操作"></a>节点属性操作</h2><ol>
<li><h3 id="获取与设置元素属性"><a href="#获取与设置元素属性" class="headerlink" title="获取与设置元素属性"></a>获取与设置元素属性</h3><ol>
<li><h4 id="attr-用来获取与设置元素属性"><a href="#attr-用来获取与设置元素属性" class="headerlink" title="attr()用来获取与设置元素属性"></a>attr()用来获取与设置元素属性</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(selector).attr([name]) ;<span class="comment">//获取属性值</span></span><br><span class="line">或</span><br><span class="line">$(selector).attr(&#123;[name1:value1]…[nameN:valueN]&#125;) ;<span class="comment">//设置多个属性的值</span></span><br></pre></td></tr></table></figure></li>
<li><p>示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.contain img&quot;</span>).attr(&#123;<span class="attr">width</span>:<span class="string">&quot;200&quot;</span>,<span class="attr">height</span>:<span class="string">&quot;80&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/30/%E4%BD%BF%E7%94%A8jQuery%E6%93%8D%E4%BD%9CDOM/image-20210730120205309.png" alt="image-20210730120205309"></p>
</li>
</ol>
</li>
<li><h3 id="删除元素属性"><a href="#删除元素属性" class="headerlink" title="删除元素属性"></a>删除元素属性</h3><ol>
<li><h4 id="removeAttr-用来删除元素的属性"><a href="#removeAttr-用来删除元素的属性" class="headerlink" title="removeAttr()用来删除元素的属性"></a>removeAttr()用来删除元素的属性</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(selector).removeAttr(name) ;</span><br></pre></td></tr></table></figure></li>
<li><p>示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.contain img&quot;</span>).removeAttr(<span class="string">&quot;alt&quot;</span>);</span><br><span class="line">	<span class="comment">//删除元素的alt属性</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
<li><h2 id="节点遍历"><a href="#节点遍历" class="headerlink" title="节点遍历"></a>节点遍历</h2><ol>
<li><h3 id="遍历子元素"><a href="#遍历子元素" class="headerlink" title="遍历子元素"></a>遍历子元素</h3><ol>
<li><h4 id="children-方法可以用来获取元素的所有子元素"><a href="#children-方法可以用来获取元素的所有子元素" class="headerlink" title="children()方法可以用来获取元素的所有子元素"></a>children()方法可以用来获取元素的所有子元素</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(selector).children([expr]);</span><br></pre></td></tr></table></figure></li>
<li><p>示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $section =$(<span class="string">&quot;section&quot;</span>).children();<span class="comment">//获取&lt;section&gt;的子元素，但不包含子元素的子元素</span></span><br><span class="line">alert($section.length);</span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/30/%E4%BD%BF%E7%94%A8jQuery%E6%93%8D%E4%BD%9CDOM/image-20210730120422022.png" alt="image-20210730120422022"></p>
</li>
</ol>
</li>
<li><h3 id="遍历同辈元素"><a href="#遍历同辈元素" class="headerlink" title="遍历同辈元素"></a>遍历同辈元素</h3><ol>
<li><h4 id="jQuery可以获取紧邻其后、紧邻其前和位于该元素前与后的所有同辈元素"><a href="#jQuery可以获取紧邻其后、紧邻其前和位于该元素前与后的所有同辈元素" class="headerlink" title="jQuery可以获取紧邻其后、紧邻其前和位于该元素前与后的所有同辈元素"></a>jQuery可以获取紧邻其后、紧邻其前和位于该元素前与后的所有同辈元素</h4><table>
<thead>
<tr>
<th>语法</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>next([expr])</td>
<td>用于获取紧邻匹配元素之后的元素  $(“li:eq(1)”).next().addClass(“orange”);</td>
</tr>
<tr>
<td>prev([expr])</td>
<td>用于获取紧邻匹配元素之前的元素  $(“li:eq(1)”).prev().addClass(“orange”);</td>
</tr>
<tr>
<td>slibings([expr])</td>
<td>用于获取位于匹配元素前面和后面的所有同辈元素  $(“li:eq(1)”).siblings().addClass(“orange”);</td>
</tr>
</tbody></table>
</li>
</ol>
</li>
<li><h3 id="遍历前辈元素"><a href="#遍历前辈元素" class="headerlink" title="遍历前辈元素"></a>遍历前辈元素</h3><ol>
<li><h4 id="jQuery中可以遍历前辈元素"><a href="#jQuery中可以遍历前辈元素" class="headerlink" title="jQuery中可以遍历前辈元素"></a>jQuery中可以遍历前辈元素</h4><pre><code>  1. parent()：获取元素的父级元素
  2. parents()：元素元素的祖先元素
</code></pre>
</li>
<li><p>示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;li:eq(1)&quot;</span>).parent().addClass(<span class="string">&quot;orange&quot;</span>);</span><br><span class="line"> $(<span class="string">&quot;li:eq(1)&quot;</span>).parents().addClass(<span class="string">&quot;orange&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h3 id="其他遍历方法"><a href="#其他遍历方法" class="headerlink" title="其他遍历方法"></a>其他遍历方法</h3><ol>
<li><h4 id="each-：规定为每个匹配元素规定运行的函数"><a href="#each-：规定为每个匹配元素规定运行的函数" class="headerlink" title="each( ) ：规定为每个匹配元素规定运行的函数"></a>each( ) ：规定为每个匹配元素规定运行的函数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(selector).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,element</span>)) </span>;  <span class="comment">//index选择器的位置   //element  当前的元素</span></span><br></pre></td></tr></table></figure></li>
<li><p>示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;img&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       $(<span class="string">&quot;li&quot;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">var</span> str=$(<span class="built_in">this</span>).text()+<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">           $(<span class="string">&quot;section&quot;</span>).append(str);</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/30/%E4%BD%BF%E7%94%A8jQuery%E6%93%8D%E4%BD%9CDOM/image-20210730120622570.png" alt="image-20210730120622570"></p>
</li>
<li><h4 id="end-：结束当前链条中的最近的筛选操作，并将匹配元素集还原为之前的状态"><a href="#end-：结束当前链条中的最近的筛选操作，并将匹配元素集还原为之前的状态" class="headerlink" title="end( )：结束当前链条中的最近的筛选操作，并将匹配元素集还原为之前的状态"></a>end( )：结束当前链条中的最近的筛选操作，并将匹配元素集还原为之前的状态</h4></li>
<li><p>示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.contain :header&quot;</span>).css(&#123;<span class="string">&quot;background&quot;</span>:<span class="string">&quot;#2a65ba&quot;</span>,<span class="string">&quot;color&quot;</span>:<span class="string">&quot;#ffffff&quot;</span>&#125;);</span><br><span class="line">$(<span class="string">&quot;.gameList li&quot;</span>).first().css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#b8e7f9&quot;</span>).end().last().css (<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#d3f4b5&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;.gameList li:last&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;none&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/30/%E4%BD%BF%E7%94%A8jQuery%E6%93%8D%E4%BD%9CDOM/image-20210730120649878.png" alt="image-20210730120649878"></p>
</li>
</ol>
</li>
</ol>
</li>
<li><h2 id="CSS-DOM操作"><a href="#CSS-DOM操作" class="headerlink" title="CSS-DOM操作"></a>CSS-DOM操作</h2><ol>
<li><h4 id="除css-外，还有获取和设置元素高度、宽度等的样式操作方法"><a href="#除css-外，还有获取和设置元素高度、宽度等的样式操作方法" class="headerlink" title="除css()外，还有获取和设置元素高度、宽度等的样式操作方法"></a>除css()外，还有获取和设置元素高度、宽度等的样式操作方法</h4><table>
<thead>
<tr>
<th align="center">语法</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">css()</td>
<td align="center">设置或返回匹配元素的样式属性</td>
</tr>
<tr>
<td align="center">height([value])</td>
<td align="center">设置或返回匹配元素的高度</td>
</tr>
<tr>
<td align="center">width([value])</td>
<td align="center">设置或返回匹配元素的宽度</td>
</tr>
<tr>
<td align="center">offset([value])</td>
<td align="center">返回以像素为单位的top和left坐标。仅对可见元素有效</td>
</tr>
<tr>
<td align="center">offsetParent( )</td>
<td align="center">返回最近的已定位祖先元素。定位元素指的是元素的CSS position值被设置为relative、absolute或fixed的元素</td>
</tr>
<tr>
<td align="center">position( )</td>
<td align="center">返回第一个匹配元素相对于父元素的位置</td>
</tr>
<tr>
<td align="center">scrollLeft([position])</td>
<td align="center">参数可选。设置或返回匹配元素相对滚动条左侧的偏移</td>
</tr>
<tr>
<td align="center">scrollTop([position])</td>
<td align="center">参数可选。设置或返回匹配元素相对滚动条顶</td>
</tr>
</tbody></table>
</li>
</ol>
</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="/2021/07/30/%E4%BD%BF%E7%94%A8jQuery%E6%93%8D%E4%BD%9CDOM/image-20210730120843146.png" alt="image-20210730120843146"></p>
]]></content>
      <categories>
        <category>使用jQuery快速高效制作网页交互特效</category>
      </categories>
  </entry>
  <entry>
    <title>初始jQuery</title>
    <url>/2021/07/18/%E5%88%9D%E5%A7%8BjQuery/</url>
    <content><![CDATA[<h1 id="jQuery简介"><a href="#jQuery简介" class="headerlink" title="jQuery简介"></a>jQuery简介</h1><ol>
<li><h2 id="jQuery介绍"><a href="#jQuery介绍" class="headerlink" title="jQuery介绍"></a>jQuery介绍</h2><ol>
<li>jQuery由美国人John Resig于2006年创建</li>
<li>jQuery是目前最流行的JavaScript程序库，它是对JavaScript对象和函数的封装</li>
<li>它的设计思想是write less,do more</li>
</ol>
</li>
</ol>
<span id="more"></span>

<ol>
<li><h2 id="jQuery与JavaScript"><a href="#jQuery与JavaScript" class="headerlink" title="jQuery与JavaScript"></a>jQuery与JavaScript</h2><ol>
<li><p>jQuery是JavaScript的程序库之一，它是JavaScript对象和实用函数的封装</p>
</li>
<li><p>实现隔行变色效果，只需一句关键代码</p>
<p><img src="/2021/07/18/%E5%88%9D%E5%A7%8BjQuery/image-20210718153121263.png" alt="image-20210718153121263"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;tr:even&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;#e8f0f2&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>jQuery制作交互特效的语法更为简单，代码量大大减少了</p>
</li>
<li><p><strong>jQuery只是JavaScript的程序库，相当于JavaScript技术的一个子集，所有它并不能完全取代JavaScript。</strong></p>
</li>
</ol>
</li>
<li><h2 id="jQuery能做什么"><a href="#jQuery能做什么" class="headerlink" title="jQuery能做什么"></a>jQuery能做什么</h2><ol>
<li>访问和操作DOM元素</li>
<li>控制页面样式</li>
<li>对页面事件进行处理</li>
<li>扩展新的jQuery插件</li>
<li>与Ajax技术完美结合</li>
<li>jQuery能做的JavaScript也都能做，但使用jQuery能大幅提高开发效率</li>
</ol>
</li>
<li><h2 id="jQuery的优势"><a href="#jQuery的优势" class="headerlink" title="jQuery的优势"></a>jQuery的优势</h2><ol>
<li>体积小，压缩后只有100KB左右</li>
<li>强大的选择器</li>
<li>出色的DOM封装</li>
<li>可靠的事件处理机制</li>
<li>出色的浏览器兼容性</li>
<li>使用隐式迭代简化编程</li>
<li>丰富的插件支持</li>
</ol>
</li>
<li><h2 id="jQuery库文件"><a href="#jQuery库文件" class="headerlink" title="jQuery库文件"></a>jQuery库文件</h2><ol>
<li><p>jQuery库分开发版和发布版</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>大小</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>jquery-1.版本号.js（开发版）</td>
<td>约286KB</td>
<td>完整无压缩版本，主要用于测试、学习和开发</td>
</tr>
<tr>
<td>jquery-1.版本号.min.js（发布版）</td>
<td>约94.8KB</td>
<td>经过工具压缩或经过服务器开启Gzip压缩，主要应用于发布的产品和项目</td>
</tr>
</tbody></table>
</li>
<li><p>在页面中引入jQuery</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;js/jquery-1.12.4.js&quot;</span> type=<span class="string">&quot;text/javascript&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h1 id="jQuery语法"><a href="#jQuery语法" class="headerlink" title="jQuery语法"></a>jQuery语法</h1><ol>
<li><h2 id="使用jQuery弹出提示框"><a href="#使用jQuery弹出提示框" class="headerlink" title="使用jQuery弹出提示框"></a>使用jQuery弹出提示框</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//为页面加载事件绑定方法 </span></span><br><span class="line">        alert(<span class="string">&quot;我欲奔赴沙场征战jQuery，势必攻克之！&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
<li><h2 id="document-ready"><a href="#document-ready" class="headerlink" title="$(document).ready()"></a><strong>$(document).ready()</strong></h2><ol>
<li><strong>$(document).ready()</strong> 与 <strong>window.onload</strong> 类似，但也有区别</li>
</ol>
<table>
<thead>
<tr>
<th>————————————–</th>
<th>window.onload</th>
<th>$(document).ready()</th>
</tr>
</thead>
<tbody><tr>
<td>执行时机</td>
<td>必须等待网页中所有的内容加载完毕后（包括图片、flash、视频等）才能执行</td>
<td>网页中所有DOM文档结构绘制完毕后即刻执行，可能与DOM元素关联的内容（图片、flash、视频等）并没有加载完</td>
</tr>
<tr>
<td>编写个数</td>
<td>同一页面不能同时编写多个</td>
<td>同一页面能同时编写多个</td>
</tr>
<tr>
<td>简化写法</td>
<td>无</td>
<td>$(function(){     //执行代码  }) ;</td>
</tr>
</tbody></table>
</li>
<li><h2 id="jQuery语法结构"><a href="#jQuery语法结构" class="headerlink" title="jQuery语法结构"></a>jQuery语法结构</h2>   <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(selector).action() ; </span><br></pre></td></tr></table></figure>

<ol>
<li><p>工厂函数$()：将DOM对象转化为jQuery对象</p>
<ol>
<li>在jQuery中， 美元符号“$”等价于jQuey. 即$( )=Quey( )。$()的作用是将DOM对象转化为Qnery对象，只有将DOM对象转化为jQuey对象后，才能使用jQuery的方法。</li>
<li>例如，示例1中的documen是一个DOM对象，当它使用S( )函数包裹起来时，就变成了一个jQuery对象，它能使用jQuery中的rady( )方法.而不能再使用DOM对象的geElemenByld( )方法。例如.代码$ (document) .getElementByld( )和document. ready( )均是不正确的。</li>
<li>规范当$()的参数是DOM对象时，该对象无须使用双引号包裹起来，如果获取的是document 对象，则写作$(document)。</li>
</ol>
</li>
<li><p>选择器 selector：获取需要操作的DOM 元素</p>
<ol>
<li><p>jQuery支持CSS 1.0到CSS 3.0规则中几乎所有的选择器.如标签选择器.类选择器、1ID 选择和后代选择器等，使用jQuey选择器和S( )工厂函数可以非常方便地获取需要操作的DOM元素，语法格式如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ (selector)</span><br></pre></td></tr></table></figure></li>
<li><p>ID选择器、标签选择器、 类选择器的用法如下所示。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ (<span class="string">&quot;#userName&quot;</span>) ;   <span class="comment">//获取DOM中id为userName的元素</span></span><br><span class="line">$ (<span class="string">&quot;div&quot;</span>) ;    		<span class="comment">//获取DOM中所有的div元素</span></span><br><span class="line">$ (<span class="string">&quot;. content&quot;</span>) ;  	<span class="comment">//获取DOM中class为content的元素</span></span><br></pre></td></tr></table></figure>

<p>jOuey中提供的选择器远不止上述几种，在以后的章节中将进行更加系统的介绍。</p>
</li>
</ol>
</li>
<li><p>方法action()：jQuery中提供的方法，其中包括绑定事件处理的方法</p>
<ol>
<li>jQuery中提供了一系列方法。在这些方法中，一类重要的方法就是事件处理方法，主要用来绑定DOM元素的事件和事件处理方法。在jQuery中，许多基础的事件，如鼠标事件、键盘事件和表单事件等，都可以通过这些事件方法进行绑定，对应的在jQuery 中则写作click( )、mouseover( )和mouseout( )等。</li>
</ol>
</li>
</ol>
</li>
<li><h2 id="jQuery操作页面元素"><a href="#jQuery操作页面元素" class="headerlink" title="jQuery操作页面元素"></a>jQuery操作页面元素</h2><ol>
<li><p>使用addClass( )方法为元素添加样式</p>
<ol>
<li><p>语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">jQuery 对象.addClass([样式名]);</span><br></pre></td></tr></table></figure></li>
<li><p>示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#current&quot;</span>).addClass(<span class="string">&quot;current&quot;</span>);      </span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/18/%E5%88%9D%E5%A7%8BjQuery/image-20210718155322438.png" alt="image-20210718155322438"></p>
</li>
</ol>
</li>
<li><p>使用css( )方法设置元素样式</p>
<ol>
<li><p>语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">css(<span class="string">&quot;属性&quot;</span>,<span class="string">&quot;属性值&quot;</span>) ;							<span class="comment">//设置一个CSS属性</span></span><br><span class="line">css(&#123;<span class="string">&quot;属性1&quot;</span>:<span class="string">&quot;属性值1&quot;</span>,<span class="string">&quot;属性2&quot;</span>:<span class="string">&quot;属性值2&quot;</span>...&#125;) ;	 <span class="comment">//同时设置多个CSS属性</span></span><br></pre></td></tr></table></figure></li>
<li><p>示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">this</span>).css(&#123;<span class="string">&quot;background&quot;</span>:<span class="string">&quot;#c81623&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/18/%E5%88%9D%E5%A7%8BjQuery/image-20210718155514742.png" alt="image-20210718155514742"></p>
</li>
</ol>
</li>
<li><p>使用show( )、hide( ) 方法设置元素的显示和隐藏</p>
<ol>
<li><p>语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(selector).show( );	<span class="comment">//()里是延迟</span></span><br><span class="line">$(selector).hide( );	<span class="comment">//()里是延迟</span></span><br></pre></td></tr></table></figure></li>
<li><p>示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.nav-top&quot;</span>).show( );</span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).hide( );</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
<li><h2 id="jQuery代码风格"><a href="#jQuery代码风格" class="headerlink" title="jQuery代码风格"></a>jQuery代码风格</h2><ol>
<li><h3 id="“-”等同于“-jQuery-”"><a href="#“-”等同于“-jQuery-”" class="headerlink" title="“$”等同于“ jQuery ”"></a>“$”等同于“ jQuery ”</h3><ol>
<li><p>~~~js<br>$(document).ready()=jQuery(document).ready()<br>$(function(){…})=jQuery (function(){…})      </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. ### 链式操作</span><br><span class="line"></span><br><span class="line">   1. 在对DOM元素进行多个操作时，为了避免过度使用临时变量或不必要的重复代码，在大多数jQuery代码中采用了一种链式编程模式。它可以对一个对象进行多重操作，并将操作结果返回给该对象，以便于将返回结果应用于该对象的下一次操作。</span><br><span class="line"></span><br><span class="line">   2. 对一个对象进行多重操作，并将操作结果返回给该对象</span><br><span class="line"></span><br><span class="line">      ~~~js</span><br><span class="line">       $(&quot;h2&quot;).css(&quot;background-color&quot;,&quot;#ccffff&quot;).next().css(&quot;display&quot;,&quot;block&quot;);</span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/18/%E5%88%9D%E5%A7%8BjQuery/image-20210718160422713.png" alt="image-20210718160422713"></p>
</li>
</ol>
</li>
<li><h3 id="隐式迭代"><a href="#隐式迭代" class="headerlink" title="隐式迭代"></a>隐式迭代</h3><ol>
<li><p>在jQuery编写中，除了链式操作外，还有一种方式，即隐式迭代，</p>
</li>
<li><p>获取所有1i标签，并设置字体样式。如果在传统的JavaScript写法中，需要使用getElementsByTagName( )获取li标签集合，然后使用for循环一个一个设置字样样式，而这里使用jQuery就不一样了。它不需要遍历所有元素，可以直接设置元素的样式，这就是隐式迭代，在jQuery中获取一个集合后会默认遍历内部的所有元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       $(<span class="string">&quot;li&quot;</span>).css(&#123;<span class="string">&quot;font-weight&quot;</span>:<span class="string">&quot;bold&quot;</span>,<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>&#125;);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/18/%E5%88%9D%E5%A7%8BjQuery/image-20210718160859199.png" alt="image-20210718160859199"></p>
</li>
</ol>
</li>
<li><h3 id="添加注释"><a href="#添加注释" class="headerlink" title="添加注释"></a>添加注释</h3><table>
<thead>
<tr>
<th>阶段</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>开发阶段</td>
<td>为代码添加注释，可以增加代码的可读性，能够让别人很容易的读懂你的代码，便于后期维护</td>
</tr>
<tr>
<td>维护阶段</td>
<td>建议把关键的模块形成开发文档，便于后期维护，即便后期删除代码注释，也不影响后期维护</td>
</tr>
<tr>
<td>产品正式发布</td>
<td>建议删除注释，减少文件大小，加快下载速度，提高用户体验</td>
</tr>
</tbody></table>
</li>
</ol>
</li>
</ol>
<h1 id="DOM对象和jQuery对象"><a href="#DOM对象和jQuery对象" class="headerlink" title="DOM对象和jQuery对象"></a>DOM对象和jQuery对象</h1><ol>
<li><h2 id="DOM模型"><a href="#DOM模型" class="headerlink" title="DOM模型"></a>DOM模型</h2><ol>
<li><p>浏览器把HTML文档的元素转换成节点对象，所有节点组成了一个树状结构</p>
<p><img src="/2021/07/18/%E5%88%9D%E5%A7%8BjQuery/image-20210718161437470.png" alt="image-20210718161437470"></p>
</li>
</ol>
</li>
<li><p><strong>DOM对象</strong>：直接使用JavaScript获取的节点对象</p>
   <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> objDOM=<span class="built_in">document</span>.getElementById(<span class="string">&quot;title&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> objHTML=objDOM.innerHTML;  </span><br></pre></td></tr></table></figure></li>
<li><p><strong>jQuery对象</strong>：使用jQuery包装DOM对象后产生的对象，它能够使用jQuery中的方法</p>
   <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#title&quot;</span>).html( );</span><br><span class="line">等同于</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;title&quot;</span>).innerHTML; </span><br></pre></td></tr></table></figure>

<pre><code>**DOM对象和jQuery对象分别拥有一套独立的方法，不能混用**
</code></pre>
</li>
<li><p><strong>DOM对象转jQuery对象</strong></p>
<ol>
<li><p>使用$()函数进行转化：$(DOM对象)</p>
   <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> txtName =<span class="built_in">document</span>.getElementById(<span class="string">&quot;txtName&quot;</span>); <span class="comment">//DOM对象</span></span><br><span class="line"><span class="keyword">var</span> $txtName =$(txtName);  <span class="comment">//jQuery对象</span></span><br></pre></td></tr></table></figure></li>
<li><p>注意</p>
<ol>
<li>jQuery对象命名一般约定以$开头</li>
<li>在事件中经常使用$(this)，this是触发该事件的对象</li>
</ol>
</li>
</ol>
</li>
<li><p><strong>jQuery对象转DOM对象</strong></p>
<ol>
<li><p>jQuery对象是一个类似数组的对象，可以通过[index]的方法得到相应的DOM对象</p>
   <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $txtName =$ (<span class="string">&quot;#txtName&quot;</span>); <span class="comment">//jQuery对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> txtName =$txtName[<span class="number">0</span>]; <span class="comment">//DOM对象</span></span><br></pre></td></tr></table></figure></li>
<li><p>通过get(index)方法得到相应的DOM对象</p>
   <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $txtName =$(<span class="string">&quot;#txtName&quot;</span>); <span class="comment">//jQuery对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> txtName =$txtName.get(<span class="number">0</span>);<span class="comment">//DOM对象  </span></span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="/2021/07/18/%E5%88%9D%E5%A7%8BjQuery/image-20210718161923661.png" alt="image-20210718161923661"></p>
]]></content>
      <categories>
        <category>使用jQuery快速高效制作网页交互特效</category>
      </categories>
  </entry>
  <entry>
    <title>动态网页开发基础</title>
    <url>/2021/08/09/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="动态网站和静态网站"><a href="#动态网站和静态网站" class="headerlink" title="动态网站和静态网站"></a><strong>动态网站和静态网站</strong></h1><ol>
<li><strong>静态网页是相对于动态网页而言，是指没有后台数据库、不含程序和不可交互的网页。</strong></li>
<li><strong>编的是什么它显示的就是什么、不会有任何改变。</strong></li>
<li><strong>静态网页相对更新起来比较麻烦，适用于一般更新较少的展示型网站。</strong></li>
<li><strong>另外,如果扩展名为.asp但却没有连数据库,完全是静态的页面,那也是静态网站.只是.asp扩展名。</strong></li>
<li><strong>动态网页和静态网页是有区别的，网站采用动态网页还是静态网页主要取决于网站的功能需求和网站内容的多少，如果网站功能比较简单，内容更新量不是很大，采用纯静态网页的方式会更简单，反之一般要采用动态网页技术来实现。不过现在一般的都是采用的动态网站，有内容更新的话就可以随时在后台来更新。</strong></li>
<li><strong>静态网页</strong><ol>
<li><strong>无法实现搜索、购买、登录等交互功能</strong></li>
<li><strong>无法对静态页面的内容进行实时更新</strong></li>
</ol>
</li>
<li><strong>动态网页</strong><ol>
<li><strong>根据不同的输入(或操作)，返回不同的网页</strong></li>
</ol>
</li>
</ol>
<p><strong><span id="more"></span></strong></p>
<ol>
<li><h1 id="为什么学习B-S技术"><a href="#为什么学习B-S技术" class="headerlink" title="为什么学习B/S技术"></a><strong>为什么学习B/S技术</strong></h1><ol>
<li><h2 id="C-S的局限性"><a href="#C-S的局限性" class="headerlink" title="C/S的局限性"></a><strong>C/S的局限性</strong></h2><ol>
<li><p><strong>安装不同客户端软件</strong></p>
</li>
<li><p><img src="/2021/08/09/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/image-20210811103425579.png" alt="image-20210811103425579"></p>
</li>
</ol>
</li>
<li><h2 id="B-S带来全新体验"><a href="#B-S带来全新体验" class="headerlink" title="B/S带来全新体验"></a><strong>B/S带来全新体验</strong></h2><ol>
<li><p><strong>无需安装客户端软件</strong></p>
<p><strong><img src="/2021/08/09/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/image-20210811103439712.png" alt="image-20210811103439712"></strong></p>
</li>
</ol>
</li>
<li><h2 id="B-S与C-S的比较"><a href="#B-S与C-S的比较" class="headerlink" title="B/S与C/S的比较"></a><strong>B/S与C/S的比较</strong></h2><table>
<thead>
<tr>
<th></th>
<th><strong>B/S架构</strong></th>
<th><strong>C/S架构</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>软件安装</strong></td>
<td><strong>浏览器</strong></td>
<td><strong>需要专门的客户端应用</strong></td>
</tr>
<tr>
<td><strong>升级维护</strong></td>
<td><strong>客户端零维护</strong></td>
<td><strong>客户端需要单独维护和升级</strong></td>
</tr>
<tr>
<td><strong>平台相关</strong></td>
<td><strong>与操作系统平台的关系最小化</strong></td>
<td><strong>对客户端操作系统一般有限制</strong></td>
</tr>
<tr>
<td><strong>性能安全</strong></td>
<td><strong>在响应速度和安全性上需要花费更多设计成本</strong></td>
<td><strong>能充分发挥客户端处理能力，客户端响应快</strong></td>
</tr>
</tbody></table>
</li>
<li><p><strong>B/S架构（浏览器/服务器）：程序完全部署在服务器上</strong></p>
</li>
<li><p><strong>B/S技术的工作原理：B/S架构采用请求/响应模式进行交互</strong></p>
</li>
</ol>
</li>
</ol>
<p><strong><img src="/2021/08/09/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/image-20210811103743392.png" alt="image-20210811103743392"></strong></p>
<h1 id="URL"><a href="#URL" class="headerlink" title="URL"></a><strong>URL</strong></h1><p><strong>Uniform Resource Locator统一资源定位符</strong><br><strong>URL的组成</strong></p>
<p><strong><img src="/2021/08/09/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/image-20210811103824035.png" alt="image-20210811103824035"></strong></p>
<h1 id="Tomcat服务器简介"><a href="#Tomcat服务器简介" class="headerlink" title="Tomcat服务器简介"></a><strong>Tomcat服务器简介</strong></h1><p><strong>Tomcat服务器</strong><br>    <strong>Apache Jakarta的开源项目</strong><br>    <strong>JSP/Servlet容器</strong></p>
<h1 id="Tomcat的目录结构"><a href="#Tomcat的目录结构" class="headerlink" title="Tomcat的目录结构"></a><strong>Tomcat的目录结构</strong></h1><p>​    <strong>Tomcat服务器的目录结构</strong></p>
<table>
<thead>
<tr>
<th><strong>目录</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>/bin</strong></td>
<td><strong>存放各种平台下用于启动和停止Tomcat的脚本文件</strong></td>
</tr>
<tr>
<td><strong>/conf</strong></td>
<td><strong>存放Tomcat服务器的各种配置文件</strong></td>
</tr>
<tr>
<td><strong>/lib</strong></td>
<td><strong>存放Tomcat服务器所需的各种JAR文件</strong></td>
</tr>
<tr>
<td><strong>/logs</strong></td>
<td><strong>存放Tomcat的日志文件</strong></td>
</tr>
<tr>
<td><strong>/temp</strong></td>
<td><strong>Tomcat运行时用于存放临时文件</strong></td>
</tr>
<tr>
<td><strong>/webapps</strong></td>
<td><strong>当发布Web应用时，默认情况下会将Web应用的文件存放于此目录中</strong></td>
</tr>
<tr>
<td><strong>/work</strong></td>
<td><strong>Tomcat把由JSP生成的Servlet放于此目录下</strong></td>
</tr>
</tbody></table>
<h1 id="Tomcat服务器应用"><a href="#Tomcat服务器应用" class="headerlink" title="Tomcat服务器应用"></a><strong>Tomcat服务器应用</strong></h1><p><strong>解压缩版本Tomcat的配置</strong><br>    <strong>添加系统变量，名称为CATALINA_HOME，值为Tomcat的安装目录</strong><br>        <strong>因Tomcat运行依赖JRE，确保已安装JRE并配置JRE_HOME环境变量。或针对已安装的JDK配置JAVA_HOME环境变量</strong><br><strong>启动和停止Tomcat服务器</strong><br><strong>Tomcat服务启动检测</strong><br>    <strong>在IE地址栏中输入<a href="http://localhost:端口号（8080）">http://localhost:端口号（8080）</a></strong><br>    <strong>页面进入到Tomcat启动成功界面</strong></p>
<h1 id="Tomcat的端口配置"><a href="#Tomcat的端口配置" class="headerlink" title="Tomcat的端口配置"></a><strong>Tomcat的端口配置</strong></h1><p><strong>通过配置文件server.xml修改Tomcat端口号</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Connector port=<span class="string">&quot;8080&quot;</span> </span><br><span class="line">	protocol=<span class="string">&quot;HTTP/1.1 &quot;</span> </span><br><span class="line">	connectionTimeout=<span class="string">&quot;20000&quot;</span> </span><br><span class="line">   redirectPort=<span class="string">&quot;8443 &quot;</span> 	</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Web项目的目录结构"><a href="#Web项目的目录结构" class="headerlink" title="Web项目的目录结构"></a><strong>Web项目的目录结构</strong></h1><p><strong>Web应用的目录结构</strong></p>
<table>
<thead>
<tr>
<th><strong>目录</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>/</strong></td>
<td><strong>Web应用的根目录，该目录下所有文件在客户端都可以访问(JSP、HTML等)</strong></td>
</tr>
<tr>
<td><strong>/WEB-INF</strong></td>
<td><strong>存放应用使用的各种资源，该目录及其子目录对客户端都是不可以访问</strong></td>
</tr>
<tr>
<td><strong>/WEB-INF/classes</strong></td>
<td><strong>存放Web项目的所有的class文件</strong></td>
</tr>
<tr>
<td><strong>/WEB-INF/lib</strong></td>
<td><strong>存放Web应用使用的JAR文件</strong></td>
</tr>
</tbody></table>
<h2 id="配置访问页面"><a href="#配置访问页面" class="headerlink" title="配置访问页面"></a><strong>配置访问页面</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">&quot;2.4&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">	<span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">	<span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee </span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="xml">	http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>假定在web应用(news)下存在一个index.jsp页面，输入<a href="http://localhost:8080/news%E5%9C%B0%E5%9D%80%E6%97%B6%EF%BC%8Cweb%E5%AE%B9%E5%99%A8%E4%BC%9A%E9%BB%98%E8%AE%A4%E8%B0%83%E7%94%A8index.jsp%E9%A1%B5%E9%9D%A2">http://localhost:8080/news地址时，web容器会默认调用index.jsp页面</a></strong> </p>
<h1 id="什么是JSP"><a href="#什么是JSP" class="headerlink" title="什么是JSP"></a><strong>什么是JSP</strong></h1><p><strong>JSP (Java Server Pages) 在HTML中嵌入Java脚本代码</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*,java.text.*&quot;</span> </span><br><span class="line">	contentType= <span class="string">&quot;text/html; charset=utf-8&quot;</span> %&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>输出当前日期<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">        你好，今天是</span></span><br><span class="line"><span class="xml">        &lt;% SimpleDateFormat formater =</span></span><br><span class="line"><span class="xml">              new SimpleDateFormat(&quot;yyyy年 MM月dd日&quot;);</span></span><br><span class="line"><span class="xml">    	    String strCurrentTime = formater.format(new Date()); %&gt;	</span></span><br><span class="line"><span class="xml">        &lt;%=strCurrentTime %&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong><img src="/2021/08/09/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/image-20210811104439922.png" alt="image-20210811104439922"></strong></p>
<h2 id="JSP中的page指令"><a href="#JSP中的page指令" class="headerlink" title="JSP中的page指令"></a><strong>JSP中的page指令</strong></h2><p><strong>通过设置内部的多个属性定义整个页面的属性</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;%@ page 属性<span class="number">1</span>=<span class="string">&quot;属性值&quot;</span> 属性<span class="number">2</span>=<span class="string">&quot;属性值1,属性值2&quot;</span>… </span><br><span class="line">                   属性n=<span class="string">&quot;属性值n&quot;</span>%&gt;</span><br></pre></td></tr></table></figure>

<p><strong>常用属性</strong></p>
<table>
<thead>
<tr>
<th><strong>属性</strong></th>
<th><strong>描述</strong></th>
<th><strong>默认值</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>language</strong></td>
<td><strong>指定JSP页面使用的脚本语言</strong></td>
<td><strong>java</strong></td>
</tr>
<tr>
<td><strong>import</strong></td>
<td><strong>通过该属性来引用脚本语言中使用到的类文件</strong></td>
<td><strong>无</strong></td>
</tr>
<tr>
<td><strong>contentType</strong></td>
<td><strong>用来指定JSP页面所采用的编码方式</strong></td>
<td><strong>text/html,    ISO-8859-1</strong></td>
</tr>
</tbody></table>
<h2 id="JSP中的小脚本与表达式"><a href="#JSP中的小脚本与表达式" class="headerlink" title="JSP中的小脚本与表达式"></a><strong>JSP中的小脚本与表达式</strong></h2><p><strong>在JSP页面中计算两个数的和，将结果输出显示</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*,java.text.*&quot;</span> contentType=<span class="string">&quot;text/html; charset=utf-8&quot;</span> %&gt;<span class="comment">//指令</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>计算求和<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">		两个数的求和结果为：</span></span><br><span class="line"><span class="xml">		&lt;%</span></span><br><span class="line"><span class="xml">			int numA = 4, numB = 5 ;//小脚本</span></span><br><span class="line"><span class="xml">			int result = numA+numB;</span></span><br><span class="line"><span class="xml">		%&gt;</span></span><br><span class="line"><span class="xml">		&lt;%=result %&gt;//表达式</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="JSP中的声明"><a href="#JSP中的声明" class="headerlink" title="JSP中的声明"></a><strong>JSP中的声明</strong></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;%! Java代码%&gt;</span><br></pre></td></tr></table></figure>

<p><strong>JSP页面中定义方法对日期进行格式化</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*,java.text.*&quot;</span>  </span><br><span class="line">    contentType=<span class="string">&quot;text/html; charset=utf-8&quot;</span>%&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;%！</span></span><br><span class="line"><span class="xml">    String formatDate(Date d)&#123;</span></span><br><span class="line"><span class="xml">        SimpleDateFormat formater = </span></span><br><span class="line"><span class="xml">             new SimpleDateFormat(&quot;yyyy年MM月dd日&quot;);</span></span><br><span class="line"><span class="xml">return formater.format(d);</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">%&gt;你好，今天是</span></span><br><span class="line"><span class="xml">&lt;%=formatDate(new Date()) %&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="JSP中的注释"><a href="#JSP中的注释" class="headerlink" title="JSP中的注释"></a><strong>JSP中的注释</strong></h2><p><strong>HTML的注释</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- html注释--&gt;</span><br></pre></td></tr></table></figure>



<p><strong>JSP注释</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;%-- JSP注释--%&gt;</span><br></pre></td></tr></table></figure>



<p><strong>在JSP脚本中注释</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;% <span class="comment">//单行注释 %&gt; </span></span><br><span class="line">&lt;%  <span class="comment">/*多行注释 */</span> %&gt;</span><br></pre></td></tr></table></figure>

<p><strong><img src="/2021/08/09/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/image-20210811104913589.png" alt="image-20210811104913589"></strong></p>
<h2 id="JSP-执行过程"><a href="#JSP-执行过程" class="headerlink" title="JSP 执行过程"></a><strong>JSP 执行过程</strong></h2><p>​    <strong>Web容器处理JSP文件请求需要经过3个阶段</strong></p>
<p>​    <strong>1.翻译阶段    2.编译阶段    3.执行阶段</strong></p>
<p><strong><img src="/2021/08/09/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/image-20210811105025243.png" alt="image-20210811105025243"></strong></p>
<p><strong>第一次请求之后，Web容器可以重用已经编译好的字节码文件</strong></p>
<p><strong>如果对JSP文件进行了修改，Web容器会重新对JSP文件进行翻译和编译</strong> </p>
<p><strong><img src="/2021/08/09/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/image-20210811105133180.png" alt="image-20210811105133180"></strong></p>
<h1 id="部署Web项目"><a href="#部署Web项目" class="headerlink" title="部署Web项目"></a><strong>部署Web项目</strong></h1><ol>
<li><p><strong>配置Tomcat</strong></p>
<ol>
<li><strong>Window -&gt; Preferences -&gt;MyEclipse -&gt; Servers -&gt; Tomcat</strong></li>
<li><strong>选择Tomcat版本及安装路径</strong></li>
<li><strong>设置为可用状态（Enable）</strong></li>
<li><strong>指定Tomcat运行Java的运行环境</strong></li>
</ol>
</li>
<li><p><strong>部署Web项目</strong></p>
<ol>
<li><p><strong>单击MyEclipse菜单栏上的部署图标<img src="/2021/08/09/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/image-20210811105255170.png" alt="image-20210811105255170"></strong></p>
</li>
<li><p> <strong>选择需要部署的项目</strong></p>
</li>
<li><p> <strong>选择Tomcat服务器并确认</strong></p>
</li>
</ol>
</li>
</ol>
<h2 id="Web程序的调试与排错"><a href="#Web程序的调试与排错" class="headerlink" title="Web程序的调试与排错"></a><strong>Web程序的调试与排错</strong></h2><p><strong><img src="/2021/08/09/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/image-20210811105322283.png" alt="image-20210811105322283"></strong></p>
<h3 id="常见错误：未启动Tomcat"><a href="#常见错误：未启动Tomcat" class="headerlink" title="常见错误：未启动Tomcat"></a><strong>常见错误：未启动Tomcat</strong></h3><h4 id="错误现象"><a href="#错误现象" class="headerlink" title="错误现象"></a><strong>错误现象</strong></h4><p><strong><img src="/2021/08/09/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/image-20210811105341721.png" alt="image-20210811105341721"></strong></p>
<h4 id="排错方法：检查Tomcat服务能否正确运行"><a href="#排错方法：检查Tomcat服务能否正确运行" class="headerlink" title="排错方法：检查Tomcat服务能否正确运行"></a><strong>排错方法：检查Tomcat服务能否正确运行</strong></h4><p><strong><img src="/2021/08/09/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/image-20210811105354965.png" alt="image-20210811105354965"></strong></p>
<h4 id="排除错误："><a href="#排除错误：" class="headerlink" title="排除错误："></a><strong>排除错误：</strong></h4><p><strong>启动Tomcat服务</strong><br><strong>如果控制台上显示Tomcat服务已启动，观察端口号是否与预期端口号一致，按照实际端口号重新运行</strong></p>
<h3 id="常见错误：未部署Web应用"><a href="#常见错误：未部署Web应用" class="headerlink" title="常见错误：未部署Web应用"></a><strong>常见错误：未部署Web应用</strong></h3><h4 id="错误现象-1"><a href="#错误现象-1" class="headerlink" title="错误现象"></a><strong>错误现象</strong></h4><p><strong><img src="/2021/08/09/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/image-20210811105436646.png" alt="image-20210811105436646"></strong></p>
<h4 id="排错方法：检查Web应用是否正确部署"><a href="#排错方法：检查Web应用是否正确部署" class="headerlink" title="排错方法：检查Web应用是否正确部署"></a><strong>排错方法：检查Web应用是否正确部署</strong></h4><h4 id><a href="#" class="headerlink" title></a><strong><img src="/2021/08/09/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/image-20210811105519329.png" alt="image-20210811105519329"></strong></h4><h4 id="排除错误：部署Web应用"><a href="#排除错误：部署Web应用" class="headerlink" title="排除错误：部署Web应用"></a><strong>排除错误：部署Web应用</strong></h4><h3 id="常见错误：-URL输入错误"><a href="#常见错误：-URL输入错误" class="headerlink" title="常见错误： URL输入错误"></a><strong>常见错误： URL输入错误</strong></h3><h4 id="错误现象-2"><a href="#错误现象-2" class="headerlink" title="错误现象"></a><strong>错误现象</strong></h4><p><strong><img src="/2021/08/09/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/image-20210811105610706.png" alt="image-20210811105610706"></strong></p>
<h4 id="排错方法：检查URL"><a href="#排错方法：检查URL" class="headerlink" title="排错方法：检查URL"></a><strong>排错方法：检查URL</strong></h4><p><strong><img src="/2021/08/09/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/image-20210811105711274.png" alt="image-20210811105711274"></strong></p>
<h4 id="排除错误：使用正确的URL"><a href="#排除错误：使用正确的URL" class="headerlink" title="排除错误：使用正确的URL"></a><strong>排除错误：使用正确的URL</strong></h4><h3 id="常见错误：目录不能被引用"><a href="#常见错误：目录不能被引用" class="headerlink" title="常见错误：目录不能被引用"></a><strong>常见错误：目录不能被引用</strong></h3><h4 id="错误现象-3"><a href="#错误现象-3" class="headerlink" title="错误现象"></a><strong>错误现象</strong></h4><p><strong><img src="/2021/08/09/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/image-20210811105807077.png" alt="image-20210811105807077"></strong></p>
<h4 id="排错方法：检查文件的存放位置"><a href="#排错方法：检查文件的存放位置" class="headerlink" title="排错方法：检查文件的存放位置"></a><strong>排错方法：检查文件的存放位置</strong></h4><h4 id="META-INF，WEB-INF文件夹下的内容无法对外发布"><a href="#META-INF，WEB-INF文件夹下的内容无法对外发布" class="headerlink" title="META-INF，WEB-INF文件夹下的内容无法对外发布"></a><strong>META-INF，WEB-INF文件夹下的内容无法对外发布</strong></h4><p><strong><img src="/2021/08/09/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/image-20210811105851155.png" alt="image-20210811105851155"></strong></p>
<p><strong>排除错误：把index.html文件拖至WebRoot文件夹下</strong></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h1><p><strong><img src="/2021/08/09/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/image-20210811110015217.png" alt="image-20210811110015217"></strong></p>
<h1 id="老郑的课堂笔记"><a href="#老郑的课堂笔记" class="headerlink" title="老郑的课堂笔记"></a><strong>老郑的课堂笔记</strong></h1><h2 id="C-S和B-S的区别"><a href="#C-S和B-S的区别" class="headerlink" title="C/S和B/S的区别"></a><strong>C/S和B/S的区别</strong></h2><h2 id="URL-1"><a href="#URL-1" class="headerlink" title="URL"></a><strong>URL</strong></h2><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a><strong>协议</strong></h3><p>​        <strong>http https ftp</strong></p>
<h3 id="ip-端口"><a href="#ip-端口" class="headerlink" title="ip:端口"></a><strong>ip:端口</strong></h3><p>​        <strong>localhost:端口8080</strong><br>​        <strong>127.0.0.1:端口8080</strong><br>​        <strong>192.168.1.1:端口</strong></p>
<h3 id="项目资源地址"><a href="#项目资源地址" class="headerlink" title="项目资源地址"></a><strong>项目资源地址</strong></h3><p>​        <strong>/项目名/文件夹名/网页名</strong><br>​    <strong><a href="http://localhost:8080/%E9%A1%B9%E7%9B%AE%E5%90%8D/%E7%BD%91%E9%A1%B5%E5%90%8D">http://localhost:8080/项目名/网页名</a></strong></p>
<h2 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a><strong>修改端口</strong></h2><p>​    <strong>conf文件夹下，server.xml文件里，Connector节点的port属性</strong></p>
<p><strong>只修改jsp页面的代码，无需重启服务</strong><br><strong>如修改了java代码，必须重启服务，代码才会重新编译生效</strong></p>
<h2 id="jsp页面包含的元素"><a href="#jsp页面包含的元素" class="headerlink" title="jsp页面包含的元素"></a><strong>jsp页面包含的元素</strong></h2><p>​    <strong>html、css、js等网页元素都是可以的</strong></p>
<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a><strong>指令</strong></h3><p>​        <strong>&lt;%@page %&gt; &lt;%@include %&gt; &lt;%@taglib %&gt;</strong></p>
<h3 id="小脚本："><a href="#小脚本：" class="headerlink" title="小脚本："></a><strong>小脚本：</strong></h3><p>​            <strong>编写普通java代码(类似在main方法里编写)</strong><br>​        <strong>&lt;% 普通java代码 %&gt;</strong></p>
<h3 id="表达式："><a href="#表达式：" class="headerlink" title="表达式："></a><strong>表达式：</strong></h3><p>​            <strong>在页面上输出内容(和out.print()类似)</strong><br>​        <strong>&lt;%=变量名/值 %&gt;</strong></p>
<h3 id="声明："><a href="#声明：" class="headerlink" title="声明："></a><strong>声明：</strong></h3><p>​            <strong>类似是在类里面编写代码，属性/方法</strong><br>​        <strong>&lt;%!  java代码  %&gt;</strong></p>
<h3 id="注释："><a href="#注释：" class="headerlink" title="注释："></a><strong>注释：</strong></h3><p>​            <strong>在代码里看的到，在网页里看不到</strong><br>​        <strong>&lt;%– 注释内容 –%&gt;</strong></p>
<h2 id="web容器处理jsp页面的步骤"><a href="#web容器处理jsp页面的步骤" class="headerlink" title="web容器处理jsp页面的步骤"></a><strong>web容器处理jsp页面的步骤</strong></h2><h3 id="jsp页面第一次被访问："><a href="#jsp页面第一次被访问：" class="headerlink" title="jsp页面第一次被访问："></a><strong>jsp页面第一次被访问：</strong></h3><p>​        <strong>jsp页面翻译成.java文件</strong><br>​        <strong>.java文件编译成.class文件</strong><br>​        <strong>执行.class文件把结果传输到用户的浏览器</strong></p>
<h3 id="jsp页面非初次访问"><a href="#jsp页面非初次访问" class="headerlink" title="jsp页面非初次访问"></a><strong>jsp页面非初次访问</strong></h3><p>​        <strong>执行.class文件把结果传输到用户的浏览器</strong><br>​    <strong>但是如果我们修改了jsp页面，那么再次访问，jsp页面依然会经历翻译、编译、执行</strong></p>
]]></content>
      <categories>
        <category>使用JSP／Servlet技术开发新闻发布系统</category>
      </categories>
  </entry>
  <entry>
    <title>安装Hexo</title>
    <url>/2021/07/09/%E5%AE%89%E8%A3%85Hexo/</url>
    <content><![CDATA[<h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><ol>
<li><p>先安装git和node</p>
<p><img src="/2021/07/09/%E5%AE%89%E8%A3%85Hexo/image-20210709203602142.png" alt="image-20210709203602142"></p>
</li>
<li><p>安装hexo</p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli	<span class="comment">//下载安装Hexo</span></span><br><span class="line">hexo init Hexo <span class="comment">//安装到当前目录的hexo文件夹内</span></span><br><span class="line">cd Hexo	<span class="comment">//切换到站点目录</span></span><br><span class="line">npm install	<span class="comment">//安装hexo到当前文件夹</span></span><br><span class="line">hexo clean	<span class="comment">//清除缓存</span></span><br><span class="line">hexo g	<span class="comment">//重新生成代码</span></span><br><span class="line">heox s	<span class="comment">//部署到本地 	开启hexo服务,到localhost:4000可以查看网页</span></span><br></pre></td></tr></table></figure>

<p>输入玩hexo s 之后服务会启动,在浏览器输入localhost:4000就可以访问  <strong>Ctrl+C</strong>来停止服务</p>
</li>
<li><p>安装完成之后,制定文件夹目录下有:</p>
<ul>
<li>node_modules: 依赖包</li>
<li>public：存放生成的页面</li>
<li>scaffolds：生成文章的一些模板</li>
<li>source：用来存放你的文章</li>
<li>themes：主题</li>
<li><strong>_config.yml: 博客的配置文件</strong></li>
</ul>
</li>
<li><p>hexo的基本配置</p>
<ol>
<li><p>_config.yml文件描述</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: https:<span class="comment">//hexo.io/docs/configuration.html</span></span><br><span class="line">## Source: https:<span class="comment">//github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"># Site</span><br><span class="line">title: Hexo	<span class="comment">//网站标题</span></span><br><span class="line">subtitle: <span class="string">&#x27;&#x27;	//网站副标题</span></span><br><span class="line"><span class="string">description: &#x27;</span><span class="string">&#x27;	//网站描述		主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词</span></span><br><span class="line"><span class="string">keywords:</span></span><br><span class="line"><span class="string">author: John Doe	//您的名字		参数用于主题显示文章的作者。</span></span><br><span class="line"><span class="string">language: en		//网站使用的语言</span></span><br><span class="line"><span class="string">timezone: &#x27;</span><span class="string">&#x27;		//网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># URL</span></span><br><span class="line"><span class="string">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;</span>https:<span class="comment">//username.github.io/project&#x27;</span></span><br><span class="line">url: http:<span class="comment">//example.com		//网址</span></span><br><span class="line">permalink: :year/:month/:day/:title/	<span class="comment">//文章的 永久链接 格式</span></span><br><span class="line">permalink_defaults:						<span class="comment">//永久链接中各部分的默认值</span></span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: <span class="literal">true</span> # Set to <span class="literal">false</span> to remove trailing <span class="string">&#x27;index.html&#x27;</span> from permalinks</span><br><span class="line">  trailing_html: <span class="literal">true</span> # Set to <span class="literal">false</span> to remove trailing <span class="string">&#x27;.html&#x27;</span> from permalinks</span><br><span class="line"></span><br><span class="line"># Directory</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: <span class="keyword">public</span></span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"># Writing</span><br><span class="line">new_post_name: :title.md # File name of <span class="keyword">new</span> posts</span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: <span class="literal">false</span> # Transform title into titlecase</span><br><span class="line">external_link:</span><br><span class="line">  enable: <span class="literal">true</span> # Open external links in <span class="keyword">new</span> tab</span><br><span class="line">  field: site # Apply to the whole site</span><br><span class="line">  exclude: <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="string">filename_case: 0</span></span><br><span class="line"><span class="string">render_drafts: false</span></span><br><span class="line"><span class="string">post_asset_folder: false</span></span><br><span class="line"><span class="string">relative_link: false</span></span><br><span class="line"><span class="string">future: true</span></span><br><span class="line"><span class="string">highlight:</span></span><br><span class="line"><span class="string">  enable: true</span></span><br><span class="line"><span class="string">  line_number: true</span></span><br><span class="line"><span class="string">  auto_detect: false</span></span><br><span class="line"><span class="string">  tab_replace: &#x27;</span>&#x27;</span><br><span class="line">  wrap: <span class="literal">true</span></span><br><span class="line">  hljs: <span class="literal">false</span></span><br><span class="line">prismjs:</span><br><span class="line">  enable: <span class="literal">false</span></span><br><span class="line">  preprocess: <span class="literal">true</span></span><br><span class="line">  line_number: <span class="literal">true</span></span><br><span class="line">  tab_replace: <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Home page setting</span></span><br><span class="line"><span class="string"># path: Root path for your blogs index page. (default = &#x27;</span><span class="string">&#x27;)</span></span><br><span class="line"><span class="string"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="string"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="string">index_generator:</span></span><br><span class="line"><span class="string">  path: &#x27;</span>&#x27;</span><br><span class="line">  per_page: <span class="number">10</span></span><br><span class="line">  order_by: -date</span><br><span class="line"></span><br><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"># Metadata elements</span><br><span class="line">#<span class="meta"># https:<span class="comment">//developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span></span><br><span class="line">meta_generator: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"># Date / Time format</span><br><span class="line">## Hexo uses Moment.js to parse <span class="keyword">and</span> display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">#<span class="meta"># http:<span class="comment">//momentjs.com/docs/#/displaying/format/</span></span></span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line">## updated_option supports <span class="string">&#x27;mtime&#x27;</span>, <span class="string">&#x27;date&#x27;</span>, <span class="string">&#x27;empty&#x27;</span></span><br><span class="line">updated_option: <span class="string">&#x27;mtime&#x27;</span></span><br><span class="line"></span><br><span class="line"># Pagination</span><br><span class="line">## Set per_page to <span class="number">0</span> to disable pagination</span><br><span class="line">per_page: <span class="number">10</span></span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"># Include / Exclude file(s)</span><br><span class="line">#<span class="meta"># <span class="meta-keyword">include</span>:/exclude: options only apply to the <span class="meta-string">&#x27;source/&#x27;</span> folder</span></span><br><span class="line">include:</span><br><span class="line">exclude:</span><br><span class="line">ignore:</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https:<span class="comment">//hexo.io/plugins/</span></span><br><span class="line">## Themes: https:<span class="comment">//hexo.io/themes/</span></span><br><span class="line">theme: landscape<span class="comment">//主题!!!</span></span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https:<span class="comment">//hexo.io/docs/one-command-deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  type: <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><ol>
<li><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">date: <span class="number">2013</span>/<span class="number">7</span>/<span class="number">13</span> <span class="number">20</span>:<span class="number">46</span>:<span class="number">25</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p>
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>layout</td>
<td>布局</td>
</tr>
<tr>
<td>title</td>
<td>标题</td>
</tr>
<tr>
<td>date</td>
<td>建立日期</td>
</tr>
<tr>
<td>updated</td>
<td>更新日期</td>
</tr>
<tr>
<td>updated</td>
<td>开启文章的评论功能</td>
</tr>
<tr>
<td>tags</td>
<td>标签（不适用于分页）</td>
</tr>
<tr>
<td>categories</td>
<td>分类（不适用于分页）</td>
</tr>
<tr>
<td>permalink</td>
<td>覆盖文章网址</td>
</tr>
</tbody></table>
<p>其中，分类和标签需要区别一下，分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">- Diary</span><br><span class="line">tags:</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h3 id="layout（布局）"><a href="#layout（布局）" class="headerlink" title="layout（布局）"></a>layout（布局）</h3><ol>
<li><p>当你每一次使用代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> paper</span><br></pre></td></tr></table></figure>

<p>它其实默认使用的是<code>post</code>这个布局，也就是在<code>source</code>文件夹下的<code>_post</code>里面。</p>
<p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p>
<table>
<thead>
<tr>
<th>布局</th>
<th>路径</th>
</tr>
</thead>
<tbody><tr>
<td>post</td>
<td>source/_posts</td>
</tr>
<tr>
<td>page</td>
<td>source</td>
</tr>
<tr>
<td>draft</td>
<td>source/_drafts</td>
</tr>
</tbody></table>
<p>而new这个命令其实是：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>只不过这个layout默认是post罢了。</p>
</li>
<li><h4 id="page"><a href="#page" class="headerlink" title="page"></a>page</h4><p>如果你想另起一页，那么可以使用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page board</span><br></pre></td></tr></table></figure>

<p>系统会自动给你在source文件夹下创建一个board文件夹，<a href="http://以及board文件夹中的index.md/">以及board文件夹中的index.md</a>，这样你访问的board对应的链接就是<code>http://xxx.xxx/board</code></p>
</li>
<li><h4 id="draft"><a href="#draft" class="headerlink" title="draft"></a>draft</h4><p>draft是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> draft newpage</span><br></pre></td></tr></table></figure>

<p>这样会在source/_draft中新建一个newpage.md文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo server --draft</span><br></pre></td></tr></table></figure>

<p>在本地端口中开启服务预览。</p>
<p>如果你的草稿文件写完了，想要发表到post中，</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo publish draft newpage</span><br></pre></td></tr></table></figure>

<p>就会自动把newpage.md发送到post中。</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="文章字数统计"><a href="#文章字数统计" class="headerlink" title="文章字数统计"></a>文章字数统计</h2><p>`.安装字数统计插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-symbols-count-time --save</span></span><br></pre></td></tr></table></figure>

<p>2.编辑<strong>主题配置文件</strong>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span>     </span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span>     <span class="comment"># 文章字数</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">true</span>    <span class="comment"># 本站所有文章字数</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">200</span></span><br></pre></td></tr></table></figure>





<h2 id="搜索服务"><a href="#搜索服务" class="headerlink" title="搜索服务"></a>搜索服务</h2><h3 id="Local-Search"><a href="#Local-Search" class="headerlink" title="Local Search"></a>Local Search</h3><p>1.安装local search插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-generator-searchdb --save</span></span><br></pre></td></tr></table></figure>

<p>2.编辑站点配置文件，新增以下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>3.编辑主题配置文件，启用local search功能：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>





<h2 id="修改文章底部标签"><a href="#修改文章底部标签" class="headerlink" title="修改文章底部标签[#]#"></a>修改文章底部标签[#]#</h2><p>1.打开编辑<code>themes\next\layout\_macro\post.swig</code></p>
<p>2.<code>Ctrl+F</code>找到<code>rel=&quot;tag&quot;&gt;#</code></p>
<p>3.将<code>#</code>替换为<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p>
<h2 id="文章底部添加”本文结束”"><a href="#文章底部添加”本文结束”" class="headerlink" title="文章底部添加”本文结束”"></a>文章底部添加”本文结束”</h2><p>打开编辑<code>themes\next\layout\_macro\post.swig</code>，在文章结束的地方添加如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if not is_index %&#125;</span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;color: #ccc;font-size:14px;&quot;</span>&gt;</span></span><br><span class="line">		---------Thanks for your attention---------</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>





<p>文章添加阴影、透明效果<br>打开 theme/next/source/css/_custom/custom.styl，添加以下代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主页文章添加阴影效果</span></span><br><span class="line">.post &#123;</span><br><span class="line">   margin-top: <span class="number">60</span>px;</span><br><span class="line">   margin-bottom: <span class="number">60</span>px;</span><br><span class="line">   padding: <span class="number">25</span>px;</span><br><span class="line">   background:rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.9</span>) none repeat scroll !important;</span><br><span class="line">   -webkit-box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span><span class="function">px <span class="title">rgba</span><span class="params">(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, <span class="number">.5</span>)</span></span>;</span><br><span class="line">   -moz-box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span><span class="function">px <span class="title">rgba</span><span class="params">(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">.5</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>新建文章时，在相同目录下创建同名文件夹（便于图片管理）<br>打开站点配置文件_config.yml，搜索post_asset_folder字段，设置其值为true<br>安装hexo-asset-image：npm install hexo-asset-image –save<br>此时hexo new “fileName”会在/source/_posts目录下创建同名的文件夹<br>只需在 md 文件里使用 <img src="/2021/07/09/%E5%AE%89%E8%A3%85Hexo/%E5%9B%BE%E7%89%87%E5%90%8D.jpg" alt="title"> ，无需路径名就可以插入图片。</p>
<h2 id="首页显示文章摘要（阅读全文）及配图（文章内不重复显示）"><a href="#首页显示文章摘要（阅读全文）及配图（文章内不重复显示）" class="headerlink" title="首页显示文章摘要（阅读全文）及配图（文章内不重复显示）"></a>首页显示文章摘要（阅读全文）及配图（文章内不重复显示）</h2><p>打开<code>themes/next/</code>下的<code>_config.yml</code>，查找<code>excerpt</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">auto_excerpt: <span class="comment">//自动摘录</span></span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  length: <span class="number">150</span> <span class="comment">//摘录字数</span></span><br><span class="line">read_more_btn: <span class="literal">true</span> <span class="comment">//显示全文按钮</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>打开<code>themes\next\layout\_macro\post.swig</code>，在<code>&#123;% if is_index %&#125;</code>和<code>&#123;% if post.description and theme.excerpt_description %&#125;</code>之间添加如下内容</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% <span class="keyword">if</span> post.images %&#125;</span><br><span class="line">	&lt;div <span class="class"><span class="keyword">class</span>=</span><span class="string">&quot;out-img-topic&quot;</span>&gt;</span><br><span class="line">		&lt;img src=&#123;&#123; post.images &#125;&#125; class=<span class="string">&quot;img-topic&quot;</span>&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>向<code>themes\next\source\css\_custom\custom.styl</code>中添加如下内容</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文章摘要配图</span></span><br><span class="line"><span class="comment">//图片外部的容器方框，限制图片大小</span></span><br><span class="line">.out-img-topic &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  max-height:<span class="number">500</span>px;</span><br><span class="line">  margin-bottom: <span class="number">24</span>px;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//图片</span></span><br><span class="line">img.img-topic &#123;</span><br><span class="line">  display: block ;</span><br><span class="line">  margin-left: <span class="number">.7</span>em;</span><br><span class="line">  margin-right: <span class="number">.7</span>em;</span><br><span class="line">  padding: <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">float</span>: right;</span><br><span class="line">  clear: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将摘要图片储存于<code>themes\next\source\images</code>中，建议<strong>在此路径下</strong>单独建一个文件夹存放摘要图片，<strong>这个图片和文章中插图的存放路径不同，不是一个概念</strong>。然后在文章YAML头信息中添加images字段，将值填为<code>/images/imagename.jpg</code>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">images: <span class="string">&quot;images/文章摘要配图/Win10桌面.png&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="博客总访问量统计"><a href="#博客总访问量统计" class="headerlink" title="博客总访问量统计"></a>博客总访问量统计</h2><p> 打开<code>themes/next/</code>下的<code>_config.yml</code>，查找<code>busuanzi</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  total_visitors: <span class="literal">false</span></span><br><span class="line">  total_visitors_icon: user</span><br><span class="line">  total_views: <span class="literal">false</span></span><br><span class="line">  total_views_icon: eye</span><br><span class="line">  post_views: <span class="literal">true</span></span><br><span class="line">  post_views_icon: eye</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当前版本的NexT集成的不蒜子，总访问人数和人次只是分别用icon来表示，故取消显示，自行改动</p>
<ul>
<li>打开<code>/themes/next/layout/_partials/footer.swig</code>，在最后添加如下内容：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt;span id=<span class="string">&quot;busuanzi_container_site_uv&quot;</span>&gt;</span><br><span class="line">  本站访问次数：&lt;span class=<span class="string">&quot;busuanzi-value&quot;</span> id=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="文章末尾添加版权声明"><a href="#文章末尾添加版权声明" class="headerlink" title="文章末尾添加版权声明"></a>文章末尾添加版权声明</h2><p><strong>配置：</strong><br>查找主题配置文件<code>themes/next/_config.yml</code>中的<code>creative_commons</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">creative_commons:</span><br><span class="line">  license: by-nc-sa</span><br><span class="line">  sidebar: <span class="literal">false</span></span><br><span class="line">  post: <span class="literal">true</span>  # 将<span class="literal">false</span>改为<span class="literal">true</span>即可显示版权信息</span><br><span class="line">  language:</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>教程类</category>
      </categories>
  </entry>
  <entry>
    <title>第七章 多线程</title>
    <url>/2021/06/04/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="一、进程"><a href="#一、进程" class="headerlink" title="一、进程"></a>一、进程</h2><h3 id="1-什么是进程："><a href="#1-什么是进程：" class="headerlink" title="1.什么是进程："></a>1.什么是进程：</h3><p>​    继承是程序的一次动态执行过程，他对应了从代码加载、执行至完成的一个完整过程，这个过程也是程序本身从产生、发展至消亡的过程。</p>
<p>​    操作系统同时管理一个计算机系统中的多个进程，让计算机系统中的多个进程轮流使用CPU资源，或者共享操作系统的其他资源。</p>
<span id="more"></span>

<h3 id="2-进程的特点："><a href="#2-进程的特点：" class="headerlink" title="2.进程的特点："></a>2.进程的特点：</h3><ul>
<li><p> 继承是系统运行程序的基本单位。</p>
</li>
<li><p>每一个进程都有自己独立的一块内存空间，一组系统资源。</p>
</li>
<li><p>每一个进程的内部数据和状态都是完全独立的。</p>
</li>
</ul>
<h2 id="二、线程"><a href="#二、线程" class="headerlink" title="二、线程"></a>二、线程</h2><h3 id="1-什么是线程："><a href="#1-什么是线程：" class="headerlink" title="1.什么是线程："></a>1.什么是线程：</h3><p>​    线程是进程中执行运算的最小单位，可完成一个独立的顺序控制流程。每个进程中，必须至少建立一个线程（这个线程成为主线程）来作为这个程序的入口点。</p>
<p>​    如果在一个进程中同时运行多个线程来完成不同的工作，称之为“多线程”。    是多个线程共享相同的地址空间并且共同分享同一个进程    ，这些进程可以在操作系统的管理下并发执行。</p>
<h2 id="三、多线程"><a href="#三、多线程" class="headerlink" title="三、多线程"></a>三、多线程</h2><h3 id="1-什么是多线程"><a href="#1-什么是多线程" class="headerlink" title="1.什么是多线程"></a>1.什么是多线程</h3><ul>
<li>充分利用CPU资源：执行单线程程序时，若程序发生阻塞，CPU可能会处于空闲状态，这将会造成计算机资源浪费，而使用多线程可以在某个线程处理休眠或阻塞状态时运行其他线程，这样大大提高了资源利用率。</li>
<li>简化编程模型：一个即长又复杂的进程可以分为多个线程，成为几个独立的运行部分，如果写成单线程程序可能需要多重循环判断，而如果使用多线程控制，每个线程仅需要实现简单的流程，简化了程序逻辑。</li>
<li>带来良好的用户体验：由于多个线程可以交替执行，减少避免了因程序阻塞或意外情况造成的响应过慢现象。</li>
</ul>
<h3 id="2-如何实现多线程"><a href="#2-如何实现多线程" class="headerlink" title="2.如何实现多线程"></a>2.如何实现多线程</h3><p> 用 <strong>Thread</strong> 类      <strong>Thread</strong> 类支持多线程</p>
<table>
<thead>
<tr>
<th>构造方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Thread（）</strong></td>
<td>分配新的 <strong>Thread（）</strong> 对象</td>
</tr>
<tr>
<td><strong>Thread（Runnable targe）</strong></td>
<td>分配新的 <strong>Thread（）</strong> 对象， <strong>target</strong> 为 <strong>run（）</strong> 方法被调用的对象</td>
</tr>
<tr>
<td><strong>Thread（Runnable targe，String name）</strong></td>
<td>分配新的 <strong>Thread（）</strong> 对象， <strong>target</strong> 为 <strong>run（）</strong> 方法被调用的对象，<strong>name</strong> 作为新线程的名称</td>
</tr>
<tr>
<td><strong>void run（）</strong></td>
<td>执行任务操作的方法</td>
</tr>
<tr>
<td><strong>void start（）</strong></td>
<td>使线程开始执行，Java虚拟机代用该线程的 <strong>run（）</strong> 方法</td>
</tr>
<tr>
<td><strong>void sleep(long millis)</strong></td>
<td>在指定的毫秒数内让当前正在执行的线程休眠（暂停执行）</td>
</tr>
<tr>
<td><strong>String getName（）</strong></td>
<td>返回线程的名称</td>
</tr>
<tr>
<td><strong>int getPriorty（）</strong></td>
<td>返回线程的优先级</td>
</tr>
<tr>
<td><strong>void setPriority（int newPriority）</strong></td>
<td>更改线程的优先级</td>
</tr>
<tr>
<td><strong>static Thread currentThread（）</strong></td>
<td>返回当前正在执行的线程对象的引用</td>
</tr>
<tr>
<td><strong>boolean isAlive（）</strong></td>
<td>测速线程是否属于活动状态</td>
</tr>
<tr>
<td><strong>void join（）</strong></td>
<td>等待该线程终止</td>
</tr>
<tr>
<td><strong>void interrupt</strong></td>
<td>中断线程</td>
</tr>
<tr>
<td><strong>void yield（）</strong></td>
<td>暂停当前正在执行的线程对象，并执行其他线程</td>
</tr>
</tbody></table>
<h3 id="3-主线程"><a href="#3-主线程" class="headerlink" title="3.主线程"></a>3.主线程</h3><p>​    每个进程至少有一个主线程。他是从程序开始的时候开始执行的。</p>
<ol>
<li><h4 id="主线程的重要性主要体现在以下两个方面"><a href="#主线程的重要性主要体现在以下两个方面" class="headerlink" title="主线程的重要性主要体现在以下两个方面"></a>主线程的重要性主要体现在以下两个方面</h4></li>
</ol>
<ul>
<li>他是产生其他子线程的线程</li>
<li>通常它必须最后完成执行，因为它执行各种关闭动作</li>
</ul>
<ol start="2">
<li><h4 id="如何使用线程"><a href="#如何使用线程" class="headerlink" title="如何使用线程"></a>如何使用线程</h4><ol>
<li><h5 id="定义一个线程，同时指明这个线程所要执行的代码，即期望完成的功能"><a href="#定义一个线程，同时指明这个线程所要执行的代码，即期望完成的功能" class="headerlink" title="定义一个线程，同时指明这个线程所要执行的代码，即期望完成的功能"></a>定义一个线程，同时指明这个线程所要执行的代码，即期望完成的功能</h5></li>
<li><h5 id="创建线程对象"><a href="#创建线程对象" class="headerlink" title="创建线程对象"></a>创建线程对象</h5><p>创建线程类两种方法，一种是继承 <strong>Thread</strong> 类，另一种是实现 <strong>Runnable</strong> 接口。</p>
<ol>
<li> 继承 <strong>Thread</strong> 类创建线程</li>
<li>需要重写 <strong>Thread</strong> 类并重写 <strong>Thread</strong> 类的 <strong>run（）</strong> 方法。因为 <strong>Thread</strong> 类的 <strong>run（）</strong> 方法是线程要执行操作任务，所以线程要执行的操作代码都要写在 <strong>run（）</strong> 方法中，并通过调用 <strong>start（）</strong> 方法启动线程后调用。</li>
<li>实现 <strong>Runnable</strong> 接口创建线程<ol>
<li>  <strong>Runnable</strong> 接口定义在 <strong>java.lang</strong> 包中，其中声明了一个抽象方法 <strong>run（）</strong> ，即 <strong>public void run（）</strong> ，一个类可以同实现 <strong>Runnable</strong> 接口并实现其 <strong>run（）</strong> 方法完成线程的活动，已实现的 <strong>run（）</strong> 方法成为该线程的线程体。任何实现 <strong>Runnable</strong> 接口的对象都可以作为一个线程的目标对象。</li>
</ol>
</li>
</ol>
</li>
<li><h5 id="启动线程"><a href="#启动线程" class="headerlink" title="启动线程"></a>启动线程</h5></li>
<li><h5 id="终止线程"><a href="#终止线程" class="headerlink" title="终止线程"></a>终止线程</h5></li>
</ol>
</li>
<li><h4 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h4><p>如何线程都具有五种状态，即创建，就绪，运行，阻塞，死亡状态。</p>
<p>![线程的状态](第七章 多线程\第七章多线程1.png)</p>
<ol>
<li><p>创建状态</p>
<pre><code>     - 在程序中用构造方法创建了一个线程对象后，新的线程对象就处于创建状态，此时，他已经获取了相应的资源，但还没有处于可运行的状态，这时可以通过 **Thread** 类的方法来设置线程对象的属性。如线程名，设置线程的优先级等。
</code></pre>
</li>
<li><p>就绪状态</p>
<ul>
<li>线程创建玩之后，就可以通过调用 <strong>start（）</strong> 方法启动线程，即进入就绪状态，此时，线程将进入线程队列排队，等待CPU资源，这表明他已经具备了运行条件，在未获得CPU资源时，仍然不能真正执行。</li>
</ul>
</li>
<li><p>运行状态</p>
<ul>
<li>当就绪状态的线程获得CPU资源时，即可转入运行状态，执行 <strong>run（）</strong> 方法。对只有一个CPU的计算机而言，任何时空只能有一个处于运行状态的线程占用CPU，即获得CPU资源。</li>
</ul>
</li>
<li><p>阻塞状态</p>
<ul>
<li><p>一个正在运行的线程因某种原因不能继续运行时，进入阻塞庄园。阻塞状态时一种“不可运行”的状态，而处于这种状态的线程在得到一个特定的事件后转回可运行状态。</p>
</li>
<li><p>可能使线程暂停执行的条件如下：</p>
<ul>
<li>由于线程的优先级比较低，因此他不能获得CPU资源。</li>
<li>使用 <strong>slept（）</strong> 方法使线程休眠</li>
<li>通过调用 <strong>wait（）</strong> 方法，使线程等待</li>
<li>通过调用 <strong>yield（）</strong> 线程显式让出CPU控制权。</li>
<li>线程由于等待一个文件，I/O事件被阻塞</li>
</ul>
</li>
</ul>
<ol start="5">
<li>死亡状态<ul>
<li>一个线程的 <strong>run（）</strong> 方法运行完毕，线程则进入死亡状态，处于死亡状态的线程不具有继续运行的能力。</li>
</ul>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h4 id="4-线程的优先级"><a href="#4-线程的优先级" class="headerlink" title="4.线程的优先级"></a>4.线程的优先级</h4><p>​    懂同一时刻有一个或得个线程处于可运行状态时，他们需要排队等待CPU资源，每个线程会自动获得一个线程的优先级，优先级的高低反映线程的重要或紧急程度。</p>
<p>​    线程的优先级用1~10表示，1表示优先级最低，10表示优先级最高，默认值是5。</p>
<h4 id="5-线程的休眠"><a href="#5-线程的休眠" class="headerlink" title="5. 线程的休眠"></a>5. 线程的休眠</h4><p>​    在程序程序组允许一个线程进行短暂休眠，直接调用 <strong>Thread.sleep()</strong> 方法即可实现线程的休眠</p>
<p>​    <strong>sleep（）</strong> 方法会让当前线程休眠（停止执行）mills毫秒，线程由运行中的状态进入不可运行状态，睡眠时间过后会再次进入就绪状态，需要判断他是否死亡 需要处理 <strong>InterruptedException</strong> 异常。</p>
<h4 id="6-线程的强制运行"><a href="#6-线程的强制运行" class="headerlink" title="6. 线程的强制运行"></a>6. 线程的强制运行</h4><p>​    <strong>join()</strong> 方法使当前的线程暂停执行，等待调用该方法的线程结束后再继续执行本线程。它有三个重载方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">long</span> mills)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">long</span> mills,<span class="keyword">int</span> nanos)</span></span></span><br></pre></td></tr></table></figure>

<p>需要判断他是否死亡 需要处理 <strong>InterruptedException</strong> 异常。</p>
<h4 id="7-线程的礼让"><a href="#7-线程的礼让" class="headerlink" title="7.线程的礼让"></a>7.线程的礼让</h4><p>​    <strong>yield（）</strong> 方法可以暂停当前的线程执行，允许其他线程具有相同优先级的线程获得运行机会，该线程仍处于就绪状态，不转为阻塞状态，此时相同现在其他相同或更高优先级的线程执行，如无其他相同或更高优先级的线程，则该线程继续执行。</p>
<h4 id="8-线程的同步"><a href="#8-线程的同步" class="headerlink" title="8.线程的同步"></a>8.线程的同步</h4><p>​    有一些同时运行的线程需要共享数据，此时就需要考虑其他线程的状态和行为，否则不能保证程序运行结果的准确性。</p>
<p>​    如何实现：</p>
<p>​    一个线程类如果是通过实现 <strong>Runnable</strong> 接口实现的，那么类中的属性有可能被多个该类的线程对象共享，就有可能引发线程不同步的问题。</p>
<p>采用线程同步有两种方式 </p>
<ol>
<li><p>同步方法<br> 使用 <strong>synchronized</strong> 修饰的方法控制对类成员的访问。每个类实例对应一把锁，方法一旦执行，就独占该锁。直到从该方法返回时才将锁释放，从此以后被阻塞的线程方能获得该锁，重新进入可执行状态。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过哎方法声明中加入synchronized关键字来声明同步方法</span></span><br><span class="line">	访问修饰符 <span class="keyword">synchronized</span> 返回值类型 方法名 （参数列表）&#123;<span class="comment">//省略方法体。。。。。。&#125;</span></span><br><span class="line">或者</span><br><span class="line">    <span class="keyword">synchronized</span> 访问修饰符 返回值类型 方法名 （参数列表）&#123;<span class="comment">//省略方法体。。。。。。&#125;</span></span><br></pre></td></tr></table></figure>
<p> 在语法中：</p>
<p> ​    <strong>synchronized</strong> 是同步关键词。</p>
<p> ​    访问修饰符是指 <strong>public</strong> ， <strong>private</strong> 等。</p>
</li>
<li><p>同步代码块</p>
<p> 代码块即使用{}括起来的一段代码，使用 <strong>synchronized</strong> 关键字修饰的代码块，成为同步代码块。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> （syncObject）&#123;</span><br><span class="line">	<span class="comment">//需要同步的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  <strong>synchronized</strong> 块中的代码必须获得对象 <strong>syncObject</strong> 的锁才能执行，具体机制和代码同步一致。可以制定上锁的对象。</p>
</li>
<li><p>常见类型对比</p>
<ol>
<li><p><strong>Hashtable &amp;&amp; HashMap</strong></p>
<ul>
<li><p><strong>Hashtable</strong></p>
<p>​    1. 继承 关系</p>
<p>​        实现了<strong>Map</strong>接口，<strong>Hashtable</strong>继承<strong>Dictionary</strong>类</p>
<p>​    2. 线程安全，效率较低</p>
<p>​    3. 键和值都不允许为<strong>null</strong></p>
</li>
<li><p><strong>HashMap</strong></p>
<ol>
<li>继承关系</li>
</ol>
<p>​        实现了<strong>Map</strong>接口，继承<strong>AbstractMap</strong>类</p>
<ol start="2">
<li><p>非线程安全，效率较高</p>
</li>
<li><p>键和值都允许为<strong>null</strong></p>
</li>
</ol>
</li>
</ul>
</li>
<li><p><strong>StringBuffer</strong> <strong>&amp;&amp;</strong> <strong>StringBuilder</strong></p>
<p> 前者线程安全，后者非线程安全</p>
</li>
</ol>
<h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2></li>
</ol>
<p>![第七章多线程2](第七章 多线程\第七章多线程2.png)</p>
]]></content>
      <categories>
        <category>使用Java实现面向对象编程整理</category>
      </categories>
  </entry>
  <entry>
    <title>第三章 多态</title>
    <url>/2021/06/04/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<h2 id="1-什么是多态"><a href="#1-什么是多态" class="headerlink" title="1.什么是多态"></a>1.什么是多态</h2><p>​    多态是具有表现多种形态的能力的特征</p>
<p>​    同一种操作，由于条件不同，产生的结果也不同</p>
<p>​    多态：同一个引用类型，使用不同的实例而执行不同操作 </p>
<p>​    多态就是子类转换成父类    父类类型new子类对象</p>
<span id="more"></span>

<h2 id="2-如何实现多态"><a href="#2-如何实现多态" class="headerlink" title="2.如何实现多态"></a>2.如何实现多态</h2><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>​    编写具有继承关系的父类和子类<br>​    子类方法重写父类方法</p>
<h3 id="两种形式"><a href="#两种形式" class="headerlink" title="两种形式"></a>两种形式</h3><h4 id="使用父类作为方法形参实现多态"><a href="#使用父类作为方法形参实现多态" class="headerlink" title="使用父类作为方法形参实现多态"></a>使用父类作为方法形参实现多态</h4><ul>
<li><p>将一个父类的引用指向一个子类对象，称为向上转型（upcasting），自动进行类型转换</p>
</li>
<li><p>此时通过父类引用变量调用的是子类覆盖或继承父类的方法，不是父类的方法</p>
</li>
<li><p>此时通过父类引用变量无法调用子类特有的方法</p>
</li>
</ul>
<h4 id="使用父类作为方法返回值实现多态"><a href="#使用父类作为方法返回值实现多态" class="headerlink" title="使用父类作为方法返回值实现多态"></a>使用父类作为方法返回值实现多态</h4><h3 id="父类到子类的转换"><a href="#父类到子类的转换" class="headerlink" title="父类到子类的转换"></a>父类到子类的转换</h3><p><strong>定义</strong><br>该运算符用于判断一个对象是否属于属于一个类或者实现了一个接口，结果为true或false。在强制类型转换之前通过<strong>instanceof</strong>运算符检查对象的真实类型，在进行相应的强制类型转换，这样就可以避免类型转换异常，从而提高代码的健壮性。</p>
<p><strong>用 instanceof 运算符</strong>： instanceof 通常和强制类型转换结合使用   判断对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">对象  <span class="keyword">instanceof</span>  类或接口	</span><br></pre></td></tr></table></figure>

<p>在进行强制引用类型转换时，先通过<strong>instanceof</strong>运算符进行类型判断，再进行相应的强制类型转换，这样可以有效地避免出现类型转换异常。</p>
<h2 id="3-实现多态的3个条件"><a href="#3-实现多态的3个条件" class="headerlink" title="3.实现多态的3个条件"></a>3.实现多态的3个条件</h2><ul>
<li>继承的存在（继承是多态的基础，没有继承就没有多态）。</li>
<li>子类重写父类的方法（多态下调用子类重写后的方法）。</li>
<li>父类引用变量指向子类对象（子类到父类的类型转换）。</li>
</ul>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>![第三章 多态](第三章 多态\第三章多态.png)</p>
]]></content>
      <categories>
        <category>使用Java实现面向对象编程整理</category>
      </categories>
  </entry>
  <entry>
    <title>第一章 对象和封装</title>
    <url>/2021/06/04/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<h1 id="一、为什么使用面向对象"><a href="#一、为什么使用面向对象" class="headerlink" title="一、为什么使用面向对象"></a>一、为什么使用面向对象</h1><h2 id="1、软件出现的目的"><a href="#1、软件出现的目的" class="headerlink" title="1、软件出现的目的"></a>1、软件出现的目的</h2><p>用计算机的语言描述现实世界</p>
<p>用计算机解决现实世界的问题</p>
<h2 id="2、面向对象设计和开发程序的好处"><a href="#2、面向对象设计和开发程序的好处" class="headerlink" title="2、面向对象设计和开发程序的好处"></a>2、面向对象设计和开发程序的好处</h2><p>交流更加流畅</p>
<p>提高设计和开发效率</p>
<span id="more"></span>

<h2 id="3、然后从现实中抽出类分三步"><a href="#3、然后从现实中抽出类分三步" class="headerlink" title="3、然后从现实中抽出类分三步"></a>3、然后从现实中抽出类分三步</h2><h3 id="1-找出它的种类"><a href="#1-找出它的种类" class="headerlink" title="1.找出它的种类"></a>1.找出它的种类</h3><p>面向对象的思想描述世界</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-找出它的属性"><a href="#2-找出它的属性" class="headerlink" title="2.找出它的属性"></a>2.找出它的属性</h3><h3 id="3-找出它的行为"><a href="#3-找出它的行为" class="headerlink" title="3.找出它的行为"></a>3.找出它的行为</h3><h1 id="二、构造方法"><a href="#二、构造方法" class="headerlink" title="二、构造方法"></a>二、构造方法</h1><p>在完成构造方法同时完成了属性的赋值   <strong>什么时候用：new的时候用</strong></p>
<h2 id="1、构造方法语法"><a href="#1、构造方法语法" class="headerlink" title="1、构造方法语法"></a>1、构造方法语法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">访问修饰符   构造方法名 ( ) &#123; </span><br><span class="line">       <span class="comment">//初始化代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构造方法：无返回值类型       </p>
<p>构造方法名：  与类名相同</p>
<p>括号里可以指定参数</p>
<h2 id="2、注意"><a href="#2、注意" class="headerlink" title="2、注意"></a>2、注意</h2><p>系统会默认提供无参构造方法</p>
<p>如果写构造方法，系统就不自动提供无参构造方法</p>
<h2 id="3、构造方法的重载"><a href="#3、构造方法的重载" class="headerlink" title="3、构造方法的重载"></a>3、构造方法的重载</h2><p>this 关键字是对应该对象的默认引用，这里用以区分同名成员变量</p>
<p>如何用调用构造方法的重载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pgn = <span class="keyword">new</span> Penguin();</span><br><span class="line">pgn.print();</span><br><span class="line">pgn = <span class="keyword">new</span> Penguin(<span class="string">&quot;美美&quot;</span>, <span class="number">80</span>, <span class="number">20</span>, <span class="string">&quot;Q仔&quot;</span>);</span><br><span class="line">pgn.print();</span><br></pre></td></tr></table></figure>

<h2 id="4、static关键字"><a href="#4、static关键字" class="headerlink" title="4、static关键字"></a>4、static关键字</h2><h3 id="1、为什么要用static关键字"><a href="#1、为什么要用static关键字" class="headerlink" title="1、为什么要用static关键字"></a>1、为什么要用static关键字</h3><p>直接用类名.变量名 类似：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类名.变量名</span><br></pre></td></tr></table></figure>

<p>2、final修饰词<br>用fianl修饰的变量称为常量，其值固定不变</p>
<p>被final修饰的变量通常称为常量</p>
<table>
<thead>
<tr>
<th></th>
<th><strong>static、非private修饰</strong></th>
<th><strong>非static、prvate修饰</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>属性</strong></td>
<td>类属性、类变量</td>
<td>实例属性、实例变量</td>
</tr>
<tr>
<td><strong>方法</strong></td>
<td>类方法</td>
<td>实例方法</td>
</tr>
<tr>
<td><strong>调用方法</strong></td>
<td>类名.属性</td>
<td>对象.属性,对象.方法（）</td>
</tr>
<tr>
<td><strong>调用方法</strong></td>
<td>类名.方法（）</td>
<td>对象.属性,对象.方法（）</td>
</tr>
<tr>
<td><strong>调用方法</strong></td>
<td>对象，属性</td>
<td>对象.属性,对象.方法（）</td>
</tr>
<tr>
<td><strong>调用方法</strong></td>
<td>对象.方法（）</td>
<td>对象.属性,对象.方法（）</td>
</tr>
<tr>
<td><strong>归属</strong></td>
<td>类</td>
<td>单个对象</td>
</tr>
</tbody></table>
<p>注意：</p>
<p>切记不可定义为static变量</p>
<h1 id="三、什么是封装"><a href="#三、什么是封装" class="headerlink" title="三、什么是封装"></a>三、什么是封装</h1><h2 id="1、面想对象三大特征之一——封装"><a href="#1、面想对象三大特征之一——封装" class="headerlink" title="1、面想对象三大特征之一——封装"></a>1、面想对象三大特征之一——封装</h2><h3 id="（1）封装的概念"><a href="#（1）封装的概念" class="headerlink" title="（1）封装的概念"></a>（1）封装的概念</h3><p>封装：将类的某些信息隐藏的类的内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问</p>
<h3 id="（2）封装的好处"><a href="#（2）封装的好处" class="headerlink" title="（2）封装的好处"></a>（2）封装的好处</h3><p>1.隐藏类的实现细节</p>
<p>2.方便加入控制语句</p>
<p>3.方便修改实现</p>
<p>4.只能通过规定的方法访问数据</p>
<h3 id="（3）封装的步骤"><a href="#（3）封装的步骤" class="headerlink" title="（3）封装的步骤"></a>（3）封装的步骤</h3><p>1.修改属性的可见性——设置为private</p>
<p>2.创建共有的getter/setter方法——用于属性的读写</p>
<p>3.在getter/setter方法说中加入属性控制的语句——对属性值的合法性进行判断</p>
<h2 id="2、this关键词的用法"><a href="#2、this关键词的用法" class="headerlink" title="2、this关键词的用法"></a>2、this关键词的用法</h2><h3 id="（1）调用属性"><a href="#（1）调用属性" class="headerlink" title="（1）调用属性"></a>（1）调用属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.health=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">this</span>.name=<span class="string">&quot;大黄&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="（2）调用方法"><a href="#（2）调用方法" class="headerlink" title="（2）调用方法"></a>（2）调用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.print();</span><br></pre></td></tr></table></figure>

<h3 id="（3）调用构造方法"><a href="#（3）调用构造方法" class="headerlink" title="（3）调用构造方法"></a>（3）调用构造方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>();</span><br><span class="line"><span class="keyword">this</span>(<span class="string">&quot;小黑&quot;</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="string">&quot;雄&quot;</span>);<span class="comment">//如果使用，必须是构造方法 中的第一条语句</span></span><br></pre></td></tr></table></figure>

<h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p> ![第一章 对象和封装](第一章 对象和封装\第一章对象和封装.png)</p>
]]></content>
      <categories>
        <category>使用Java实现面向对象编程整理</category>
      </categories>
  </entry>
  <entry>
    <title>第二章 继承</title>
    <url>/2021/06/04/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h1>一 继承的一些定义</h1>
<h2>1.为什么使用继承</h2>
将重复代码抽取到父类中<br>
<h2>2.使用继承有什么优点</h2>
1)方便修改代码<br>
2)减少代码量<br>
子类和父类是is-a关系<br>

<span id="more"></span>

<h2>二 如何使用继承</h2>
<h3>编写父类</h3>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 父类</span>&#123;</span><br><span class="line">	<span class="comment">//父类的属性和方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3>编写子类，继承父类<h3>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类</span>&#123;<span class="comment">//只能继承一个父类</span></span><br><span class="line">	<span class="comment">//子类特有的属性和方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>java继承关键字  extends<br>C#继承关键字 ：</p>
<h3>1.子类访问父类成员<h3>

<p>使用super关键字，super代表父类对象<br><br>在子类构造方法中调用且必须是及第一句</p>
<ul>
<li>访问父类构造方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">super</span>(name);</span><br></pre></td></tr></table></figure></li>
<li>访问父类属性</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">super</span>.name;</span><br></pre></td></tr></table></figure>
<ul>
<li>访问父类方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">super</span>.print();</span><br></pre></td></tr></table></figure></li>
</ul>
<h3>2.子类可以继承父类的所有资源 ?<h3>

<ol>
<li>private成员</li>
<li>子类与父类不在同包</li>
<li>构造方法<h3>3.访问修饰符<h3></h3></h3></li>
</ol>
<ul>
<li>可以修饰属性和方法</li>
<li>本类、同包、子类可以访问<br><b>访问修饰符总结<b></b></b></li>
</ul>
<table>
<thead>
<tr>
<th>访问修饰符</th>
<th>本类</th>
<th>同包</th>
<th>子类</th>
<th>其他</th>
</tr>
</thead>
<tbody><tr>
<td>prvate</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>默认（triendly）</td>
<td>√</td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>protected</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>public</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
</tbody></table>
<h3>4.多重继承的关系初始化顺是怎样的？<h3>

<p>父类属性→ 父类构造方法→ 子类属性→ 子类构造方法</p>
<h3>5.何时使用继承<h3>

<ul>
<li><p>符合is-a关系的设计使用继承</p>
</li>
<li><p>将子类共有的属性和新闻哥放到父类中<br><b>继承是代码重用的一种方式<b></b></b></p>
<h1>三 方法重写<h1>
<h2>1.方法重写的规则<h2></h2></h2></h1></h1></li>
<li><p>方法名相同</p>
</li>
<li><p>参数列表相同</p>
</li>
<li><p>返回值类型相同或者是其子类</p>
</li>
<li><p>访问权限不能严与父类</p>
</li>
</ul>
<blockquote>
<p>同类 同名 不同参<br></p>
</blockquote>
<p><strong>方法重载和方法重写的异同</strong><br>||位置|方法名|参数表|返回值|访问修饰符|<br>|-|-|-|-|-|-|<br>|方法重写|子类|相同|相同|相同或是其子类|不能比父类更严格|<br>|方法重载|同类|相同|不相同|无关|无关|</p>
<h1>四 抽象类<h1>
<h2>语法<h2>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 抽象类</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> 方法名();<span class="comment">//没有方法体</span></span><br><span class="line">	<span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><b>abstract也可以用于方法-抽象方法<b></b></b></p>
<ul>
<li>抽象方法没有方法体</li>
<li>抽象方法必须在抽象类中</li>
<li>抽象必须在子类中被实现,除非子类是抽象类</li>
</ul>
<h1>五 总结<h1>

<p>![继承知识汇总](第二章 继承\第二章继承.png)</p>
</h1></h1></h2></h2></h1></h1></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3>]]></content>
      <categories>
        <category>使用Java实现面向对象编程整理</category>
      </categories>
  </entry>
  <entry>
    <title>第五章 异常</title>
    <url>/2021/06/04/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h2 id="一、什么是异常"><a href="#一、什么是异常" class="headerlink" title="一、什么是异常"></a>一、什么是异常</h2><p>​    异常就是在程序的允许过程中所发生的不正常的事件。</p>
<h2 id="二、异常处理"><a href="#二、异常处理" class="headerlink" title="二、异常处理"></a>二、异常处理</h2><p>​    Java的异常处理是通过五个关键词来实现的： **try、catch、finally、throw和throws ** </p>
<span id="more"></span>

<h3 id="1-try-catch"><a href="#1-try-catch" class="headerlink" title="1.try-catch"></a>1.try-catch</h3><ul>
<li>如果 <strong>try</strong> 块中所有语句正常执行完毕，不会发生异常，那么 <strong>catch</strong> 快中的所有语句都将会被忽略。</li>
<li>如果 <strong>try</strong> 语句快在执行的过程中遇到异常，并且这个异常与 <strong>catch</strong> 中声明的异常类型相匹配。那么 <strong>try</strong> 快中其余剩下的代码被忽略，而相应的 <strong>catch</strong> 快将会被执行。匹配是指catch所处理的异常类型与所生存的异常类型完全一致或是它的父类。</li>
<li>如果 <strong>try</strong> 语句块中在执行过程中遇到异常，而抛出的异常在 <strong>catch</strong> 块里面没有被声明，那么程序立即退出。<ul>
<li>报异常的方法有以下两种<ul>
<li> <strong>void printStackTrace</strong> ：输出异常的信息。信息包括程序运行到当前类的执行流程，他讲输出从方法调用到异常抛出处的方法调用序列。</li>
<li> **String getMessage ( ) ** ：返回异常信息描述字符串。该字符描述异常产生的类型，是 <strong>printStackTrace（ ）</strong> 方法输出信息的一部分。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-try-catch-finally"><a href="#2-try-catch-finally" class="headerlink" title="2.try-catch-finally"></a>2.try-catch-finally</h3><ul>
<li>在 <strong>try-catch</strong>  语句后加入 <strong>finally</strong> 快，把该语句放入 <strong>finally</strong> 块。无论是否发生异常， <strong>finally</strong> 块中的代码总能被执行。</li>
<li> <strong>try-catch-finally</strong> 程序块的执行的流程大致分为两种</li>
<li>如果 <strong>try</strong> 块中所有的语句正常执行完毕，那么 <strong>finally</strong> 块就会被执行。</li>
<li>如果 <strong>try</strong> 语句块在执行过程中碰到异常，无论这种异常能否被catch块捕获到，都将执行 <strong>finally</strong> 块中的代码</li>
<li><strong>try-catch-finally</strong> 结构中的 <strong>try</strong> 块是必需的， <strong>catch</strong> 和 <strong>fina</strong> 块为可选，但两者至少必须出现其中之一。</li>
<li>需要注意的是，即使在 <strong>try</strong> 块和 <strong>catch</strong> 块中存在 <strong>return</strong> 语句， <strong>finally</strong> 块中语句也会被执行。发生异常时的执行顺序：执行 <strong>try</strong> 块或 <strong>catch</strong> 中 <strong>return</strong> 之前的语句，执行 <strong>finally</strong> 块中的语句，执行 <strong>try</strong> 块或 <strong>catch</strong> 中的 <strong>return</strong> 语句退出。</li>
<li> <strong>finally</strong> 块中语句不被执行的唯一情况：在异常处理代码中执行 <strong>System.exit(1)</strong> ，直接退出。</li>
</ul>
<h3 id="3-多重catch块"><a href="#3-多重catch块" class="headerlink" title="3.多重catch块"></a>3.多重catch块</h3><ul>
<li><p>系统从上到下分别对每个catch语句块处理的异常类型进行检查，并执行第一个与异常类型匹配的catch语句。执行其中一条catch语句之后，其后的catch语句都将被忽略。</p>
</li>
<li><p>在使用多重 <strong>catch</strong> 块中， <strong>catch</strong> 块的排列顺序必须是从子类到父类，最后一个一般都是 <strong>Exception</strong> 父类。</p>
<h3 id="4-声明异常——throws"><a href="#4-声明异常——throws" class="headerlink" title="4.声明异常——throws"></a>4.声明异常——throws</h3></li>
<li><p>在java中用关键字 <strong>throws</strong> 声明摸个方法可能抛出的各种异常。 <strong>throws</strong> 可以同时声明多个异常，之间用逗号隔开。<strong>被声明异常之后调用必须处理异常</strong></p>
</li>
</ul>
<p>处理异常的<strong>两种</strong>方式</p>
<ul>
<li>通过 <strong>try-catch</strong> 捕获</li>
<li>通过 <strong>throws</strong> 继续声明异常。如果调用者不打算处理异常，则可以继续通过 <strong>throws</strong> 声明异常，让下一个调用者处理异常。 <strong>main()</strong> 方法声明的异常将由Java虚拟机来处理。</li>
</ul>
<p><strong>语法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 方法名 <span class="keyword">throws</span> 异常，异常（）&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-抛出异常——throw"><a href="#5-抛出异常——throw" class="headerlink" title="5.抛出异常——throw"></a>5.抛出异常——throw</h3><p>手动抛出异常</p>
<p>语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;错误语句&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="6-throw和throws的区别表现在以下三个方面"><a href="#6-throw和throws的区别表现在以下三个方面" class="headerlink" title="6.throw和throws的区别表现在以下三个方面"></a>6.throw和throws的区别表现在以下三个方面</h3><p><strong>作用不同</strong> ：<strong>throw</strong> 用于在程序中抛出异常；<strong>throws</strong> 用于声明在该方法内抛出了异常。</p>
<p><strong>使用的位置不同</strong> ：<strong>throw</strong> 位于方法体内部，都可以作为单独语句使用；<strong>throws</strong> 必须跟在方法参数列表的后面，不能单独使用。</p>
<p><strong>内容不同</strong>： <strong>throw</strong> 抛出一个异常对象，而且只能是一个；throws后面跟异常类，而且可以跟多个异常类。</p>
<h3 id="7-常见的异常类型"><a href="#7-常见的异常类型" class="headerlink" title="7.常见的异常类型"></a>7.常见的异常类型</h3><table>
<thead>
<tr>
<th>异常</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Exception</strong></td>
<td>异常层次结构的跟类</td>
</tr>
<tr>
<td><strong>ArithmeticException</strong></td>
<td>算术错误情形，如以零作除数</td>
</tr>
<tr>
<td><strong>ArrayIndexOutOfBoundsException</strong></td>
<td>数组下标越界</td>
</tr>
<tr>
<td><strong>NullPointerException</strong></td>
<td>尝试访问 null 对象成员</td>
</tr>
<tr>
<td><strong>ClassNotFoundException</strong></td>
<td>不能加载所需的类</td>
</tr>
<tr>
<td><strong>IllegalArgumentException</strong></td>
<td>方法接收到非法参数</td>
</tr>
<tr>
<td><strong>ClassCastException</strong></td>
<td>对象强制类型转换出错</td>
</tr>
<tr>
<td><strong>NumberFormatException</strong></td>
<td>数字格式转换异常，如把”abc”转换成数字</td>
</tr>
</tbody></table>
<h2 id="二、-异常的分类"><a href="#二、-异常的分类" class="headerlink" title="二、.异常的分类"></a>二、.异常的分类</h2><p><img src="/2021/06/04/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%BC%82%E5%B8%B8/img%5Cimage-20210528154353741.png" alt="image-20210528154353741"></p>
<p><strong>Throwable</strong> 类：所有异常都是 <strong>Throwable</strong> 类的子类，他派生两个子类，即 <strong>Error</strong> 和 <strong>Exception</strong> 。</p>
<p><strong>Error</strong> 类：表示仅靠程序本身无法恢复的严重错误，如内存溢出动态链接失败，虚拟机错误。应用程序不应该抛出这种类型的对象（一般是由虚拟机抛出的）。加入出现这种错误，除了尽力使程序安全退出为，在其他方面是无能为力的。使用在进行程序设计时，应该更关注 <strong>Exception</strong> 类。</p>
<p><strong>Exception</strong> 类：由java应用程序抛出和处理的非严重错误，如所需文件找不到、网络连接不通或终端、算书运算出错（如被零除）、数字（下标越界）、数组下标越界、装在了一个不存在的类、对null对象操作、类型转换异常等。它的各种不同的子类分半对应不同类型的异常。</p>
<p><strong>运行时异常</strong>：包括 <strong>RuntimeException</strong> 及其使用子类，不要求程序必须对题目做出处理。</p>
<p><strong>Checked</strong> 异常：（非运行时异常）除了运行时异常外的其他由Exception继承来的继承类。程序必须捕获或者声明抛出这种异常，否则会出现编译错误，无法通过编译。处理方式包括两种：通过 <strong>try-catch</strong> 捕获；通过 <strong>throws</strong> 继续声明异常，交给上一级调用方法处理。</p>
<h2 id="三、Log4j——开源日志记录工具"><a href="#三、Log4j——开源日志记录工具" class="headerlink" title="三、Log4j——开源日志记录工具"></a>三、Log4j——开源日志记录工具</h2><h3 id="1-记录的内容分为以下三种："><a href="#1-记录的内容分为以下三种：" class="headerlink" title="1.记录的内容分为以下三种："></a>1.记录的内容分为以下三种：</h3><ul>
<li>SQL日志：记录系统执行的SQL语句。</li>
<li>异常日志：记录系统运行中发生的异常事件</li>
<li>业务日志：记录系统运行过程，如用户登录，操作记录</li>
</ul>
<h3 id="2-如何使用log4j记录日志"><a href="#2-如何使用log4j记录日志" class="headerlink" title="2.如何使用log4j记录日志"></a>2.如何使用log4j记录日志</h3><p>​    （1）在项目中加入log4j的 <strong>JAR</strong> 文件 直接在项目上 Ctrl+C-Ctrl+V</p>
<p>​    （2）创建 <strong>log4j.properties</strong> 文件。</p>
<p>​    （3）编写 <strong>log4j.properties</strong> 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### 设置Logger输出级别和输出目的地 ###</span><br><span class="line">log4j.rootLogger=debug, stdout,logfile</span><br><span class="line"></span><br><span class="line">### 把日志信息输出到控制台 ###</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.Target=System.err</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.SimpleLayout</span><br><span class="line"></span><br><span class="line">### 把日志信息输出到文件：jbit.log ###</span><br><span class="line">log4j.appender.logfile=org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.logfile.File=jbit.log</span><br><span class="line">log4j.appender.logfile.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.logfile.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %l %F %p %m%n</span><br></pre></td></tr></table></figure>

<p>​    （4）使用 <strong>log4j</strong> 记录日志信息</p>
<p>声明一个成员变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Logger logger=Logger.getLogger(类名.class.getName());</span><br></pre></td></tr></table></figure>

<h3 id="3-log4j-配置文件"><a href="#3-log4j-配置文件" class="headerlink" title="3.log4j 配置文件"></a>3.log4j 配置文件</h3><p>（1）输出级别<br>$$<br>日志记录器输出级别：fatal &gt; error &gt; warn &gt; info &gt;debug<br>$$<br><strong>fatal</strong>：指出验证的错误事件将会导致应用程序的退出</p>
<p><strong>error</strong>:指出虽然发生错误事件，但仍然不影响系统的继续运行</p>
<p><strong>warn</strong>：表明会出现潜在错误的情形</p>
<p><strong>info</strong>：在粗粒度级别上指明消息，强调应用程序的运行过程。</p>
<p><strong>debug</strong>：指出细粒度信息事件，对调试应用程序是非常有帮助的。</p>
<p>![log4j 配置文件](第五章 异常\第五章异常1.png)</p>
<h2 id="四、总结："><a href="#四、总结：" class="headerlink" title="四、总结："></a>四、总结：</h2><p>![第五章 异常总结](第五章 异常\第五章异常2.png)</p>
]]></content>
      <categories>
        <category>使用Java实现面向对象编程整理</category>
      </categories>
  </entry>
  <entry>
    <title>第八章 File I/O</title>
    <url>/2021/06/04/%E7%AC%AC%E5%85%AB%E7%AB%A0%20File%20IO/</url>
    <content><![CDATA[<h1 id="第八章-File-I-O"><a href="#第八章-File-I-O" class="headerlink" title="第八章 File I/O"></a>第八章 File I/O</h1><h2 id="1-File类"><a href="#1-File类" class="headerlink" title="1.File类"></a>1.File类</h2><p>操作文件和文件夹</p>
<h2 id="File类常用方法"><a href="#File类常用方法" class="headerlink" title="File类常用方法"></a>File类常用方法</h2><table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>boolean exists( )</strong></td>
<td>判断文件或目录是否存在</td>
</tr>
<tr>
<td><strong>boolean isFile( )</strong></td>
<td>判断是否是文件</td>
</tr>
<tr>
<td><strong>boolean isDirectory( )</strong></td>
<td>判断是否是目录</td>
</tr>
<tr>
<td><strong>String getPath( )</strong></td>
<td>返回此对象表示的文件的相对路径名</td>
</tr>
<tr>
<td><strong>String getAbsolutePath( )</strong></td>
<td>返回此对象表示的文件的绝对路径名</td>
</tr>
<tr>
<td><strong>String getName( )</strong></td>
<td>返回此对象表示的文件或目录的名称</td>
</tr>
<tr>
<td><strong>boolean delete( )</strong></td>
<td>删除此对象指定的文件或目录</td>
</tr>
<tr>
<td><strong>boolean createNewFile( )</strong></td>
<td>创建名称的空文件，不创建文件夹</td>
</tr>
<tr>
<td><strong>long length()</strong></td>
<td>返回文件的长度，单位为字节, 如果文件不存在，则返回 0L</td>
</tr>
</tbody></table>
<span id="more"></span>

<h2 id="2-FileInputStream-字节流的写入-不能用于中文"><a href="#2-FileInputStream-字节流的写入-不能用于中文" class="headerlink" title="2. FileInputStream 字节流的写入    不能用于中文"></a>2. FileInputStream 字节流的写入    不能用于中文</h2><h3 id="InputStream-常用方法"><a href="#InputStream-常用方法" class="headerlink" title="InputStream 常用方法"></a>InputStream 常用方法</h3><table>
<thead>
<tr>
<th>方法名称</th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>int reader()</strong></td>
<td>读取一个字节数据</td>
</tr>
<tr>
<td><strong>int reader( byte [] b)</strong></td>
<td>将数据读取到字节数组中</td>
</tr>
<tr>
<td><strong>int reader( byte [] b , int off . int len)</strong></td>
<td>从输入刘中读取最多 <strong>len</strong> 长度的字节，保存到字节数组 <strong>b</strong> 中，保存的位置从 <strong>off</strong> 开始</td>
</tr>
<tr>
<td><strong>void close()</strong></td>
<td>关闭输入流</td>
</tr>
<tr>
<td><strong>int available()</strong></td>
<td>返回输入流读取的估计字节数</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;写入的路径&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;文件的大小&quot;</span> + fis.available());</span><br><span class="line">		<span class="keyword">int</span> date;</span><br><span class="line">		<span class="keyword">while</span> ((date = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">			System.out.println((<span class="keyword">char</span>) date); <span class="comment">//循环打印</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			fis.close();<span class="comment">//关闭处理报错</span></span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">			e2.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-FileOutputStream-字节流的读取-不能用于中文"><a href="#3-FileOutputStream-字节流的读取-不能用于中文" class="headerlink" title="3. FileOutputStream 字节流的读取    不能用于中文"></a>3. FileOutputStream 字节流的读取    不能用于中文</h2><table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>void write(int c)</strong></td>
<td>写入一个字节数据</td>
</tr>
<tr>
<td><strong>void write(byte[] buf)</strong></td>
<td>写入数组 <strong>buf</strong> 的所有字节</td>
</tr>
<tr>
<td><strong>void write(byte[] buf，int off ，int len)</strong></td>
<td>将字节数组中从 <strong>off</strong> 位置开始，长度为 <strong>len</strong> 的字节数据输出到输出流中</td>
</tr>
<tr>
<td><strong>void close()</strong></td>
<td>关闭输出流</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileOutputStream fos=<span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		fos=<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;读取的路径&quot;</span>);</span><br><span class="line">		String s=<span class="string">&quot;需要写入的字符串&quot;</span>;</span><br><span class="line">		<span class="keyword">byte</span>[] bs=s.getBytes();<span class="comment">//转成byte</span></span><br><span class="line">		fos.write(bs); <span class="comment">//写入文件</span></span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			fos.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">			e2.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-FileReader-字符流的读取-可以用于中文"><a href="#4-FileReader-字符流的读取-可以用于中文" class="headerlink" title="4. FileReader 字符流的读取  可以用于中文"></a>4. FileReader 字符流的读取  可以用于中文</h2><table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>int read()</strong></td>
<td>从输入流中读取单个字符</td>
</tr>
<tr>
<td><strong>int read( byte[] c )</strong></td>
<td>从输入流中读取 <strong>c.length</strong> 长度的字符，保存到字符数组 <strong>c</strong> 中，返回实际读取的字符数</td>
</tr>
<tr>
<td><strong>int read(cahr[] c , int off , int len)</strong></td>
<td>从输入流中读取最多 <strong>len</strong> 的长度字符，保存到字符数组 <strong>c</strong> 中，保存的位置从 <strong>off</strong> 位置开始，返回时间读取的字符长度</td>
</tr>
<tr>
<td><strong>void close()</strong></td>
<td>关闭流</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileReader fr=<span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		fr=<span class="keyword">new</span> FileReader(<span class="string">&quot;读取路径&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> temp;</span><br><span class="line">		<span class="keyword">while</span> ((temp=fr.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">			System.out.println((<span class="keyword">char</span>)temp);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">	fr.close();		</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">			e2.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-FileWrite-字符流的写入-可以用于中文"><a href="#5-FileWrite-字符流的写入-可以用于中文" class="headerlink" title="5.FileWrite 字符流的写入  可以用于中文"></a>5.FileWrite 字符流的写入  可以用于中文</h2><table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>write(String str)</strong></td>
<td>将 <strong>str</strong> 字符串里包含的字符输出到制定的输出流</td>
</tr>
<tr>
<td><strong>write(String str , int off ,int len)</strong></td>
<td>将 <strong>str</strong> 字符串里从 <strong>off</strong> 位置开始长度为<strong>len</strong> 的字符输出到输入流中</td>
</tr>
<tr>
<td><strong>void close()</strong></td>
<td>关闭输出流</td>
</tr>
<tr>
<td><strong>void flush()</strong></td>
<td>刷新输出流</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileWriter fw=<span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			fw=<span class="keyword">new</span> FileWriter(<span class="string">&quot;写入的路径&quot;</span>);</span><br><span class="line">			fw.write(<span class="string">&quot;需要输出的文章&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">		fw.close();		</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">				e2.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-DataOutputStream-amp-amp-DataInputStream-数据缓存"><a href="#6-DataOutputStream-amp-amp-DataInputStream-数据缓存" class="headerlink" title="6.DataOutputStream &amp;&amp; DataInputStream 数据缓存"></a>6.DataOutputStream &amp;&amp; DataInputStream 数据缓存</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">		DataInputStream dis = <span class="keyword">null</span>;</span><br><span class="line">		FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">		DataOutputStream dos = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;读取文件&quot;</span>);</span><br><span class="line">			dis = <span class="keyword">new</span> DataInputStream(fis);</span><br><span class="line">			fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;写入的文件&quot;</span>);</span><br><span class="line">			dos = <span class="keyword">new</span> DataOutputStream(fos);</span><br><span class="line">			<span class="keyword">int</span> date;</span><br><span class="line">			<span class="keyword">while</span> ((date = dis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">				dos.write(date);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				fis.close();</span><br><span class="line">				dis.close();</span><br><span class="line">				fos.close();</span><br><span class="line">				dos.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">				e2.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h2><p>![第八章 File IO总结](第八章 File IO/第八章FileIO.png)</p>
]]></content>
      <categories>
        <category>使用Java实现面向对象编程整理</category>
      </categories>
  </entry>
  <entry>
    <title>第六章 集合框架</title>
    <url>/2021/06/04/%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h2 id="1-为什么使用集合框架"><a href="#1-为什么使用集合框架" class="headerlink" title="1.为什么使用集合框架"></a>1.为什么使用集合框架</h2><ul>
<li>数组长度固定不变，不能很好地适应元素数量动态变化的情况。</li>
<li>课通过数组名**.length**获取数组的长度，取无法直接获取数组中真实存储的个数。</li>
<li>数组采用在内存中分配连续空间的存储方式，根据下标可以快速获取对应的信息，但根据信息查找时效率低下，需要多次比较。在进行频繁插入、删除操作时同样效率低下<span id="more"></span></li>
</ul>
<h2 id="2-Java集合框架包含的内容"><a href="#2-Java集合框架包含的内容" class="headerlink" title="2.Java集合框架包含的内容"></a>2.Java集合框架包含的内容</h2><p>集合框架是为表示和操作借还而规定的一种统一的标准结构体系。集合框架都包含三大块内容：对外的接口，接口的实现和对集合运算的算法。</p>
<ul>
<li>接口：表示集合的抽象类数据类型。</li>
<li>实现：集合框架中接口的具体实现。</li>
<li>算法：在一个实现了某个集合框架中的接口的对象身上完成某种有用的计算的方法</li>
</ul>
<p>Java集合框架中的两大类的接口：<strong>Collection</strong> 和 <strong>Map</strong> 。</p>
<ul>
<li><strong>Collection</strong> 接口可以存储一组不唯一，无序的对象<ul>
<li> <strong>Set</strong> 接口继承 <strong>Collection</strong> 接口，存储一组唯一、无序的对象。</li>
<li> <strong>List</strong> 接口继承 <strong>Collection</strong> 接口，存储一组不唯一、有序的对象</li>
</ul>
</li>
<li> <strong>Map</strong> 接口存储一组成对的键-值对象，提供 <strong>key（键）</strong> 到 <strong>value（值）</strong> 的映射。<strong>Map</strong> 中的 <strong>key</strong> 不要求有序，不允许重复。 <strong>value</strong> 同样不要求有序，但运行重复。</li>
<li> <strong>lterator</strong> 接口负责定义访问和遍历元素的接口。</li>
</ul>
<p><img src="/2021/06/04/%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/img%5Cimage-20210528165408509.png" alt="image-20210528165408509"></p>
<h2 id="3-List接口"><a href="#3-List接口" class="headerlink" title="3.List接口"></a>3.List接口</h2><ul>
<li>实现List接口的常用类有 <strong>ArrayList</strong> 和 <strong>LinkedList</strong> 。他们都可以容纳所有类型的对象，包括null，允许重复，并且都包子元素的存储顺序。</li>
</ul>
<p>（1）LinkedList采用链表存储方式，有点在与插入，删除元素是效率比较高。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void addFirst(Object o)</td>
<td>在列表的首部添加元素</td>
</tr>
<tr>
<td>void addLast(Object o)</td>
<td>在列表的末尾添加元素</td>
</tr>
<tr>
<td>Object getFirst()</td>
<td>返回列表中的第一个元素</td>
</tr>
<tr>
<td>Object getLast()</td>
<td>返回列表中的最后一个元素</td>
</tr>
<tr>
<td>Object removeFirst()</td>
<td>删除并返回列表中的第一个元素</td>
</tr>
<tr>
<td>Object removeLast()</td>
<td>删除并返回列表中的最后一个元素</td>
</tr>
</tbody></table>
<p>（2）ArrayList集合类</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>boolean</strong> <strong>add(Object o)</strong></td>
<td>在列表的末尾顺序添加元素，起始索引位置从0开始</td>
</tr>
<tr>
<td><strong>void add(int index,Object o)</strong></td>
<td>在指定的索引位置添加元素。索引位置必须介于0和列表中元素个数之间</td>
</tr>
<tr>
<td><strong>int size()</strong></td>
<td>返回列表中的元素个数</td>
</tr>
<tr>
<td><strong>Object get(int index)</strong></td>
<td>返回指定索引位置处的元素。取出的元素是Object类型，使用前需要进行强制类型转换</td>
</tr>
<tr>
<td><strong>boolean contains(Object o)</strong></td>
<td>判断列表中是否存在指定元素</td>
</tr>
<tr>
<td><strong>boolean remove(Object o)</strong></td>
<td>从列表中删除元素</td>
</tr>
<tr>
<td><strong>Object remove(int index)</strong></td>
<td>从列表中删除指定位置元素，起始索引位置从0开始</td>
</tr>
</tbody></table>
<p>List接口的 <strong>add(Object o)</strong> 方法的参数类型是 <strong>Object</strong> ，即使在调用时形参是插入时的类型，但系统认为是 <strong>Object</strong> ，所以在 <strong>get()</strong> 获取必需强转。</p>
<h3 id="4-Map接口"><a href="#4-Map接口" class="headerlink" title="4.Map接口"></a>4.Map接口</h3><h4 id="1-Map接口常用方法"><a href="#1-Map接口常用方法" class="headerlink" title="1.Map接口常用方法"></a>1.Map接口常用方法</h4><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Object put(Object key, Object val)</strong></td>
<td>以“键-值对”的方式进行存储</td>
</tr>
<tr>
<td><strong>Object get (Object key)</strong></td>
<td>根据键返回相关联的值，如果不存在指定的键，返回null</td>
</tr>
<tr>
<td><strong>Object remove (Object key)</strong></td>
<td>删除由指定的键映射的“键-值对”</td>
</tr>
<tr>
<td><strong>int size()</strong></td>
<td>返回元素个数</td>
</tr>
<tr>
<td><strong>Set keySet ()</strong></td>
<td>返回键的集合</td>
</tr>
<tr>
<td><strong>Collection values ()</strong></td>
<td>返回值的集合</td>
</tr>
<tr>
<td><strong>boolean containsKey (Object key)</strong></td>
<td>如果存在由指定的键映射的“键-值对”，返回true</td>
</tr>
</tbody></table>
<h4 id="2-迭代器Iterator"><a href="#2-迭代器Iterator" class="headerlink" title="2.迭代器Iterator"></a>2.迭代器Iterator</h4><p><strong>Collection</strong> 接口的iterator()方法返回一个 <strong>Iterator</strong> ，然后通过 <strong>Iterator</strong> 接口的两个方法即可方便的实现遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>; <span class="comment">//判断是否存在另一个可访问的元素</span></span><br><span class="line"><span class="function">Object <span class="title">next</span><span class="params">()</span></span>;	   <span class="comment">//返回要访问的下一个元素</span></span><br></pre></td></tr></table></figure>

<p>增强for循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(元素类型t  元素变量x : 数组或集合对象)&#123;</span><br><span class="line">         引用了x的java语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-泛型集合"><a href="#5-泛型集合" class="headerlink" title="5.泛型集合"></a>5.泛型集合</h4><p>如何解决以下强制类型转换时容易出现的异常问题?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span>方法获取元素</span></span><br><span class="line"><span class="function">Map <span class="title">get</span><span class="params">(Object key)</span>方法获取元素</span></span><br><span class="line"><span class="function">Iterator <span class="title">next</span><span class="params">()</span>方法获取元素</span></span><br></pre></td></tr></table></figure>

<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>![第六章 集合框架](第六章 集合框架/第六章集合框架.png)</p>
]]></content>
      <categories>
        <category>使用Java实现面向对象编程整理</category>
      </categories>
  </entry>
  <entry>
    <title>第四章 接口</title>
    <url>/2021/06/04/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h2 id="一、什么是接口？"><a href="#一、什么是接口？" class="headerlink" title="一、什么是接口？"></a>一、什么是接口？</h2><p>接口同样是哟中规范和标准，题目可以约束类的行为，是一些方法特征的集合，但是没有方法的实现。</p>
<p>接口可以看做一种特殊的“抽象类”，但是差异与抽象类万千不同的语法来表示，两者的设计观念也是不同的，抽象类利用与代码复用，接口利于代码的扩展和维护</p>
<span id="more"></span>

<h2 id="二、接口的语法"><a href="#二、接口的语法" class="headerlink" title="二、接口的语法"></a>二、接口的语法</h2><p>​    <strong>定义接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[修饰符] <span class="class"><span class="keyword">interface</span> 接口名 <span class="keyword">extends</span> 父接口1，父接口2，·········</span>&#123;</span><br><span class="line">    	<span class="comment">//常量定义</span></span><br><span class="line">    	<span class="comment">//方法定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    类实现接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名 <span class="keyword">extends</span> 父类名 <span class="keyword">implements</span> 接口1，接口2，······</span>&#123;</span><br><span class="line">    	<span class="comment">//类成员</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="接口定义的规则："><a href="#接口定义的规则：" class="headerlink" title="接口定义的规则："></a>接口定义的规则：</h4><ul>
<li><p>接口的命名规则与类相同。如果修饰符是public，则该接口在整个项目中可见；如果是省略修饰符，则该接口只在当前包可见。</p>
</li>
<li><p>接口中可以定义常量，不能定义变量。接口中的属性都会自动用 <strong>public static final</strong> 修饰，即接口中的属性都是全局静态常量。接口中的常量必须在定义时制定初始值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PI=<span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">int</span> PI=<span class="number">3.14</span>;	<span class="comment">//在接口中，这两个定义语句效果完全相同</span></span><br><span class="line"><span class="keyword">int</span> PI;			<span class="comment">//错误！在接口中必须制定初始值，在类中会有默认值</span></span><br></pre></td></tr></table></figure></li>
<li><p>接口中所有的方法都是抽象方法。接口中的方法都会自动用 <strong>public abstract</strong> 修饰，即接口中只有全局抽象方法。</p>
</li>
<li><p>和抽象类一样，接口也不能实例化，接口不中不能有构造方法。</p>
</li>
<li><p>接口之间可以通过 <strong>extends</strong> 实现继承关系，一个接口可以继承多个接口，但接口不能继承类。</p>
</li>
<li><p>接口的实际类必须实现接口的全部方法，否则必须定义为抽象类。</p>
</li>
</ul>
<h2 id="三、接口表示一种能力：体现在接口的方法上"><a href="#三、接口表示一种能力：体现在接口的方法上" class="headerlink" title="三、接口表示一种能力：体现在接口的方法上"></a>三、接口表示一种能力：体现在接口的方法上</h2><p>关心实现类有何能力，而不关心实现细节<br>面向接口的约定而不考虑接口的具体实现</p>
<h2 id="四、面向接口编程"><a href="#四、面向接口编程" class="headerlink" title="四、面向接口编程"></a>四、面向接口编程</h2><p>​    在面向对象编程中提倡面向接口编程，而不是面向实现编程。</p>
<p>​    接口体现了约定和实现相分离的原则，通过面向接口编程，可以降低代码间的耦合性，提高代码的可扩展性，面向接口编程就意味着开发系统时，主题结构使用接口，接口构成系统的股价，这样就可以通过更换实现接口的类来实现更换系统</p>
<p>​    面向接口编程可以实现接口和实现的分离，这样做最大的好处就是能够在客户端位置的情况下进行修改代码。</p>
<p>​    良好的接口定义一定是来自于需求的，它绝对不是程序员绞尽脑汁想出来的</p>
<h2 id="五、在C-中使用接口"><a href="#五、在C-中使用接口" class="headerlink" title="五、在C#中使用接口"></a>五、在C#中使用接口</h2><p>​    C#的接口语法和java相似</p>
<p>​    <strong>定义接口</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[修饰符] interface 接口名： 父接口 1，父接口 2，······&#123;</span><br><span class="line">    属性定义</span><br><span class="line">    方法定义</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实现接口</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class 类名：父类名，接口1，接口2······&#123;		&#125;</span><br></pre></td></tr></table></figure>

<h4 id="接口区别"><a href="#接口区别" class="headerlink" title="接口区别"></a>接口区别</h4><ul>
<li>java中接口通过 <strong>extends</strong> 来继承接口，类通过 <strong>implements</strong> 来实现接口；C#中通过冒号 “ ： ” 来实现这两个功能</li>
<li>java接口中的成员变量（属性）都是常量，自动用 <strong>public static final</strong> 修饰；C#接口中不允许存在成员变量，但可以有属性。</li>
<li>java接口中的属性和方法都可以使用 <strong>public</strong> 修饰；C#中默认用 <strong>public</strong> ，但不允许显式使用 <strong>public</strong> 修饰</li>
<li>java接口中可以定义静态常量和方法，C#接口中不允许包括任何静态成员</li>
</ul>
<h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>![第四章 接口](第四章 接口\第四章接口.png)</p>
]]></content>
      <categories>
        <category>使用Java实现面向对象编程整理</category>
      </categories>
  </entry>
  <entry>
    <title>表单验证</title>
    <url>/2021/08/09/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<h1 id="表单验证的重要性"><a href="#表单验证的重要性" class="headerlink" title="表单验证的重要性"></a>表单验证的重要性</h1><p>不但能检查用户输入的无效或错误数据,还能检查用户遗漏的必选选项,从而减轻服务器端的压力,避免服务器端的信息出现错误。</p>
<h1 id="常用的表单验证"><a href="#常用的表单验证" class="headerlink" title="常用的表单验证"></a>常用的表单验证</h1><ol>
<li><p>日期格式</p>
</li>
<li><p>表单元素是否为空</p>
</li>
<li><p>用户名和密码</p>
</li>
<li><p>E-mail地址</p>
</li>
<li><p>身份证号码</p>
</li>
</ol>
<span id="more"></span>

<ol>
<li>检查表单元素是否为空</li>
<li>验证是否为数字(如出生日期中的年月日必须是数字)。</li>
<li>验证用户输入的右键地址是否有效（如电子右键中必须有@和”.”字符）。</li>
<li>检查用户输入的数据是否在某个范围之内（如出生日期中的月份必须是1<del>12，日期必须是1</del>31）。</li>
<li>验证用户输入的信息长度是否足够（如输入的密码必须大于等于6个字符）。</li>
<li>检查用户输入的出生日期是否有效（如出生日期由四位数字组成，1,3,5,7,8,10,12月为31天， 4,6,9,11月为30天， 2月是根据闰年判断是28天或29天）。</li>
</ol>
<h1 id="表单验证的思路"><a href="#表单验证的思路" class="headerlink" title="表单验证的思路"></a>表单验证的思路</h1><p>当输入的表单数据不符合要求时，如何编写脚本来进行提示？</p>
<ol>
<li>获得表单元素值</li>
<li>使用JavaScript的一些方法对数据进行判断</li>
<li>当表单提交时，触发事件，对获取的数据进行验证</li>
</ol>
<h1 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h1><h2 id="什么是表单选择器"><a href="#什么是表单选择器" class="headerlink" title="什么是表单选择器"></a>什么是表单选择器</h2><p>表单选择器用于选取某些特定的表单元素，比如所有单选按钮或隐藏的元素</p>
<p>表单选择器是用来选择文本输入框，按钮等表单元素的。</p>
<h2 id="表单选择器-1"><a href="#表单选择器-1" class="headerlink" title="表单选择器"></a>表单选择器</h2><table>
<thead>
<tr>
<th>语法</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>:input</td>
<td>匹配所有input、textarea、select和button 元素</td>
<td>$(“#myform   :input”)选取表单中所有的input、select和button元素</td>
</tr>
<tr>
<td>:text</td>
<td>匹配所有单行文本框</td>
<td>$(“#myform   :text”)选取email 和姓名两个input 元素</td>
</tr>
<tr>
<td>:password</td>
<td>匹配所有密码框</td>
<td>$(“#myform   :password” )选取所有 &lt;input type=”password”  /&gt;元素</td>
</tr>
<tr>
<td>:radio</td>
<td>匹配所有单项按钮</td>
<td>$(“#myform   :radio”)选取&lt;input type=”radio” /&gt;元素</td>
</tr>
<tr>
<td>:checkbox</td>
<td>匹配所有复选框</td>
<td>$(“ #myform :checkbox “ )选取  &lt;input type=”checkbox “  /&gt;元素</td>
</tr>
<tr>
<td>:submit</td>
<td>匹配所有提交按钮</td>
<td>$(“#myform   :submit “ )选取  &lt;input type=”submit “  /&gt;元素</td>
</tr>
<tr>
<td>:image</td>
<td>匹配所有图像域</td>
<td>$(“#myform   :image” )选取  &lt;input type=” image” /&gt;元素</td>
</tr>
<tr>
<td>:reset</td>
<td>匹配所有重置按钮</td>
<td>$(“ #myform :reset “ )选取  &lt;input type=” reset “  /&gt;元素</td>
</tr>
<tr>
<td>:button</td>
<td>匹配所有按钮</td>
<td>$(“#myform   :button” )选取button 元素</td>
</tr>
<tr>
<td>:file</td>
<td>匹配所有文件域</td>
<td>$(“ #myform :file” )选取  &lt;input type=” file “ /&gt;元素</td>
</tr>
<tr>
<td>:hidden</td>
<td>匹配所有不可见元素，或者type 为hidden的元素</td>
<td>$(“#myform   :hidden” )选取&lt;input type=”hidden “  /&gt;、style=”display: none”等元素</td>
</tr>
</tbody></table>
<h3 id="属性过滤选择器"><a href="#属性过滤选择器" class="headerlink" title="属性过滤选择器"></a>属性过滤选择器</h3><table>
<thead>
<tr>
<th>语法</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>:enabled</td>
<td>匹配所有可用元素</td>
<td>$(“ #userform  :enabled” )匹配form内部除编号输入框外的所有元素</td>
</tr>
<tr>
<td>:disabled</td>
<td>匹配所有不可用元素</td>
<td>$(“ #userform  :disabled” )匹配编号输入框</td>
</tr>
<tr>
<td>:checked</td>
<td>匹配所有被选中元素（复选框、单项按钮、select 中的option）</td>
<td>$(“ #userform  :checked” )匹配“性别”中的“男”选项和“爱好”中的“编程”选项</td>
</tr>
<tr>
<td>:selected</td>
<td>匹配所有选中的option 元素</td>
<td>$(“ #userform :selected” ) 匹配“家乡”中的“北京”选项</td>
</tr>
</tbody></table>
<h2 id="验证表单内容"><a href="#验证表单内容" class="headerlink" title="验证表单内容"></a>验证表单内容</h2><ol>
<li><h3 id="使用String-对象验证邮箱"><a href="#使用String-对象验证邮箱" class="headerlink" title="使用String 对象验证邮箱"></a>使用String 对象验证邮箱</h3><p>不能为空，格式正确</p>
</li>
<li><h3 id="文本框内容的验证"><a href="#文本框内容的验证" class="headerlink" title="文本框内容的验证"></a>文本框内容的验证</h3><p>密码不能为空，不少于6个字符，姓名不能为空，不能有数字</p>
</li>
<li><h3 id="使用String-对象验证邮箱-1"><a href="#使用String-对象验证邮箱-1" class="headerlink" title="使用String 对象验证邮箱"></a>使用String 对象验证邮箱</h3><p>实现思路</p>
<ol>
<li>使用val( )方法获取文本框的值</li>
<li>使用indexOf( ) 来判断字符串是否包含“@”和“.”</li>
<li>使用方法submit( )提交表单</li>
<li>根据返回值是true还是false来决定是否提交表单</li>
</ol>
</li>
<li><h3 id="字符串验证"><a href="#字符串验证" class="headerlink" title="字符串验证"></a>字符串验证</h3><ol>
<li><p>非空验证</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (mail == <span class="string">&quot;&quot;</span>) &#123;<span class="comment">//检测Email是否为空</span></span><br><span class="line">     alert(<span class="string">&quot;Email不能为空&quot;</span>);</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>字符串查找<br>indexOf()：查找某个指定的字符串值在字符串中首次出现的位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;this is JavaScript&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> selectFirst=str.indexOf(<span class="string">&quot;Java&quot;</span>);<span class="comment">//返回8</span></span><br><span class="line"><span class="keyword">var</span> selectSecond=str.indexOf(<span class="string">&quot;Java&quot;</span>,<span class="number">12</span>);<span class="comment">//返回-1</span></span><br></pre></td></tr></table></figure></li>
<li><p>长度验证</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(pwd.length&lt;<span class="number">6</span>)&#123;<span class="comment">//length属性可以获取字符串长度</span></span><br><span class="line">    alert(<span class="string">&quot;密码必须等于或大于6个字符&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>判断字符串是否有数字</p>
<p>使用for循环和substring()方法依次截断单个字符，再判断每个字符是否是数字</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; user.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> j = user.substring(i, i + <span class="number">1</span>);<span class="comment">//截取单个字符</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isNaN</span>(j) == <span class="literal">false</span>) &#123;</span><br><span class="line">        alert(<span class="string">&quot;姓名中不能包含数字&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h3 id="文本框内容的验证-1"><a href="#文本框内容的验证-1" class="headerlink" title="文本框内容的验证"></a>文本框内容的验证</h3><ol>
<li>使用String对象的length属性验证密码的长度</li>
<li>验证两次输入密码是否一致</li>
<li>使用length属性获取文本长度，然后使用for循环和substring( )方法依次截断单个字符，最后判断每个字符是否是数字</li>
</ol>
</li>
<li><h3 id="文本输入提示特效"><a href="#文本输入提示特效" class="headerlink" title="文本输入提示特效"></a>文本输入提示特效</h3><p>实现思路</p>
<ol>
<li>把错误信息显示在&lt;span&gt;中，然后使用html()方法，设置<span>和</span>之间的内容</li>
<li>编写脚本验证函数</li>
<li>鼠标失去焦点时（blur事件）调用验证函数</li>
</ol>
<p><img src="/2021/08/09/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%5Cimage-20210811095910785.png" alt="image-20210811095910785"></p>
</li>
</ol>
<h1 id="表单验证事件和方法"><a href="#表单验证事件和方法" class="headerlink" title="表单验证事件和方法"></a>表单验证事件和方法</h1><p>表单验证需要综合运用元素的事件和方法</p>
<table>
<thead>
<tr>
<th>类别</th>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>事件</td>
<td>onblur</td>
<td>失去焦点，当光标离开某个文本框时触发</td>
</tr>
<tr>
<td>事件</td>
<td>onfocus</td>
<td>获得焦点，当光标进入某个文本框时触发</td>
</tr>
<tr>
<td>方法</td>
<td>blur()</td>
<td>从文本域中移开焦点</td>
</tr>
<tr>
<td>方法</td>
<td>focus()</td>
<td>在文本域中设置焦点，即获得鼠标光标</td>
</tr>
<tr>
<td>方法</td>
<td>select()</td>
<td>选取文本域中的内容，突出显示输入区域的内容</td>
</tr>
</tbody></table>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本。</p>
<p><strong>为什么需要正则表达式</strong></p>
<ol>
<li>简洁的代码</li>
<li>严谨的验证文本框中的内容</li>
</ol>
<h2 id="定义正则表达式"><a href="#定义正则表达式" class="headerlink" title="定义正则表达式"></a>定义正则表达式</h2><ol>
<li><p>普通方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/表达式/</span>附加参数</span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/white/</span>;</span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/white/g</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>构造函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;表达式&quot;</span>,<span class="string">&quot;附加参数&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> reg=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;white&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> reg=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;white&quot;</span>,<span class="string">&quot;g&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="表达式的模式"><a href="#表达式的模式" class="headerlink" title="表达式的模式"></a>表达式的模式</h2><ol>
<li><p>简单模式<br>只能表示具体的匹配</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/china/</span>;</span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/abc8/</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>复合模式<br>可以使用通配符表达更为抽象的规则模式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^\w+$/</span>;</span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^\w+@\w+.[a-zA-Z]&#123;2,3&#125;(.[a-zA-Z]&#123;2,3&#125;)?$/</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="RegExp对象"><a href="#RegExp对象" class="headerlink" title="RegExp对象"></a>RegExp对象</h1><h3 id="RegExp对象的方法"><a href="#RegExp对象的方法" class="headerlink" title="RegExp对象的方法"></a>RegExp对象的方法</h3><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>exec</td>
<td>检索字符中是正则表达式的区配，返回找到的值，并确定其位置</td>
</tr>
<tr>
<td>test</td>
<td>检索字符串中指定的值，返回true或false</td>
</tr>
</tbody></table>
<h3 id="RegExp对象的属性"><a href="#RegExp对象的属性" class="headerlink" title="RegExp对象的属性"></a>RegExp对象的属性</h3><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>global</td>
<td>RegExp对象是否具有标志g</td>
</tr>
<tr>
<td>ignoreCase</td>
<td>RegExp对象是否具有标志i</td>
</tr>
<tr>
<td>multiline</td>
<td>RegExp对象是否具有标志m</td>
</tr>
</tbody></table>
<h1 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h1><p>String对象的方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>match</td>
<td>找到一个或多个正则表达式的匹配</td>
</tr>
<tr>
<td>search</td>
<td>检索与正则表达式相匹配的值</td>
</tr>
<tr>
<td>replace</td>
<td>替换与正则表达式匹配的字符串</td>
</tr>
<tr>
<td>split</td>
<td>把字符串分割为字符串数组</td>
</tr>
</tbody></table>
<h1 id="正则表达式符号"><a href="#正则表达式符号" class="headerlink" title="正则表达式符号"></a>正则表达式符号</h1><table>
<thead>
<tr>
<th>符合</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>/…/</td>
<td>代表一个模式的开始和结束</td>
</tr>
<tr>
<td>^</td>
<td>匹配字符串的开始</td>
</tr>
<tr>
<td>$</td>
<td>匹配字符串的结束</td>
</tr>
<tr>
<td>\s</td>
<td>任何空白字符</td>
</tr>
<tr>
<td>\S</td>
<td>任何非空白字符</td>
</tr>
<tr>
<td>\d</td>
<td>匹配一个数字字符，等价于[0-9]</td>
</tr>
<tr>
<td>\D</td>
<td>除了数字之外的任何字符，等价于[^0-9]</td>
</tr>
<tr>
<td>\w</td>
<td>匹配一个数字、下划线或字母字符，等价于[A-Za-z0-9_]</td>
</tr>
<tr>
<td>\W</td>
<td>任何非单字字符，等价于[^a-zA-z0-9_]</td>
</tr>
<tr>
<td>.</td>
<td>除了换行符之外的任意字符</td>
</tr>
<tr>
<td>{n}</td>
<td>匹配前一项n次</td>
</tr>
<tr>
<td>{n,}</td>
<td>匹配前一项n次，或者多次</td>
</tr>
<tr>
<td>{n,m}</td>
<td>匹配前一项至少n次，但是不能超过m次</td>
</tr>
<tr>
<td>*</td>
<td>匹配前一项0次或多次，等价于{0,}</td>
</tr>
<tr>
<td>+</td>
<td>匹配前一项1次或多次，等价于{1,}</td>
</tr>
<tr>
<td>？</td>
<td>匹配前一项0次或1次，也就是说前一项是可选的，等价于{0,1}</td>
</tr>
</tbody></table>
<h1 id="正则表达式的应用"><a href="#正则表达式的应用" class="headerlink" title="正则表达式的应用"></a>正则表达式的应用</h1><p>用户名、密码、电子邮箱、手机号码、身份证号码、生日、邮政编码、固定电话</p>
<h1 id="正则表达式的实例"><a href="#正则表达式的实例" class="headerlink" title="正则表达式的实例"></a>正则表达式的实例</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regmail= <span class="regexp">/^\w+@\w+(\.[a-zA-Z]&#123;2,3&#125;)&#123;1,2&#125;$/</span>;<span class="comment">//邮箱验证</span></span><br><span class="line"><span class="keyword">var</span> regCode=<span class="regexp">/^\d&#123;6&#125;$/</span>;<span class="comment">//邮箱验证</span></span><br><span class="line"><span class="keyword">var</span> regMobile=<span class="regexp">/^1\d&#123;10&#125;$/</span>;<span class="comment">//手机号验证</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="HTML5新增属性"><a href="#HTML5新增属性" class="headerlink" title="HTML5新增属性"></a>HTML5新增属性</h1><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>placeholder</td>
<td>提供一种提示（hint），输入域为空时显示，获得焦点输入内容后消失</td>
</tr>
<tr>
<td>required</td>
<td>规定输入域不能为空</td>
</tr>
<tr>
<td>pattern</td>
<td>规定验证input域的模式（正则表达式）</td>
</tr>
</tbody></table>
<p>示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;uName&quot;</span> placeholder=<span class="string">&quot;英文、数字长度为6-10个字符&quot;</span> required pattern=<span class="string">&quot;[a-zA-Z0-9]&#123;6,10&#125;&quot;</span>  /&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;长度为6-16个字符&quot;</span> <span class="attr">required</span> <span class="attr">pattern</span>=<span class="string">&quot;[a-zA-Z0-9]&#123;6,16&#125;&quot;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="validity属性"><a href="#validity属性" class="headerlink" title="validity属性"></a>validity属性</h2><p>validityState对象</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>stepMismatch</td>
<td>输入的值不符合step特性所推算出的规则。用于填写数值的表单元素可能需要同时设置min、max和step特性，这就限制了输入的值必须是最小值与step特性值的倍数之和。例如范围从0到10，step特性值为2，因为合法值为该范围内的偶数，其他数值均无法通过验证。如果输入值不符合要求，则stepMismatch属性返回true，否则返回false</td>
</tr>
<tr>
<td>customError</td>
<td>使用自定义的验证错误提示信息。使用setCustomValidity( )方法自定义错误提示信息：setCustomValidity(message)会把错误提示信息自定义为message，此时customError属性值为true；setCustomValidity(“”)会清除自定义的错误信息，此时customError属性值为false。</td>
</tr>
</tbody></table>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="/2021/08/09/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/image-20210811102306208.png" alt="image-20210811102306208"></p>
]]></content>
      <categories>
        <category>使用jQuery快速高效制作网页交互特效</category>
      </categories>
  </entry>
  <entry>
    <title>jQuery选择器</title>
    <url>/2021/07/23/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[<h2 id="什么是jQuery选择器？"><a href="#什么是jQuery选择器？" class="headerlink" title="什么是jQuery选择器？"></a>什么是jQuery选择器？</h2><p>jQuery选择器类似于CSS选择器，用来选取网页中的元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;h3&quot;</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#09F&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>​    获取并设置网页中所有&lt;h3&gt;元素的背景<br>​    “h3”为选择器语法，必须放在$()中<br>​    $(“h3”)返回jQuery对象<br>​    .css()是为jQuery对象设置样式的方法</p>
<span id="more"></span>

<h1 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h1><ol>
<li><p>jQuery选择器功能强大，种类也很多，分类如下</p>
<ol>
<li><h2 id="通过CSS选择器选取元素"><a href="#通过CSS选择器选取元素" class="headerlink" title="通过CSS选择器选取元素"></a>通过CSS选择器选取元素</h2><ul>
<li><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><ol>
<li><p>基本选择器包括标签选择器、类选择器、ID选择器、并集选择器和全局选择器</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>语法构成</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>标签选择器</td>
<td>element</td>
<td>根据给定的标签名匹配元素</td>
<td>$(“h2” )选取所有h2元素</td>
</tr>
<tr>
<td>类选择器</td>
<td>.class</td>
<td>根据给定的class匹配元素</td>
<td>$(“ .title”)选取所有class为title的元素</td>
</tr>
<tr>
<td>ID选择器</td>
<td>#id</td>
<td>根据给定的id匹配元素</td>
<td>$(“ #title”)选取id为title的元素</td>
</tr>
<tr>
<td>并集选择器</td>
<td>selector1,selector2<br>,…,selectorN</td>
<td>将每一个选择器匹配的元素合并后一起返回</td>
<td>$(“div,p,.title” )选取所有div、p和拥有class为title的元素</td>
</tr>
<tr>
<td>全局选择器</td>
<td>*</td>
<td>匹配所有元素</td>
<td>$(“*” )选取所有元素</td>
</tr>
</tbody></table>
</li>
<li><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><ol>
<li><p>标签选择器根据给定的标签名匹配元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;dt&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">&quot;dd&quot;</span>).css(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;block&quot;</span>); </span><br><span class="line">    &#125;);<span class="comment">//设置&lt;dd&gt;标签中的内容显示出来</span></span><br><span class="line">    $(<span class="string">&quot;h1&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">&#125;)<span class="comment">//设置&lt;h1&gt;标签中的字体颜色为蓝色</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/23/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/image-20210723112219912.png" alt="image-20210723112219912"></p>
</li>
</ol>
</li>
<li><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><ol>
<li><p>类选择器根据给定的class匹配元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.price&quot;</span>).css(&#123;<span class="string">&quot;background&quot;</span>:<span class="string">&quot;#efefef&quot;</span>,<span class="string">&quot;padding&quot;</span>:<span class="string">&quot;5px&quot;</span>&#125;);</span><br><span class="line">	<span class="comment">//设置class为price元素的背景颜色和内边距</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/23/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/image-20210723112305387.png" alt="image-20210723112305387"></p>
</li>
</ol>
</li>
<li><h4 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h4><ol>
<li><p>ID选择器根据给定的id匹配元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#author&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;#083499&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/23/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/image-20210723112328682.png" alt="image-20210723112328682"></p>
</li>
</ol>
</li>
<li><h4 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h4><ol>
<li><p>并集选择器用来合并元素集合</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.intro,dt,dd&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;#ff0000&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/23/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/image-20210723112409148.png" alt="image-20210723112409148"></p>
</li>
</ol>
</li>
<li><h4 id="全局选择器"><a href="#全局选择器" class="headerlink" title="全局选择器"></a>全局选择器</h4><ol>
<li><p>全局选择器可以获取所有元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;*&quot;</span>).css(<span class="string">&quot;font-weight&quot;</span>,<span class="string">&quot;bold&quot;</span>);</span><br><span class="line">	<span class="comment">//设置所有元素的字体加粗显示</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/23/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/image-20210723112440569.png" alt="image-20210723112440569"></p>
</li>
</ol>
</li>
</ol>
</li>
<li><h3 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h3><ul>
<li><p>层次选择器通过DOM 元素之间的层次关系来获取元素</p>
</li>
<li><table>
<thead>
<tr>
<th>名称</th>
<th>语法构成</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>后代选择器</td>
<td>ancestor descendant</td>
<td>选取ancestor元素里的所有descendant（后代）元素</td>
<td>$(“#menu span” )选取#menu下的&lt;span&gt;元素</td>
</tr>
<tr>
<td>子选择器</td>
<td>parent&gt;child</td>
<td>选取parent元素下的child（子）元素</td>
<td>$(“ #menu&gt;span” )选取#menu的子元素&lt;span&gt;</td>
</tr>
<tr>
<td>相邻元素选择器</td>
<td>prev+next</td>
<td>选取紧邻prev元素之后的next元素</td>
<td>$(“ h2+dl “ )选取紧邻&lt;h2&gt;元素之后的同辈元素&lt;dl&gt;</td>
</tr>
<tr>
<td>同辈元素选择器</td>
<td>prev~sibings</td>
<td>选取prev元素之后的所有siblings元素</td>
<td>$(“ h2~dl “ )选取&lt;h2&gt;元素之后所有的同辈元素&lt;dl&gt;</td>
</tr>
</tbody></table>
</li>
</ul>
<ol>
<li><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><ol>
<li><p>后代选择器用来获取元素的后代元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.textRight p&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line"><span class="comment">//设置class为textRight元素中的所有&lt;p&gt;标签的字体全部为红色</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/23/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/image-20210723112623146.png" alt="image-20210723112623146"></p>
</li>
</ol>
</li>
<li><h4 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h4><ol>
<li><p>子选择器用来获取元素的子元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.textRight&gt;p&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/23/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/image-20210723112647339.png" alt="image-20210723112647339"></p>
</li>
</ol>
</li>
<li><h4 id="相邻选择器"><a href="#相邻选择器" class="headerlink" title="相邻选择器"></a>相邻选择器</h4><ol>
<li><p>相邻选择器用来选取紧邻目标元素的下一个元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;h1+p&quot;</span>).css(text-decoration<span class="string">&quot;,&quot;</span>underline<span class="string">&quot;); </span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/23/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/image-20210723112712423.png" alt="image-20210723112712423"></p>
</li>
</ol>
</li>
<li><h4 id="同辈选择器"><a href="#同辈选择器" class="headerlink" title="同辈选择器"></a>同辈选择器</h4><ol>
<li><p>同辈选择器用来选取目标元素之后的所有同辈元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;h1~p&quot;</span>).css(<span class="string">&quot;text-decoration&quot;</span>,<span class="string">&quot;underline&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/23/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/image-20210723112730816.png" alt="image-20210723112730816"></p>
</li>
</ol>
</li>
</ol>
</li>
<li><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><ul>
<li><p>属性选择器通过HTML元素的属性来选择元素</p>
</li>
<li><table>
<thead>
<tr>
<th>语法构成</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>[attribute]</td>
<td>选取包含给定属性的元素</td>
<td>$(“ [href]” )选取含有href属性的元素</td>
</tr>
<tr>
<td>[attribute=value]</td>
<td>选取等于给定属性是某个特定值的元素</td>
<td>$(“ [href =’#’]” )选取href属性值为“#”的元素</td>
</tr>
<tr>
<td>[attribute !=value]</td>
<td>选取不等于给定属性是某个特定值的元素</td>
<td>$(“ [href !=’#’]” )选取href属性值不为“#”的元素</td>
</tr>
<tr>
<td>[attribute^=value]</td>
<td>选取给定属性是以某些特定值开始的元素</td>
<td>$(“ [href^=’en’]” )选取href属性值以en开头的元素</td>
</tr>
<tr>
<td>[attribute$=value]</td>
<td>选取给定属性是以某些特定值结尾的元素</td>
<td>$(“ [href$=’.jpg’]” )选取href属性值以.jpg结尾的元素</td>
</tr>
<tr>
<td>[attribute*=value]</td>
<td>选取给定属性是以包含某些值的元素</td>
<td>$(“ [href* =’txt’]” )选取href属性值中含有txt的元素</td>
</tr>
</tbody></table>
</li>
</ul>
<ol>
<li><p>属性选择器可以根据是否包含某属性来选取元素</p>
<ol>
<li><p>a标签带有class属性</p>
</li>
<li><p>~~~js<br>$(“#news a[class]”).css(“background”,”#c9cbcb”);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">      ![image-20210723112940224](jQuery选择器/image-20210723112940224.png)</span><br><span class="line"></span><br><span class="line">2. #### 根据属性值获取元素</span><br><span class="line"></span><br><span class="line">   1. 属性选择器可以根据属性的值来选取元素</span><br><span class="line"></span><br><span class="line">   2. class属性值为hot</span><br><span class="line"></span><br><span class="line">      ~~~js</span><br><span class="line">      $(&quot;#news a[class=&#x27;hot&#x27;]&quot;).css(&quot;background&quot;,&quot;#c9cbcb&quot;);</span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/23/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/image-20210723113014433.png" alt="image-20210723113014433"></p>
</li>
<li><p>属性选择器可以指定选取不等于属性是某个特定值的元素</p>
</li>
<li><p>class值不等于hot</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#news a[class!=&#x27;hot&#x27;]&quot;</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#c9cbcb&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/23/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/image-20210723113032444.png" alt="image-20210723113032444"></p>
</li>
</ol>
</li>
<li><h4 id="根据属性值包含特定的值获取元素"><a href="#根据属性值包含特定的值获取元素" class="headerlink" title="根据属性值包含特定的值获取元素"></a>根据属性值包含特定的值获取元素</h4><ol>
<li><p>属性选择器可以指定属性值以指定值开头的元素</p>
<ol>
<li><p>a标签href属性值以www开头</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#news a[href^=&#x27;www&#x27;]&quot;</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#c9cbcb&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/23/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/image-20210723113120807.png" alt="image-20210723113120807"></p>
</li>
</ol>
</li>
<li><p>属性选择器可以指定属性值以指定值结尾的元素</p>
<ol>
<li><p>a标签href属性值以html结尾</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#news a[href$=&#x27;html&#x27;]&quot;</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#c9cbcb&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/23/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/image-20210723113141700.png" alt="image-20210723113141700"></p>
</li>
</ol>
</li>
<li><p>属性选择器可以指定属性值包含指定值的元素</p>
<ol>
<li><p>a标签href属性值包含“k2”的元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#news a[href*=&#x27;k2&#x27;]&quot;</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#c9cbcb&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/23/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/image-20210723113208034.png" alt="image-20210723113208034"></p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ul>
</li>
<li><h2 id="通过过滤选择器选择元素"><a href="#通过过滤选择器选择元素" class="headerlink" title="通过过滤选择器选择元素"></a>通过过滤选择器选择元素</h2><ul>
<li><p>通过特定的过滤规则来筛选出所需的元素</p>
</li>
<li><p>主要分类</p>
</li>
<li><p>基本过滤选择器</p>
</li>
<li><p>可见性过滤选择器</p>
</li>
<li><p>表单对象过滤选择器(将在后续章节中讲解)</p>
</li>
<li><p>内容过滤选择器、子元素过滤选择器……</p>
</li>
<li><table>
<thead>
<tr>
<th>语法</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>:eq(index)</td>
<td>选取索引等于index的元素（index从0开始）</td>
<td>$(“li:eq(1)” )选取索引等于1的<li>元素</li></td>
</tr>
<tr>
<td>:gt(index)</td>
<td>选取索引大于index的元素（index从0开始）</td>
<td>$(“ li:gt(1)” )选取索引大于1的<li>元素（注：大于1，不包括1）</li></td>
</tr>
<tr>
<td>:lt(index)</td>
<td>选取索引小于index的元素（index从0开始）</td>
<td>$(“li:lt(1)” )选取索引小于1的<li>元素（注：小于1，不包括1）</li></td>
</tr>
<tr>
<td>:header</td>
<td>选取所有标题元素，如h1~h6</td>
<td>$(“:header” )选取网页中所有标题元素</td>
</tr>
<tr>
<td>:focus</td>
<td>选取当前获取焦点的元素</td>
<td>$(“:focus” )选取当前获取焦点的元素</td>
</tr>
<tr>
<td>:animated</td>
<td>选择所有动画</td>
<td>$(“:animated” )选取当前所有动画元素</td>
</tr>
<tr>
<td>:first</td>
<td>选取第一个元素</td>
<td>$(“ li:first” )选取所有<li>元素中的第一个</li><li>元素</li></td>
</tr>
<tr>
<td>:last</td>
<td>选取最后一个元素</td>
<td>$(“ li:last” )选取所有<li>元素中的最后一个</li><li>元素</li></td>
</tr>
<tr>
<td>:not(selector)</td>
<td>选取去除所有与给定选择器匹配的元素</td>
<td>$(“ li:not(.three)” )选取class不是three的元素</td>
</tr>
<tr>
<td>:even</td>
<td>选取索引是偶数的所有元素（index从0开始）</td>
<td>$(“ li:even” )选取索引是偶数的所有<li>元素</li></td>
</tr>
<tr>
<td>:odd</td>
<td>选取索引是奇数的所有元素（index从0开始）</td>
<td>$(“ li:odd” )选取索引是奇数的所有<li>元素</li></td>
</tr>
</tbody></table>
</li>
<li><h2 id="制作仿奥列表页面"><a href="#制作仿奥列表页面" class="headerlink" title="制作仿奥列表页面"></a>制作仿奥列表页面</h2><ol>
<li><ol>
<li>页面效果</li>
</ol>
<p><img src="/2021/07/23/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/image-20210723114014625.png" alt="image-20210723114014625"></p>
<ol>
<li><p>代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;contain&quot;</span>&gt;</span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>祝福冬奥<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span> 贝克汉姆：衷心希望北京能够申办成功！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span> 姚明：北京申冬奥是个非常棒的机会！加油！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span> 张虹：北京办冬奥，大家的热情定超乎想象！ <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span> 肖恩怀特：我爱北京，支持北京申办冬奥会！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span> 赵宏博：北京申办冬奥会是再合适不过了！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span> 你喜欢哪些冬季运动项目？(点击进入调查页)<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;.contain :header&quot;</span>).css(&#123;<span class="string">&quot;background&quot;</span>:<span class="string">&quot;#2a65ba&quot;</span>,<span class="string">&quot;color&quot;</span>:<span class="string">&quot;#ffffff&quot;</span>&#125;);</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li></li>
<li><p>页面效果</p>
<p><img src="/2021/07/23/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/image-20210723114224306.png" alt="image-20210723114224306"></p>
</li>
<li><p>代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.contain li:first&quot;</span>).css(&#123;<span class="string">&quot;font-size&quot;</span>:<span class="string">&quot;16px&quot;</span>,<span class="string">&quot;color&quot;</span>:<span class="string">&quot;#e90202&quot;</span>&#125;);</span><br><span class="line">$(<span class="string">&quot;.contain li:last&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;none&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;.contain li:even&quot;</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#f0f0f0&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;.contain li:odd&quot;</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#cccccc&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li></li>
<li><p>页面效果</p>
<p><img src="/2021/07/23/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/image-20210723114242711.png" alt="image-20210723114242711"></p>
</li>
<li><p>代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.contain li:lt(2)&quot;</span>).css(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;#708b02&quot;</span>&#125;);</span><br><span class="line">$(<span class="string">&quot;.contain li:gt(3)&quot;</span>).css(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;#b66302&quot;</span>&#125;);</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h3 id="可见性过滤选择器"><a href="#可见性过滤选择器" class="headerlink" title="可见性过滤选择器"></a>可见性过滤选择器</h3><ol>
<li><p>通过元素显示状态来选取元素</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>:visible</td>
<td>选取所有可见的元素</td>
<td>$(“:visible” )选取所有可见的元素</td>
</tr>
<tr>
<td>:hidden</td>
<td>选取所有隐藏的元素</td>
<td>$(“:hidden” ) 选取所有隐藏的元素</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p:hidden&quot;</span>).show();</span><br><span class="line">$(<span class="string">&quot;p:visible&quot;</span>).hide();</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><h2 id="jQuery选择器注意事项"><a href="#jQuery选择器注意事项" class="headerlink" title="jQuery选择器注意事项"></a>jQuery选择器注意事项</h2><ol>
<li><p>特殊符号的转义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;id#a&quot;</span>&gt;aa&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;id[2]&quot;</span>&gt;</span>cc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>获取这两个元素的选择器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#id\\#a&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;#id\\[2\\]&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>选择器中的空格</p>
<p>选择器的书写规范很严格，多一个空格或少一个空格，都会影响选择器的效果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $t_a = $(<span class="string">&quot;.test :hidden&quot;</span>); <span class="comment">//带空格的jQuery选择器</span></span><br><span class="line"><span class="comment">//选取class为“test”的元素内部的隐藏元素</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $t_b = $(<span class="string">&quot;.test:hidden&quot;</span>);  <span class="comment">//不带空格的jQuery选择器</span></span><br><span class="line"><span class="comment">//选取隐藏的class为“test”的元素</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h2 id="如何实现同一个列表不同样式？"><a href="#如何实现同一个列表不同样式？" class="headerlink" title="如何实现同一个列表不同样式？"></a>如何实现同一个列表不同样式？</h2></li>
<li><h3 id="如何实现奇偶行不同颜色背景，首行红色字体？"><a href="#如何实现奇偶行不同颜色背景，首行红色字体？" class="headerlink" title="如何实现奇偶行不同颜色背景，首行红色字体？"></a>如何实现奇偶行不同颜色背景，首行红色字体？</h3></li>
<li><p><img src="/2021/07/23/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/image-20210723113236352.png" alt="image-20210723113236352"></p>
</li>
<li><p>代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html</span><br><span class="line">	PUBLIC <span class="string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">title</span>&gt;</span> <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">			* &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">padding</span>: <span class="number">0px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">margin</span>: <span class="number">0px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">			&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">			<span class="selector-tag">a</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">color</span>: <span class="number">#000</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">text-decoration</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">			&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">			<span class="selector-tag">ul</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">list-style</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">			&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">			<span class="selector-tag">dl</span>,</span></span></span><br><span class="line"><span class="css"><span class="xml">			<span class="selector-tag">dt</span>,</span></span></span><br><span class="line"><span class="css"><span class="xml">			<span class="selector-tag">dd</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">display</span>: block;</span></span></span><br><span class="line"><span class="css"><span class="xml">			&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">			<span class="selector-tag">dl</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">clear</span>: both;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">height</span>: <span class="number">30px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">width</span>: <span class="number">670px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">			&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">			<span class="selector-tag">dl</span> <span class="selector-tag">dt</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">width</span>: <span class="number">100px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">padding-left</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">float</span>: left;</span></span></span><br><span class="line"><span class="css"><span class="xml">			&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">			<span class="selector-tag">dl</span> <span class="selector-tag">dd</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">float</span>: left;</span></span></span><br><span class="line"><span class="css"><span class="xml">			&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">			<span class="selector-tag">dl</span> <span class="selector-tag">dd</span> <span class="selector-tag">a</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">margin</span>: <span class="number">3px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">			&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">			<span class="selector-tag">dl</span> <span class="selector-tag">dd</span><span class="selector-class">.more</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">float</span>: right;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">			&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.6655.com/1/youxi.htm&quot;</span>&gt;</span>[页游]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://codes.dian5000.com/htmlcode/38319.html&quot;</span>&gt;</span>枪魂<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">							<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://p.37pk49.com/s/1/683/11722.html?uid=510412&quot;</span>&gt;</span>女神联盟<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">								<span class="attr">href</span>=<span class="string">&quot;http://tg.131cc.com/?uid=510412&quot;</span>&gt;</span>37WAN游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">								<span class="attr">href</span>=<span class="string">&quot;http://p.37pk49.com/s/1/683/13574.html?uid=510412&quot;</span>&gt;</span>武易<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">								<span class="attr">href</span>=<span class="string">&quot;http://jcnm.game3737.com/htmlcode/36266.html&quot;</span>&gt;</span>斗圣<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">								<span class="attr">href</span>=<span class="string">&quot;http://tk.pk897.com/1616dh.php?id=2467&quot;</span>&gt;</span>烈焰<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">								<span class="attr">href</span>=<span class="string">&quot;http://p.37pk49.com/s/1/683/14006.html?uid=510412&quot;</span>&gt;</span>大闹天宫OL<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">dd</span> <span class="attr">class</span>=<span class="string">&quot;more&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.6655.com/1/youxi.htm&quot;</span>&gt;</span>更多<span class="symbol">&amp;gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;s1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.6655.com/1/xiaoyouxi.htm&quot;</span>&gt;</span>[小游戏]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.4339.cc&quot;</span>&gt;</span>4339小游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.6949.com&quot;</span>&gt;</span>6949小游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">								<span class="attr">href</span>=<span class="string">&quot;http://www.3155.com/?hmsr=1616&quot;</span>&gt;</span>3155小游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">								<span class="attr">href</span>=<span class="string">&quot;http://www.4399i.net/&quot;</span>&gt;</span>4399i小游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">								<span class="attr">href</span>=<span class="string">&quot;http://www.3199.cn/?hmsr=1616&quot;</span>&gt;</span>3199小游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">								<span class="attr">href</span>=<span class="string">&quot;http://www.7k7k7.net&quot;</span>&gt;</span>7k7k7小游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">dd</span> <span class="attr">class</span>=<span class="string">&quot;more&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.6655.com/1/xiaoyouxi.htm&quot;</span>&gt;</span>更多<span class="symbol">&amp;gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.6655.com/1/yingshi.htm&quot;</span>&gt;</span>[影视]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.iqiyi.com&quot;</span>&gt;</span>爱奇艺高清<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.tudou.com/&quot;</span>&gt;</span>土豆网<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">								<span class="attr">href</span>=<span class="string">&quot;http://tv.sohu.com/movie/&quot;</span>&gt;</span>搜狐电影<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://tv.cntv.cn/&quot;</span>&gt;</span>CNTV<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">							<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kktv1.com/c.shtml?c=52560&quot;</span>&gt;</span>KK美女视频<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">								<span class="attr">href</span>=<span class="string">&quot;http://p.yiqifa.com/s?sid=a4df75c5719e9b11<span class="symbol">&amp;amp;</span>pid=184<span class="symbol">&amp;amp;</span>wid=410486<span class="symbol">&amp;amp;</span>vid=426282<span class="symbol">&amp;amp;</span>cid=7100<span class="symbol">&amp;amp;</span>lid=168915<span class="symbol">&amp;amp;</span>euid=<span class="symbol">&amp;amp;</span>vwid=&quot;</span>&gt;</span>六间房<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">dd</span> <span class="attr">class</span>=<span class="string">&quot;more&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.6655.com/1/yingshi.htm&quot;</span>&gt;</span>更多<span class="symbol">&amp;gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;s1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.6655.com/1/xiaoshuo.htm&quot;</span>&gt;</span>[小说]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.qdmm.com/&quot;</span>&gt;</span>起点女生网<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">								<span class="attr">href</span>=<span class="string">&quot;http://www.zongheng.com/?co=1616&quot;</span>&gt;</span>纵横中文网<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">								<span class="attr">href</span>=<span class="string">&quot;http://p.yiqifa.com/c?s=3b2f15ba<span class="symbol">&amp;amp;</span>w=88243<span class="symbol">&amp;amp;</span>c=6805<span class="symbol">&amp;amp;</span>i=23342<span class="symbol">&amp;amp;</span>l=0<span class="symbol">&amp;amp;</span>e=<span class="symbol">&amp;amp;</span>t=http://www.zazhipu.com/&quot;</span>&gt;</span>杂志铺<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">								<span class="attr">href</span>=<span class="string">&quot;http://www.xxsy.net/&quot;</span>&gt;</span>潇湘书院<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.qidian.com/Default.aspx&quot;</span>&gt;</span>起点<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">							<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.xs8.cn/&quot;</span>&gt;</span>言情小说吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">dd</span> <span class="attr">class</span>=<span class="string">&quot;more&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.6655.com/1/xiaoshuo.htm&quot;</span>&gt;</span>更多<span class="symbol">&amp;gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.6655.com/1/youxi.htm&quot;</span>&gt;</span>[游戏]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://365.uc108.com/&quot;</span>&gt;</span>同城游棋牌<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://games.sina.com.cn/&quot;</span>&gt;</span>新浪游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">								<span class="attr">href</span>=<span class="string">&quot;http://p.yiqifa.com/c?s=ae39a645<span class="symbol">&amp;amp;</span>w=154815<span class="symbol">&amp;amp;</span>c=6756<span class="symbol">&amp;amp;</span>i=23904<span class="symbol">&amp;amp;</span>l=0<span class="symbol">&amp;amp;</span>e=<span class="symbol">&amp;amp;</span>t=http://www.5173.com/&quot;</span>&gt;</span>5173游戏交易<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">								<span class="attr">href</span>=<span class="string">&quot;http://www.17173.com/&quot;</span>&gt;</span>17173游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.duowan.com/&quot;</span>&gt;</span>多玩游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">dd</span> <span class="attr">class</span>=<span class="string">&quot;more&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.6655.com/1/youxi.htm&quot;</span>&gt;</span>更多<span class="symbol">&amp;gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;s1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.6655.com/1/yinyue.htm&quot;</span>&gt;</span>[音乐]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.1ting.com&quot;</span>&gt;</span>一听音乐网<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://mp3.sogou.com/&quot;</span>&gt;</span>搜狗音乐<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">								<span class="attr">href</span>=<span class="string">&quot;http://music.baidu.com&quot;</span>&gt;</span>百度mp3<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.yinyuetai.com/&quot;</span>&gt;</span>音悦台MV<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">								<span class="attr">href</span>=<span class="string">&quot;http://www.iqiyi.com/zongyi/superboy.html&quot;</span>&gt;</span>快乐男声<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">dd</span> <span class="attr">class</span>=<span class="string">&quot;more&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.6655.com/1/yinyue.htm&quot;</span>&gt;</span>更多<span class="symbol">&amp;gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.6655.com/1/jiaoyou.htm&quot;</span>&gt;</span>[交友]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://reg.jiayuan.com/st/?id=421710<span class="symbol">&amp;amp;</span>url=http://reg.jiayuan.com&quot;</span>&gt;</span>世纪佳缘<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">							<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.zhiji.com/?ad=1616&quot;</span> <span class="attr">class</span>=<span class="string">&quot;green&quot;</span>&gt;</span>同城交友网<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">								<span class="attr">href</span>=<span class="string">&quot;http://www.zhenai.com/901934.html&quot;</span>&gt;</span>珍爱网<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">								<span class="attr">href</span>=<span class="string">&quot;http://www.9see.com/go123?from=120_1&quot;</span>&gt;</span>美女秀场<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">								<span class="attr">href</span>=<span class="string">&quot;http://www.iqiyi.com/zongyi/fcwr.html&quot;</span>&gt;</span>非诚勿扰<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">dd</span> <span class="attr">class</span>=<span class="string">&quot;more&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.6655.com/1/jiaoyou.htm&quot;</span>&gt;</span>更多<span class="symbol">&amp;gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;s1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.6655.com/1/lvyou.htm&quot;</span>&gt;</span>[旅游]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">						<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://vacations.ctrip.com/?allianceid=1091<span class="symbol">&amp;amp;</span>sid=1227<span class="symbol">&amp;amp;</span>ouid=&quot;</span>&gt;</span>携程旅游<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">								<span class="attr">href</span>=<span class="string">&quot;http://www.tuniu.com/?p=1627<span class="symbol">&amp;amp;</span>cmpid=mkt_08005301<span class="symbol">&amp;amp;</span>utm_campaign=daohang<span class="symbol">&amp;amp;</span>utm_source=1616.net<span class="symbol">&amp;amp;</span>utm_medium=textlink&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">								<span class="attr">class</span>=<span class="string">&quot;green&quot;</span>&gt;</span>途牛旅游网<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.zoutu.com/&quot;</span>&gt;</span>云南旅游<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">								<span class="attr">href</span>=<span class="string">&quot;http://hotel.elong.com/?banid=1616&quot;</span>&gt;</span>艺龙订酒店<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">								<span class="attr">href</span>=<span class="string">&quot;http://www.qunar.com/?ex_track=auto_4f4dd298&quot;</span>&gt;</span>去哪儿旅游<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">								<span class="attr">href</span>=<span class="string">&quot;http://detail.tmall.com/item.htm?id=21737099723&quot;</span>&gt;</span>迪士尼门票<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">								<span class="attr">href</span>=<span class="string">&quot;http://www.17u.cn/FlightQuery.aspx#refid=14748221&quot;</span>&gt;</span>同程机票<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">dd</span> <span class="attr">class</span>=<span class="string">&quot;more&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.6655.com/1/lvyou.htm&quot;</span>&gt;</span>更多<span class="symbol">&amp;gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-1.8.3.min.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">	<span class="comment">//$(&quot;dl:even&quot;).css(&quot;background&quot;, &quot;#ECF8FD&quot;);</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">	$(<span class="string">&quot;dl:not(:first):even&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;#eff7d1&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">	$(<span class="string">&quot;dl:not(:first):odd&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;#f7e195&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">	</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">	&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="/2021/07/23/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/image-20210723114807141.png" alt="image-20210723114807141"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>使用jQuery快速高效制作网页交互特效</category>
      </categories>
  </entry>
</search>
